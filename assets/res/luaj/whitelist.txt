>p:java{
 >p:io{
  >c:Closeable{
   +z
   +m:close:
  }
  >c:DataInput{
   +z
   +m:readBoolean:
   +m:readByte:
   +m:readChar:
   +m:readDouble:
   +m:readFloat:
   +m:readFully:byte[]
   +m:readFully:byte[],int,int
   +m:readInt:
   +m:readLine:
   +m:readLong:
   +m:readShort:
   +m:readUTF:
   +m:readUnsignedByte:
   +m:readUnsignedShort:
   +m:skipBytes:int
  }
  >c:DataOutput{
   +z
   +m:write:byte[]
   +m:write:byte[],int,int
   +m:write:int
   +m:writeBoolean:boolean
   +m:writeByte:int
   +m:writeBytes:String
   +m:writeChar:int
   +m:writeChars:String
   +m:writeDouble:double
   +m:writeFloat:float
   +m:writeInt:int
   +m:writeLong:long
   +m:writeShort:int
   +m:writeUTF:String
  }
  -c:Externalizable
  -c:FileFilter
  -c:FilenameFilter
  >c:Flushable{
   +z
   +m:flush:
  }
  -c:ObjectInput
  -c:ObjectInputValidation
  -c:ObjectOutput
  -c:ObjectStreamConstants
  -c:Serializable
  >c:BufferedInputStream{
   +x:InputStream
   +x:InputStream,int
   +m:available:
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:byte[],int,int
   +m:reset:
   +m:skip:long
  }
  >c:BufferedOutputStream{
   +x:OutputStream
   +x:OutputStream,int
   +m:flush:
   +m:write:byte[],int,int
   +m:write:int
  }
  >c:BufferedReader{
   +x:Reader
   +x:Reader,int
   +m:close:
   -m:lines:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:char[],int,int
   +m:readLine:
   +m:ready:
   +m:reset:
   +m:skip:long
  }
  >c:BufferedWriter{
   +x:Writer
   +x:Writer,int
   +m:close:
   +m:flush:
   +m:newLine:
   +m:write:String,int,int
   +m:write:char[],int,int
   +m:write:int
  }
  >c:ByteArrayInputStream{
   +x:byte[]
   +x:byte[],int,int
   +m:available:
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:byte[],int,int
   +m:reset:
   +m:skip:long
  }
  >c:ByteArrayOutputStream{
   +x:
   +x:int
   +m:close:
   +m:reset:
   +m:size:
   +m:toByteArray:
   +m:toString:
   +m:toString:String
   +m:write:byte[],int,int
   +m:write:int
   +m:writeTo:OutputStream
  }
  >c:CharArrayReader{
   +x:char[]
   +x:char[],int,int
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:char[],int,int
   +m:ready:
   +m:reset:
   +m:skip:long
  }
  >c:CharArrayWriter{
   +x:
   +x:int
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
   +m:close:
   +m:flush:
   +m:reset:
   +m:size:
   +m:toCharArray:
   +m:toString:
   +m:write:String,int,int
   +m:write:char[],int,int
   +m:write:int
   +m:writeTo:Writer
  }
  -c:CharConversionException
  -c:Console
  >c:DataInputStream{
   +x:InputStream
   -m:readUTF:DataInput
   +m:read:byte[]
   +m:read:byte[],int,int
   +m:readBoolean:
   +m:readByte:
   +m:readChar:
   +m:readDouble:
   +m:readFloat:
   +m:readFully:byte[]
   +m:readFully:byte[],int,int
   +m:readInt:
   +m:readLong:
   +m:readShort:
   +m:readUTF:
   +m:readUnsignedByte:
   +m:readUnsignedShort:
   +m:skipBytes:int
  }
  >c:DataOutputStream{
   +x:OutputStream
   +m:flush:
   +m:size:
   +m:write:byte[],int,int
   +m:write:int
   +m:writeBoolean:boolean
   +m:writeByte:int
   +m:writeBytes:String
   +m:writeChar:int
   +m:writeChars:String
   +m:writeDouble:double
   +m:writeFloat:float
   +m:writeInt:int
   +m:writeLong:long
   +m:writeShort:int
   +m:writeUTF:String
  }
  -c:EOFException
  -c:File
  -c:FileDescriptor
  -c:FileInputStream
  -c:FileNotFoundException
  -c:FileOutputStream
  -c:FilePermission
  -c:FileReader
  -c:FileWriter
  >c:FilterInputStream{
   +m:available:
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:byte[]
   +m:read:byte[],int,int
   +m:reset:
   +m:skip:long
  }
  >c:FilterOutputStream{
   +x:OutputStream
   +m:close:
   +m:flush:
   +m:write:byte[]
   +m:write:byte[],int,int
   +m:write:int
  }
  -c:FilterReader
  -c:FilterWriter
  -c:IOError
  -c:IOException
  >c:InputStream{
   +m:available:
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:byte[]
   +m:read:byte[],int,int
   +m:reset:
   +m:skip:long
  }
  >c:InputStreamReader{
   +x:InputStream
   +x:InputStream,String
   -x:InputStream,Charset
   -x:InputStream,CharsetDecoder
   +m:close:
   +m:getEncoding:
   +m:read:
   +m:read:char[],int,int
   +m:ready:
  }
  -c:InterruptedIOException
  -c:InvalidClassException
  -c:InvalidObjectException
  -c:LineNumberInputStream
  -c:LineNumberReader
  -c:NotActiveException
  -c:NotSerializableException
  -c:ObjectInputStream
  -c:ObjectOutputStream
  -c:ObjectStreamClass
  -c:ObjectStreamField
  -c:OptionalDataException
  >c:OutputStream{
   +m:close:
   +m:flush:
   +m:write:byte[]
   +m:write:byte[],int,int
   +m:write:int
  }
  >c:OutputStreamWriter{
   +x:OutputStream
   +x:OutputStream,String
   -x:OutputStream,Charset
   -x:OutputStream,CharsetEncoder
   +m:close:
   +m:flush:
   +m:getEncoding:
   +m:write:String,int,int
   +m:write:char[],int,int
   +m:write:int
  }
  -c:PipedInputStream
  -c:PipedOutputStream
  -c:PipedReader
  -c:PipedWriter
  >c:PrintStream{
   -x:File
   -x:String
   +x:OutputStream
   -x:File,String
   -x:String,String
   +x:OutputStream,boolean
   +x:OutputStream,boolean,String
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
   +m:checkError:
   +m:close:
   +m:flush:
   +m:format:Locale,String,Object[]
   +m:format:String,Object[]
   +m:print:Object
   +m:print:String
   +m:print:boolean
   +m:print:char
   +m:print:char[]
   +m:print:double
   +m:print:float
   +m:print:int
   +m:print:long
   +m:printf:Locale,String,Object[]
   +m:printf:String,Object[]
   +m:println:
   +m:println:Object
   +m:println:String
   +m:println:boolean
   +m:println:char
   +m:println:char[]
   +m:println:double
   +m:println:float
   +m:println:int
   +m:println:long
   +m:write:byte[],int,int
   +m:write:int
  }
  >c:PrintWriter{
   -x:File
   -x:String
   +x:Writer
   +x:OutputStream
   -x:File,String
   -x:String,String
   +x:Writer,boolean
   +x:OutputStream,boolean
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
   +m:checkError:
   +m:close:
   +m:flush:
   -m:format:Locale,String,Object[]
   +m:format:String,Object[]
   +m:print:Object
   +m:print:String
   +m:print:boolean
   +m:print:char
   +m:print:char[]
   +m:print:double
   +m:print:float
   +m:print:int
   +m:print:long
   -m:printf:Locale,String,Object[]
   +m:printf:String,Object[]
   +m:println:
   +m:println:Object
   +m:println:String
   +m:println:boolean
   +m:println:char
   +m:println:char[]
   +m:println:double
   +m:println:float
   +m:println:int
   +m:println:long
   +m:write:String
   +m:write:String,int,int
   +m:write:char[]
   +m:write:char[],int,int
   +m:write:int
  }
  -c:PushbackInputStream
  -c:PushbackReader
  -c:RandomAccessFile
  >c:Reader{
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:CharBuffer
   +m:read:char[]
   +m:read:char[],int,int
   +m:ready:
   +m:reset:
   +m:skip:long
  }
  -c:SequenceInputStream
  -c:SerializablePermission
  -c:StreamCorruptedException
  -c:StreamTokenizer
  >c:StringBufferInputStream{
   +x:String
   +m:available:
   +m:read:
   +m:read:byte[],int,int
   +m:reset:
   +m:skip:long
  }
  >c:StringReader{
   +x:String
   +m:close:
   +m:mark:int
   +m:markSupported:
   +m:read:
   +m:read:char[],int,int
   +m:ready:
   +m:reset:
   +m:skip:long
  }
  >c:StringWriter{
   +x:
   +x:int
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
   +m:close:
   +m:flush:
   +m:getBuffer:
   +m:toString:
   +m:write:String
   +m:write:String,int,int
   +m:write:char[],int,int
   +m:write:int
  }
  -c:SyncFailedException
  -c:UTFDataFormatException
  -c:UncheckedIOException
  -c:UnsupportedEncodingException
  -c:WriteAbortedException
  >c:Writer{
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
   +m:close:
   +m:flush:
   +m:write:String
   +m:write:String,int,int
   +m:write:char[]
   +m:write:char[],int,int
   +m:write:int
  }
 }
 >p:lang{
  >p:annotation{
   >c:Annotation{
    -z
    +m:annotationType:
    +m:equals:Object
    +m:hashCode:
    +m:toString:
   }
   -c:Documented
   -c:Inherited
   -c:Native
   >c:Repeatable{
    -z
    +m:value:
   }
   >c:Retention{
    -z
    +m:value:
   }
   >c:Target{
    -z
    +m:value:
   }
   -c:AnnotationFormatError
   -c:AnnotationTypeMismatchException
   >c:ElementType{
    +f:ANNOTATION_TYPE
    +f:CONSTRUCTOR
    +f:FIELD
    +f:LOCAL_VARIABLE
    +f:METHOD
    +f:PACKAGE
    +f:PARAMETER
    +f:TYPE
    +f:TYPE_PARAMETER
    +f:TYPE_USE
    +m:valueOf:String
    +m:values:
   }
   -c:IncompleteAnnotationException
   >c:RetentionPolicy{
    +f:CLASS
    +f:RUNTIME
    +f:SOURCE
    +m:valueOf:String
    +m:values:
   }
  }
  -p:instrument
  -p:invoke
  -p:management
  >p:ref{
   -c:PhantomReference
   >c:Reference{
    +m:clear:
    +m:enqueue:
    +m:get:
    +m:isEnqueued:
   }
   -c:ReferenceQueue
   -c:SoftReference
   >c:WeakReference{
    +x:Object
    -x:Object,ReferenceQueue
   }
  }
  >p:reflect{
   >c:AnnotatedArrayType{
    +z
    +m:getAnnotatedGenericComponentType:
   }
   >c:AnnotatedElement{
    +z
    +m:getAnnotation:Class
    +m:getAnnotations:
    +m:getAnnotationsByType:Class
    +m:getDeclaredAnnotation:Class
    +m:getDeclaredAnnotations:
    +m:getDeclaredAnnotationsByType:Class
    +m:isAnnotationPresent:Class
   }
   >c:AnnotatedParameterizedType{
    +z
    +m:getAnnotatedActualTypeArguments:
   }
   >c:AnnotatedType{
    +z
    +m:getType:
   }
   >c:AnnotatedTypeVariable{
    +z
    +m:getAnnotatedBounds:
   }
   >c:AnnotatedWildcardType{
    +z
    +m:getAnnotatedLowerBounds:
    +m:getAnnotatedUpperBounds:
   }
   >c:GenericArrayType{
    +z
    +m:getGenericComponentType:
   }
   >c:GenericDeclaration{
    +z
    +m:getTypeParameters:
   }
   -c:InvocationHandler
   >c:Member{
    +z
    +f:DECLARED
    +f:PUBLIC
    +m:getDeclaringClass:
    +m:getModifiers:
    +m:getName:
    +m:isSynthetic:
   }
   >c:ParameterizedType{
    +z
    +m:getActualTypeArguments:
    +m:getOwnerType:
    +m:getRawType:
   }
   >c:Type{
    +z
    +m:getTypeName:
   }
   >c:TypeVariable{
    +z
    +m:getAnnotatedBounds:
    +m:getBounds:
    +m:getGenericDeclaration:
    +m:getName:
   }
   >c:WildcardType{
    +z
    +m:getLowerBounds:
    +m:getUpperBounds:
   }
   >c:AccessibleObject{
    -m:setAccessible:AccessibleObject[],boolean
    +m:getAnnotation:Class
    +m:getAnnotations:
    +m:getAnnotationsByType:Class
    +m:getDeclaredAnnotation:Class
    +m:getDeclaredAnnotations:
    +m:getDeclaredAnnotationsByType:Class
    +m:isAccessible:
    +m:isAnnotationPresent:Class
    -m:setAccessible:boolean
   }
   >c:Array{
    +m:get:Object,int
    +m:getBoolean:Object,int
    +m:getByte:Object,int
    +m:getChar:Object,int
    +m:getDouble:Object,int
    +m:getFloat:Object,int
    +m:getInt:Object,int
    +m:getLength:Object
    +m:getLong:Object,int
    +m:getShort:Object,int
    +m:newInstance:Class,int
    +m:newInstance:Class,int[]
    +m:set:Object,int,Object
    +m:setBoolean:Object,int,boolean
    +m:setByte:Object,int,byte
    +m:setChar:Object,int,char
    +m:setDouble:Object,int,double
    +m:setFloat:Object,int,float
    +m:setInt:Object,int,int
    +m:setLong:Object,int,long
    +m:setShort:Object,int,short
   }
   >c:Constructor{
    +m:equals:Object
    -m:getAnnotatedReceiverType:
    -m:getAnnotatedReturnType:
    +m:getAnnotation:Class
    +m:getDeclaredAnnotations:
    +m:getDeclaringClass:
    +m:getExceptionTypes:
    -m:getGenericExceptionTypes:
    -m:getGenericParameterTypes:
    +m:getModifiers:
    +m:getName:
    +m:getParameterAnnotations:
    +m:getParameterCount:
    +m:getParameterTypes:
    -m:getTypeParameters:
    +m:hashCode:
    +m:isSynthetic:
    +m:isVarArgs:
    -m:newInstance:Object[]
    +m:toGenericString:
    +m:toString:
   }
   >c:Executable{
    -m:getAnnotatedExceptionTypes:
    -m:getAnnotatedParameterTypes:
    -m:getAnnotatedReceiverType:
    -m:getAnnotatedReturnType:
    +m:getAnnotation:Class
    +m:getAnnotationsByType:Class
    +m:getDeclaredAnnotations:
    +m:getDeclaringClass:
    +m:getExceptionTypes:
    -m:getGenericExceptionTypes:
    -m:getGenericParameterTypes:
    +m:getModifiers:
    +m:getName:
    +m:getParameterAnnotations:
    +m:getParameterCount:
    +m:getParameterTypes:
    +m:getParameters:
    -m:getTypeParameters:
    +m:isSynthetic:
    +m:isVarArgs:
    +m:toGenericString:
   }
   >c:Field{
    +m:equals:Object
    -m:get:Object
    -m:getAnnotatedType:
    +m:getAnnotation:Class
    +m:getAnnotationsByType:Class
    -m:getBoolean:Object
    -m:getByte:Object
    -m:getChar:Object
    +m:getDeclaredAnnotations:
    +m:getDeclaringClass:
    -m:getDouble:Object
    -m:getFloat:Object
    -m:getGenericType:
    -m:getInt:Object
    -m:getLong:Object
    +m:getModifiers:
    +m:getName:
    -m:getShort:Object
    +m:getType:
    +m:hashCode:
    +m:isEnumConstant:
    +m:isSynthetic:
    -m:set:Object,Object
    -m:setBoolean:Object,boolean
    -m:setByte:Object,byte
    -m:setChar:Object,char
    -m:setDouble:Object,double
    -m:setFloat:Object,float
    -m:setInt:Object,int
    -m:setLong:Object,long
    -m:setShort:Object,short
    +m:toGenericString:
    +m:toString:
   }
   -c:GenericSignatureFormatError
   -c:InvocationTargetException
   -c:MalformedParameterizedTypeException
   -c:MalformedParametersException
   >c:Method{
    +m:equals:Object
    +m:getAnnotatedReturnType:
    +m:getAnnotation:Class
    +m:getDeclaredAnnotations:
    +m:getDeclaringClass:
    +m:getDefaultValue:
    +m:getExceptionTypes:
    +m:getGenericExceptionTypes:
    +m:getGenericParameterTypes:
    +m:getGenericReturnType:
    +m:getModifiers:
    +m:getName:
    +m:getParameterAnnotations:
    +m:getParameterCount:
    +m:getParameterTypes:
    +m:getReturnType:
    +m:getTypeParameters:
    +m:hashCode:
    -m:invoke:Object,Object[]
    +m:isBridge:
    +m:isDefault:
    +m:isSynthetic:
    +m:isVarArgs:
    +m:toGenericString:
    +m:toString:
   }
   >c:Modifier{
    +x:
    +f:ABSTRACT
    +f:FINAL
    +f:INTERFACE
    +f:NATIVE
    +f:PRIVATE
    +f:PROTECTED
    +f:PUBLIC
    +f:STATIC
    +f:STRICT
    +f:SYNCHRONIZED
    +f:TRANSIENT
    +f:VOLATILE
    +m:classModifiers:
    +m:constructorModifiers:
    +m:fieldModifiers:
    +m:interfaceModifiers:
    +m:isAbstract:int
    +m:isFinal:int
    +m:isInterface:int
    +m:isNative:int
    +m:isPrivate:int
    +m:isProtected:int
    +m:isPublic:int
    +m:isStatic:int
    +m:isStrict:int
    +m:isSynchronized:int
    +m:isTransient:int
    +m:isVolatile:int
    +m:methodModifiers:
    +m:parameterModifiers:
    +m:toString:int
   }
   >c:Parameter{
    +m:equals:Object
    +m:getAnnotatedType:
    +m:getAnnotation:Class
    +m:getAnnotations:
    +m:getAnnotationsByType:Class
    +m:getDeclaredAnnotation:Class
    +m:getDeclaredAnnotations:
    +m:getDeclaredAnnotationsByType:Class
    +m:getDeclaringExecutable:
    +m:getModifiers:
    +m:getName:
    +m:getParameterizedType:
    +m:getType:
    +m:hashCode:
    +m:isImplicit:
    +m:isNamePresent:
    +m:isSynthetic:
    +m:isVarArgs:
    +m:toString:
   }
   >c:Proxy{
    -m:getInvocationHandler:Object
    -m:getProxyClass:ClassLoader,Class[]
    +m:isProxyClass:Class
    -m:newProxyInstance:ClassLoader,Class[],InvocationHandler
   }
   -c:ReflectPermission
   -c:UndeclaredThrowableException
  }
  >c:Appendable{
   +z
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
  }
  -c:AutoCloseable
  >c:CharSequence{
   +z
   +m:charAt:int
   -m:chars:
   -m:codePoints:
   +m:length:
   +m:subSequence:int,int
   +m:toString:
  }
  -c:Cloneable
  >c:Comparable{
   +z
   +m:compareTo:Object
  }
  -c:Deprecated
  -c:FunctionalInterface
  >c:Iterable{
   +z
   -m:forEach:Consumer
   +m:iterator:
   -m:spliterator:
  }
  -c:Override
  -c:Readable
  >c:Runnable{
   +z
   +m:run:
  }
  -c:SafeVarargs
  >c:SuppressWarnings{
   -z
   +m:value:
  }
  -c:AbstractMethodError
  -c:ArithmeticException
  -c:ArrayIndexOutOfBoundsException
  -c:ArrayStoreException
  -c:AssertionError
  >c:Boolean{
   +x:String
   +x:boolean
   +f:FALSE
   +f:TRUE
   +f:TYPE
   +m:compare:boolean,boolean
   +m:getBoolean:String
   +m:hashCode:boolean
   +m:logicalAnd:boolean,boolean
   +m:logicalOr:boolean,boolean
   +m:logicalXor:boolean,boolean
   +m:parseBoolean:String
   +m:toString:boolean
   +m:valueOf:String
   +m:valueOf:boolean
   +m:booleanValue:
   +m:compareTo:Boolean
   +m:compareTo:Object
   +m:equals:Object
   +m:hashCode:
   +m:toString:
  }
  -c:BootstrapMethodError
  >c:Byte{
   +x:byte
   +x:String
   +f:BYTES
   +f:MAX_VALUE
   +f:MIN_VALUE
   +f:SIZE
   +f:TYPE
   +m:compare:byte,byte
   +m:decode:String
   +m:hashCode:byte
   +m:parseByte:String
   +m:parseByte:String,int
   +m:toString:byte
   +m:toUnsignedInt:byte
   +m:toUnsignedLong:byte
   +m:valueOf:String
   +m:valueOf:String,int
   +m:valueOf:byte
   +m:byteValue:
   +m:compareTo:Byte
   +m:compareTo:Object
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:longValue:
   +m:shortValue:
   +m:toString:
  }
  >c:Character{
   >c:Subset{
    +m:equals:Object
    +m:hashCode:
    +m:toString:
   }
   >c:UnicodeBlock{
    +f:AEGEAN_NUMBERS
    +f:ALCHEMICAL_SYMBOLS
    +f:ALPHABETIC_PRESENTATION_FORMS
    +f:ANCIENT_GREEK_MUSICAL_NOTATION
    +f:ANCIENT_GREEK_NUMBERS
    +f:ANCIENT_SYMBOLS
    +f:ARABIC
    +f:ARABIC_EXTENDED_A
    +f:ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS
    +f:ARABIC_PRESENTATION_FORMS_A
    +f:ARABIC_PRESENTATION_FORMS_B
    +f:ARABIC_SUPPLEMENT
    +f:ARMENIAN
    +f:ARROWS
    +f:AVESTAN
    +f:BALINESE
    +f:BAMUM
    +f:BAMUM_SUPPLEMENT
    +f:BASIC_LATIN
    +f:BATAK
    +f:BENGALI
    +f:BLOCK_ELEMENTS
    +f:BOPOMOFO
    +f:BOPOMOFO_EXTENDED
    +f:BOX_DRAWING
    +f:BRAHMI
    +f:BRAILLE_PATTERNS
    +f:BUGINESE
    +f:BUHID
    +f:BYZANTINE_MUSICAL_SYMBOLS
    +f:CARIAN
    +f:CHAKMA
    +f:CHAM
    +f:CHEROKEE
    +f:CJK_COMPATIBILITY
    +f:CJK_COMPATIBILITY_FORMS
    +f:CJK_COMPATIBILITY_IDEOGRAPHS
    +f:CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT
    +f:CJK_RADICALS_SUPPLEMENT
    +f:CJK_STROKES
    +f:CJK_SYMBOLS_AND_PUNCTUATION
    +f:CJK_UNIFIED_IDEOGRAPHS
    +f:CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
    +f:CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B
    +f:CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C
    +f:CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D
    +f:COMBINING_DIACRITICAL_MARKS
    +f:COMBINING_DIACRITICAL_MARKS_SUPPLEMENT
    +f:COMBINING_HALF_MARKS
    +f:COMBINING_MARKS_FOR_SYMBOLS
    +f:COMMON_INDIC_NUMBER_FORMS
    +f:CONTROL_PICTURES
    +f:COPTIC
    +f:COUNTING_ROD_NUMERALS
    +f:CUNEIFORM
    +f:CUNEIFORM_NUMBERS_AND_PUNCTUATION
    +f:CURRENCY_SYMBOLS
    +f:CYPRIOT_SYLLABARY
    +f:CYRILLIC
    +f:CYRILLIC_EXTENDED_A
    +f:CYRILLIC_EXTENDED_B
    +f:CYRILLIC_SUPPLEMENTARY
    +f:DESERET
    +f:DEVANAGARI
    +f:DEVANAGARI_EXTENDED
    +f:DINGBATS
    +f:DOMINO_TILES
    +f:EGYPTIAN_HIEROGLYPHS
    +f:EMOTICONS
    +f:ENCLOSED_ALPHANUMERICS
    +f:ENCLOSED_ALPHANUMERIC_SUPPLEMENT
    +f:ENCLOSED_CJK_LETTERS_AND_MONTHS
    +f:ENCLOSED_IDEOGRAPHIC_SUPPLEMENT
    +f:ETHIOPIC
    +f:ETHIOPIC_EXTENDED
    +f:ETHIOPIC_EXTENDED_A
    +f:ETHIOPIC_SUPPLEMENT
    +f:GENERAL_PUNCTUATION
    +f:GEOMETRIC_SHAPES
    +f:GEORGIAN
    +f:GEORGIAN_SUPPLEMENT
    +f:GLAGOLITIC
    +f:GOTHIC
    +f:GREEK
    +f:GREEK_EXTENDED
    +f:GUJARATI
    +f:GURMUKHI
    +f:HALFWIDTH_AND_FULLWIDTH_FORMS
    +f:HANGUL_COMPATIBILITY_JAMO
    +f:HANGUL_JAMO
    +f:HANGUL_JAMO_EXTENDED_A
    +f:HANGUL_JAMO_EXTENDED_B
    +f:HANGUL_SYLLABLES
    +f:HANUNOO
    +f:HEBREW
    +f:HIGH_PRIVATE_USE_SURROGATES
    +f:HIGH_SURROGATES
    +f:HIRAGANA
    +f:IDEOGRAPHIC_DESCRIPTION_CHARACTERS
    +f:IMPERIAL_ARAMAIC
    +f:INSCRIPTIONAL_PAHLAVI
    +f:INSCRIPTIONAL_PARTHIAN
    +f:IPA_EXTENSIONS
    +f:JAVANESE
    +f:KAITHI
    +f:KANA_SUPPLEMENT
    +f:KANBUN
    +f:KANGXI_RADICALS
    +f:KANNADA
    +f:KATAKANA
    +f:KATAKANA_PHONETIC_EXTENSIONS
    +f:KAYAH_LI
    +f:KHAROSHTHI
    +f:KHMER
    +f:KHMER_SYMBOLS
    +f:LAO
    +f:LATIN_1_SUPPLEMENT
    +f:LATIN_EXTENDED_A
    +f:LATIN_EXTENDED_ADDITIONAL
    +f:LATIN_EXTENDED_B
    +f:LATIN_EXTENDED_C
    +f:LATIN_EXTENDED_D
    +f:LEPCHA
    +f:LETTERLIKE_SYMBOLS
    +f:LIMBU
    +f:LINEAR_B_IDEOGRAMS
    +f:LINEAR_B_SYLLABARY
    +f:LISU
    +f:LOW_SURROGATES
    +f:LYCIAN
    +f:LYDIAN
    +f:MAHJONG_TILES
    +f:MALAYALAM
    +f:MANDAIC
    +f:MATHEMATICAL_ALPHANUMERIC_SYMBOLS
    +f:MATHEMATICAL_OPERATORS
    +f:MEETEI_MAYEK
    +f:MEETEI_MAYEK_EXTENSIONS
    +f:MEROITIC_CURSIVE
    +f:MEROITIC_HIEROGLYPHS
    +f:MIAO
    +f:MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A
    +f:MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B
    +f:MISCELLANEOUS_SYMBOLS
    +f:MISCELLANEOUS_SYMBOLS_AND_ARROWS
    +f:MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS
    +f:MISCELLANEOUS_TECHNICAL
    +f:MODIFIER_TONE_LETTERS
    +f:MONGOLIAN
    +f:MUSICAL_SYMBOLS
    +f:MYANMAR
    +f:MYANMAR_EXTENDED_A
    +f:NEW_TAI_LUE
    +f:NKO
    +f:NUMBER_FORMS
    +f:OGHAM
    +f:OLD_ITALIC
    +f:OLD_PERSIAN
    +f:OLD_SOUTH_ARABIAN
    +f:OLD_TURKIC
    +f:OL_CHIKI
    +f:OPTICAL_CHARACTER_RECOGNITION
    +f:ORIYA
    +f:OSMANYA
    +f:PHAGS_PA
    +f:PHAISTOS_DISC
    +f:PHOENICIAN
    +f:PHONETIC_EXTENSIONS
    +f:PHONETIC_EXTENSIONS_SUPPLEMENT
    +f:PLAYING_CARDS
    +f:PRIVATE_USE_AREA
    +f:REJANG
    +f:RUMI_NUMERAL_SYMBOLS
    +f:RUNIC
    +f:SAMARITAN
    +f:SAURASHTRA
    +f:SHARADA
    +f:SHAVIAN
    +f:SINHALA
    +f:SMALL_FORM_VARIANTS
    +f:SORA_SOMPENG
    +f:SPACING_MODIFIER_LETTERS
    +f:SPECIALS
    +f:SUNDANESE
    +f:SUNDANESE_SUPPLEMENT
    +f:SUPERSCRIPTS_AND_SUBSCRIPTS
    +f:SUPPLEMENTAL_ARROWS_A
    +f:SUPPLEMENTAL_ARROWS_B
    +f:SUPPLEMENTAL_MATHEMATICAL_OPERATORS
    +f:SUPPLEMENTAL_PUNCTUATION
    +f:SUPPLEMENTARY_PRIVATE_USE_AREA_A
    +f:SUPPLEMENTARY_PRIVATE_USE_AREA_B
    +f:SYLOTI_NAGRI
    +f:SYRIAC
    +f:TAGALOG
    +f:TAGBANWA
    +f:TAGS
    +f:TAI_LE
    +f:TAI_THAM
    +f:TAI_VIET
    +f:TAI_XUAN_JING_SYMBOLS
    +f:TAKRI
    +f:TAMIL
    +f:TELUGU
    +f:THAANA
    +f:THAI
    +f:TIBETAN
    +f:TIFINAGH
    +f:TRANSPORT_AND_MAP_SYMBOLS
    +f:UGARITIC
    +f:UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS
    +f:UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED
    +f:VAI
    +f:VARIATION_SELECTORS
    +f:VARIATION_SELECTORS_SUPPLEMENT
    +f:VEDIC_EXTENSIONS
    +f:VERTICAL_FORMS
    +f:YIJING_HEXAGRAM_SYMBOLS
    +f:YI_RADICALS
    +f:YI_SYLLABLES
    +m:forName:String
    +m:of:char
    +m:of:int
   }
   >c:UnicodeScript{
    +f:ARABIC
    +f:ARMENIAN
    +f:AVESTAN
    +f:BALINESE
    +f:BAMUM
    +f:BATAK
    +f:BENGALI
    +f:BOPOMOFO
    +f:BRAHMI
    +f:BRAILLE
    +f:BUGINESE
    +f:BUHID
    +f:CANADIAN_ABORIGINAL
    +f:CARIAN
    +f:CHAKMA
    +f:CHAM
    +f:CHEROKEE
    +f:COMMON
    +f:COPTIC
    +f:CUNEIFORM
    +f:CYPRIOT
    +f:CYRILLIC
    +f:DESERET
    +f:DEVANAGARI
    +f:EGYPTIAN_HIEROGLYPHS
    +f:ETHIOPIC
    +f:GEORGIAN
    +f:GLAGOLITIC
    +f:GOTHIC
    +f:GREEK
    +f:GUJARATI
    +f:GURMUKHI
    +f:HAN
    +f:HANGUL
    +f:HANUNOO
    +f:HEBREW
    +f:HIRAGANA
    +f:IMPERIAL_ARAMAIC
    +f:INHERITED
    +f:INSCRIPTIONAL_PAHLAVI
    +f:INSCRIPTIONAL_PARTHIAN
    +f:JAVANESE
    +f:KAITHI
    +f:KANNADA
    +f:KATAKANA
    +f:KAYAH_LI
    +f:KHAROSHTHI
    +f:KHMER
    +f:LAO
    +f:LATIN
    +f:LEPCHA
    +f:LIMBU
    +f:LINEAR_B
    +f:LISU
    +f:LYCIAN
    +f:LYDIAN
    +f:MALAYALAM
    +f:MANDAIC
    +f:MEETEI_MAYEK
    +f:MEROITIC_CURSIVE
    +f:MEROITIC_HIEROGLYPHS
    +f:MIAO
    +f:MONGOLIAN
    +f:MYANMAR
    +f:NEW_TAI_LUE
    +f:NKO
    +f:OGHAM
    +f:OLD_ITALIC
    +f:OLD_PERSIAN
    +f:OLD_SOUTH_ARABIAN
    +f:OLD_TURKIC
    +f:OL_CHIKI
    +f:ORIYA
    +f:OSMANYA
    +f:PHAGS_PA
    +f:PHOENICIAN
    +f:REJANG
    +f:RUNIC
    +f:SAMARITAN
    +f:SAURASHTRA
    +f:SHARADA
    +f:SHAVIAN
    +f:SINHALA
    +f:SORA_SOMPENG
    +f:SUNDANESE
    +f:SYLOTI_NAGRI
    +f:SYRIAC
    +f:TAGALOG
    +f:TAGBANWA
    +f:TAI_LE
    +f:TAI_THAM
    +f:TAI_VIET
    +f:TAKRI
    +f:TAMIL
    +f:TELUGU
    +f:THAANA
    +f:THAI
    +f:TIBETAN
    +f:TIFINAGH
    +f:UGARITIC
    +f:UNKNOWN
    +f:VAI
    +f:YI
    +m:forName:String
    +m:of:int
    +m:valueOf:String
    +m:values:
   }
   +x:char
   +f:BYTES
   +f:COMBINING_SPACING_MARK
   +f:CONNECTOR_PUNCTUATION
   +f:CONTROL
   +f:CURRENCY_SYMBOL
   +f:DASH_PUNCTUATION
   +f:DECIMAL_DIGIT_NUMBER
   +f:DIRECTIONALITY_ARABIC_NUMBER
   +f:DIRECTIONALITY_BOUNDARY_NEUTRAL
   +f:DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
   +f:DIRECTIONALITY_EUROPEAN_NUMBER
   +f:DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
   +f:DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
   +f:DIRECTIONALITY_LEFT_TO_RIGHT
   +f:DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
   +f:DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
   +f:DIRECTIONALITY_NONSPACING_MARK
   +f:DIRECTIONALITY_OTHER_NEUTRALS
   +f:DIRECTIONALITY_PARAGRAPH_SEPARATOR
   +f:DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
   +f:DIRECTIONALITY_RIGHT_TO_LEFT
   +f:DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
   +f:DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
   +f:DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
   +f:DIRECTIONALITY_SEGMENT_SEPARATOR
   +f:DIRECTIONALITY_UNDEFINED
   +f:DIRECTIONALITY_WHITESPACE
   +f:ENCLOSING_MARK
   +f:END_PUNCTUATION
   +f:FINAL_QUOTE_PUNCTUATION
   +f:FORMAT
   +f:INITIAL_QUOTE_PUNCTUATION
   +f:LETTER_NUMBER
   +f:LINE_SEPARATOR
   +f:LOWERCASE_LETTER
   +f:MATH_SYMBOL
   +f:MAX_CODE_POINT
   +f:MAX_HIGH_SURROGATE
   +f:MAX_LOW_SURROGATE
   +f:MAX_RADIX
   +f:MAX_SURROGATE
   +f:MAX_VALUE
   +f:MIN_CODE_POINT
   +f:MIN_HIGH_SURROGATE
   +f:MIN_LOW_SURROGATE
   +f:MIN_RADIX
   +f:MIN_SUPPLEMENTARY_CODE_POINT
   +f:MIN_SURROGATE
   +f:MIN_VALUE
   +f:MODIFIER_LETTER
   +f:MODIFIER_SYMBOL
   +f:NON_SPACING_MARK
   +f:OTHER_LETTER
   +f:OTHER_NUMBER
   +f:OTHER_PUNCTUATION
   +f:OTHER_SYMBOL
   +f:PARAGRAPH_SEPARATOR
   +f:PRIVATE_USE
   +f:SIZE
   +f:SPACE_SEPARATOR
   +f:START_PUNCTUATION
   +f:SURROGATE
   +f:TITLECASE_LETTER
   +f:TYPE
   +f:UNASSIGNED
   +f:UPPERCASE_LETTER
   +m:charCount:int
   +m:codePointAt:CharSequence,int
   +m:codePointAt:char[],int
   +m:codePointAt:char[],int,int
   +m:codePointBefore:CharSequence,int
   +m:codePointBefore:char[],int
   +m:codePointBefore:char[],int,int
   +m:codePointCount:CharSequence,int,int
   +m:codePointCount:char[],int,int
   +m:compare:char,char
   +m:digit:char,int
   +m:digit:int,int
   +m:forDigit:int,int
   +m:getDirectionality:char
   +m:getDirectionality:int
   +m:getName:int
   +m:getNumericValue:char
   +m:getNumericValue:int
   +m:getType:char
   +m:getType:int
   +m:hashCode:char
   +m:highSurrogate:int
   +m:isAlphabetic:int
   +m:isBmpCodePoint:int
   +m:isDefined:char
   +m:isDefined:int
   +m:isDigit:char
   +m:isDigit:int
   +m:isHighSurrogate:char
   +m:isISOControl:char
   +m:isISOControl:int
   +m:isIdentifierIgnorable:char
   +m:isIdentifierIgnorable:int
   +m:isIdeographic:int
   +m:isJavaIdentifierPart:char
   +m:isJavaIdentifierPart:int
   +m:isJavaIdentifierStart:char
   +m:isJavaIdentifierStart:int
   +m:isLetter:char
   +m:isLetter:int
   +m:isLetterOrDigit:char
   +m:isLetterOrDigit:int
   +m:isLowSurrogate:char
   +m:isLowerCase:char
   +m:isLowerCase:int
   +m:isMirrored:char
   +m:isMirrored:int
   +m:isSpaceChar:char
   +m:isSpaceChar:int
   +m:isSupplementaryCodePoint:int
   +m:isSurrogate:char
   +m:isSurrogatePair:char,char
   +m:isTitleCase:char
   +m:isTitleCase:int
   +m:isUnicodeIdentifierPart:char
   +m:isUnicodeIdentifierPart:int
   +m:isUnicodeIdentifierStart:char
   +m:isUnicodeIdentifierStart:int
   +m:isUpperCase:char
   +m:isUpperCase:int
   +m:isValidCodePoint:int
   +m:isWhitespace:char
   +m:isWhitespace:int
   +m:lowSurrogate:int
   +m:offsetByCodePoints:CharSequence,int,int
   +m:offsetByCodePoints:char[],int,int,int,int
   +m:reverseBytes:char
   +m:toChars:int
   +m:toChars:int,char[],int
   +m:toCodePoint:char,char
   +m:toLowerCase:char
   +m:toLowerCase:int
   +m:toString:char
   +m:toTitleCase:char
   +m:toTitleCase:int
   +m:toUpperCase:char
   +m:toUpperCase:int
   +m:valueOf:char
   +m:charValue:
   +m:compareTo:Character
   +m:compareTo:Object
   +m:equals:Object
   +m:hashCode:
   +m:toString:
  }
  >c:Class{
   +m:forName:String
   -m:forName:String,boolean,ClassLoader
   +m:asSubclass:Class
   +m:cast:Object
   -m:desiredAssertionStatus:
   -m:getAnnotatedInterfaces:
   -m:getAnnotatedSuperclass:
   +m:getAnnotation:Class
   +m:getAnnotations:
   +m:getAnnotationsByType:Class
   +m:getCanonicalName:
   -m:getClassLoader:
   +m:getClasses:
   +m:getComponentType:
   -m:getConstructor:Class[]
   -m:getConstructors:
   +m:getDeclaredAnnotation:Class
   +m:getDeclaredAnnotations:
   +m:getDeclaredAnnotationsByType:Class
   +m:getDeclaredClasses:
   -m:getDeclaredConstructor:Class[]
   -m:getDeclaredConstructors:
   -m:getDeclaredField:String
   -m:getDeclaredFields:
   -m:getDeclaredMethod:String,Class[]
   -m:getDeclaredMethods:
   +m:getDeclaringClass:
   +m:getEnclosingClass:
   -m:getEnclosingConstructor:
   -m:getEnclosingMethod:
   +m:getEnumConstants:
   -m:getField:String
   -m:getFields:
   -m:getGenericInterfaces:
   -m:getGenericSuperclass:
   +m:getInterfaces:
   -m:getMethod:String,Class[]
   -m:getMethods:
   +m:getModifiers:
   +m:getName:
   -m:getPackage:
   -m:getProtectionDomain:
   -m:getResource:String
   -m:getResourceAsStream:String
   -m:getSigners:
   +m:getSimpleName:
   +m:getSuperclass:
   +m:getTypeName:
   -m:getTypeParameters:
   +m:isAnnotation:
   +m:isAnnotationPresent:Class
   +m:isAnonymousClass:
   +m:isArray:
   +m:isAssignableFrom:Class
   +m:isEnum:
   +m:isInstance:Object
   +m:isInterface:
   +m:isLocalClass:
   +m:isMemberClass:
   +m:isPrimitive:
   +m:isSynthetic:
   -m:newInstance:
   +m:toGenericString:
   +m:toString:
  }
  -c:ClassCastException
  -c:ClassCircularityError
  -c:ClassFormatError
  -c:ClassLoader
  -c:ClassNotFoundException
  -c:ClassValue
  -c:CloneNotSupportedException
  -c:Compiler
  >c:Double{
   +x:String
   +x:double
   +f:BYTES
   +f:MAX_EXPONENT
   +f:MAX_VALUE
   +f:MIN_EXPONENT
   +f:MIN_NORMAL
   +f:MIN_VALUE
   +f:NEGATIVE_INFINITY
   +f:NaN
   +f:POSITIVE_INFINITY
   +f:SIZE
   +f:TYPE
   +m:compare:double,double
   +m:doubleToLongBits:double
   +m:doubleToRawLongBits:double
   +m:hashCode:double
   +m:isFinite:double
   +m:isInfinite:double
   +m:isNaN:double
   +m:longBitsToDouble:long
   +m:max:double,double
   +m:min:double,double
   +m:parseDouble:String
   +m:sum:double,double
   +m:toHexString:double
   +m:toString:double
   +m:valueOf:String
   +m:valueOf:double
   +m:byteValue:
   +m:compareTo:Double
   +m:compareTo:Object
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:isInfinite:
   +m:isNaN:
   +m:longValue:
   +m:shortValue:
   +m:toString:
  }
  >c:Enum{
   +m:valueOf:Class,String
   +m:compareTo:Enum
   +m:compareTo:Object
   +m:equals:Object
   +m:getDeclaringClass:
   +m:hashCode:
   +m:name:
   +m:ordinal:
   +m:toString:
  }
  -c:EnumConstantNotPresentException
  -c:Error
  >c:Exception{
   +x:
   +x:String
   +x:Throwable
   +x:String,Throwable
  }
  -c:ExceptionInInitializerError
  >c:Float{
   +x:float
   +x:String
   +x:double
   +f:BYTES
   +f:MAX_EXPONENT
   +f:MAX_VALUE
   +f:MIN_EXPONENT
   +f:MIN_NORMAL
   +f:MIN_VALUE
   +f:NEGATIVE_INFINITY
   +f:NaN
   +f:POSITIVE_INFINITY
   +f:SIZE
   +f:TYPE
   +m:compare:float,float
   +m:floatToIntBits:float
   +m:floatToRawIntBits:float
   +m:hashCode:float
   +m:intBitsToFloat:int
   +m:isFinite:float
   +m:isInfinite:float
   +m:isNaN:float
   +m:max:float,float
   +m:min:float,float
   +m:parseFloat:String
   +m:sum:float,float
   +m:toHexString:float
   +m:toString:float
   +m:valueOf:String
   +m:valueOf:float
   +m:byteValue:
   +m:compareTo:Float
   +m:compareTo:Object
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:isInfinite:
   +m:isNaN:
   +m:longValue:
   +m:shortValue:
   +m:toString:
  }
  -c:IllegalAccessError
  -c:IllegalAccessException
  -c:IllegalArgumentException
  -c:IllegalMonitorStateException
  -c:IllegalStateException
  -c:IllegalThreadStateException
  -c:IncompatibleClassChangeError
  -c:IndexOutOfBoundsException
  -c:InheritableThreadLocal
  -c:InstantiationError
  -c:InstantiationException
  >c:Integer{
   +x:int
   +x:String
   +f:BYTES
   +f:MAX_VALUE
   +f:MIN_VALUE
   +f:SIZE
   +f:TYPE
   +m:bitCount:int
   +m:compare:int,int
   +m:compareUnsigned:int,int
   +m:decode:String
   +m:divideUnsigned:int,int
   +m:getInteger:String
   +m:getInteger:String,Integer
   +m:getInteger:String,int
   +m:hashCode:int
   +m:highestOneBit:int
   +m:lowestOneBit:int
   +m:max:int,int
   +m:min:int,int
   +m:numberOfLeadingZeros:int
   +m:numberOfTrailingZeros:int
   +m:parseInt:String
   +m:parseInt:String,int
   +m:parseUnsignedInt:String
   +m:parseUnsignedInt:String,int
   +m:remainderUnsigned:int,int
   +m:reverse:int
   +m:reverseBytes:int
   +m:rotateLeft:int,int
   +m:rotateRight:int,int
   +m:signum:int
   +m:sum:int,int
   +m:toBinaryString:int
   +m:toHexString:int
   +m:toOctalString:int
   +m:toString:int
   +m:toString:int,int
   +m:toUnsignedLong:int
   +m:toUnsignedString:int
   +m:toUnsignedString:int,int
   +m:valueOf:String
   +m:valueOf:String,int
   +m:valueOf:int
   +m:byteValue:
   +m:compareTo:Integer
   +m:compareTo:Object
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:longValue:
   +m:shortValue:
   +m:toString:
  }
  -c:InternalError
  -c:InterruptedException
  -c:LinkageError
  >c:Long{
   +x:long
   +x:String
   +f:BYTES
   +f:MAX_VALUE
   +f:MIN_VALUE
   +f:SIZE
   +f:TYPE
   +m:bitCount:long
   +m:compare:long,long
   +m:compareUnsigned:long,long
   +m:decode:String
   +m:divideUnsigned:long,long
   +m:getLong:String
   +m:getLong:String,Long
   +m:getLong:String,long
   +m:hashCode:long
   +m:highestOneBit:long
   +m:lowestOneBit:long
   +m:max:long,long
   +m:min:long,long
   +m:numberOfLeadingZeros:long
   +m:numberOfTrailingZeros:long
   +m:parseLong:String
   +m:parseLong:String,int
   +m:parseUnsignedLong:String
   +m:parseUnsignedLong:String,int
   +m:remainderUnsigned:long,long
   +m:reverse:long
   +m:reverseBytes:long
   +m:rotateLeft:long,int
   +m:rotateRight:long,int
   +m:signum:long
   +m:sum:long,long
   +m:toBinaryString:long
   +m:toHexString:long
   +m:toOctalString:long
   +m:toString:long
   +m:toString:long,int
   +m:toUnsignedString:long
   +m:toUnsignedString:long,int
   +m:valueOf:String
   +m:valueOf:String,int
   +m:valueOf:long
   +m:byteValue:
   +m:compareTo:Long
   +m:compareTo:Object
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:longValue:
   +m:shortValue:
   +m:toString:
  }
  >c:Math{
   +f:E
   +f:PI
   +m:IEEEremainder:double,double
   +m:abs:double
   +m:abs:float
   +m:abs:int
   +m:abs:long
   +m:acos:double
   +m:addExact:int,int
   +m:addExact:long,long
   +m:asin:double
   +m:atan2:double,double
   +m:atan:double
   +m:cbrt:double
   +m:ceil:double
   +m:copySign:double,double
   +m:copySign:float,float
   +m:cos:double
   +m:cosh:double
   +m:decrementExact:int
   +m:decrementExact:long
   +m:exp:double
   +m:expm1:double
   +m:floor:double
   +m:floorDiv:int,int
   +m:floorDiv:long,long
   +m:floorMod:int,int
   +m:floorMod:long,long
   +m:getExponent:double
   +m:getExponent:float
   +m:hypot:double,double
   +m:incrementExact:int
   +m:incrementExact:long
   +m:log10:double
   +m:log1p:double
   +m:log:double
   +m:max:double,double
   +m:max:float,float
   +m:max:int,int
   +m:max:long,long
   +m:min:double,double
   +m:min:float,float
   +m:min:int,int
   +m:min:long,long
   +m:multiplyExact:int,int
   +m:multiplyExact:long,long
   +m:negateExact:int
   +m:negateExact:long
   +m:nextAfter:double,double
   +m:nextAfter:float,double
   +m:nextDown:double
   +m:nextDown:float
   +m:nextUp:double
   +m:nextUp:float
   +m:pow:double,double
   +m:random:
   +m:rint:double
   +m:round:double
   +m:round:float
   +m:scalb:double,int
   +m:scalb:float,int
   +m:signum:double
   +m:signum:float
   +m:sin:double
   +m:sinh:double
   +m:sqrt:double
   +m:subtractExact:int,int
   +m:subtractExact:long,long
   +m:tan:double
   +m:tanh:double
   +m:toDegrees:double
   +m:toIntExact:long
   +m:toRadians:double
   +m:ulp:double
   +m:ulp:float
  }
  -c:NegativeArraySizeException
  -c:NoClassDefFoundError
  -c:NoSuchFieldError
  -c:NoSuchFieldException
  -c:NoSuchMethodError
  -c:NoSuchMethodException
  -c:NullPointerException
  >c:Number{
   +m:byteValue:
   +m:doubleValue:
   +m:floatValue:
   +m:intValue:
   +m:longValue:
   +m:shortValue:
  }
  -c:NumberFormatException
  >c:Object{
   +x:
   +m:equals:Object
   +m:getClass:
   +m:hashCode:
   -m:notify:
   -m:notifyAll:
   +m:toString:
   -m:wait:
   -m:wait:long
   -m:wait:long,int
  }
  -c:OutOfMemoryError
  -c:Package
  -c:Process
  -c:ProcessBuilder
  -c:ReflectiveOperationException
  >c:Runtime{
   +m:getRuntime:
   -m:addShutdownHook:Thread
   +m:availableProcessors:
   -m:exec:String
   -m:exec:String,String[]
   -m:exec:String,String[],File
   -m:exec:String[]
   -m:exec:String[],String[]
   -m:exec:String[],String[],File
   -m:exit:int
   +m:freeMemory:
   +m:gc:
   -m:halt:int
   -m:load:String
   -m:loadLibrary:String
   +m:maxMemory:
   -m:removeShutdownHook:Thread
   -m:runFinalization:
   +m:totalMemory:
   -m:traceInstructions:boolean
   -m:traceMethodCalls:boolean
  }
  >c:RuntimeException{
   +x:
   +x:String
   +x:Throwable
   +x:String,Throwable
  }
  -c:RuntimePermission
  -c:SecurityException
  -c:SecurityManager
  >c:Short{
   +x:short
   +x:String
   +f:BYTES
   +f:MAX_VALUE
   +f:MIN_VALUE
   +f:SIZE
   +f:TYPE
   +m:compare:short,short
   +m:decode:String
   +m:hashCode:short
   +m:parseShort:String
   +m:parseShort:String,int
   +m:reverseBytes:short
   +m:toString:short
   +m:toUnsignedInt:short
   +m:toUnsignedLong:short
   +m:valueOf:String
   +m:valueOf:String,int
   +m:valueOf:short
   +m:byteValue:
   +m:compareTo:Object
   +m:compareTo:Short
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:longValue:
   +m:shortValue:
   +m:toString:
  }
  -c:StackOverflowError
  >c:StackTraceElement{
   +x:String,String,String,int
   +m:equals:Object
   +m:getClassName:
   +m:getFileName:
   +m:getLineNumber:
   +m:getMethodName:
   +m:hashCode:
   +m:isNativeMethod:
   +m:toString:
  }
  >c:StrictMath{
   +f:E
   +f:PI
   +m:IEEEremainder:double,double
   +m:abs:double
   +m:abs:float
   +m:abs:int
   +m:abs:long
   +m:acos:double
   +m:addExact:int,int
   +m:addExact:long,long
   +m:asin:double
   +m:atan2:double,double
   +m:atan:double
   +m:cbrt:double
   +m:ceil:double
   +m:copySign:double,double
   +m:copySign:float,float
   +m:cos:double
   +m:cosh:double
   +m:exp:double
   +m:expm1:double
   +m:floor:double
   +m:floorDiv:int,int
   +m:floorDiv:long,long
   +m:floorMod:int,int
   +m:floorMod:long,long
   +m:getExponent:double
   +m:getExponent:float
   +m:hypot:double,double
   +m:log10:double
   +m:log1p:double
   +m:log:double
   +m:max:double,double
   +m:max:float,float
   +m:max:int,int
   +m:max:long,long
   +m:min:double,double
   +m:min:float,float
   +m:min:int,int
   +m:min:long,long
   +m:multiplyExact:int,int
   +m:multiplyExact:long,long
   +m:nextAfter:double,double
   +m:nextAfter:float,double
   +m:nextDown:double
   +m:nextDown:float
   +m:nextUp:double
   +m:nextUp:float
   +m:pow:double,double
   +m:random:
   +m:rint:double
   +m:round:double
   +m:round:float
   +m:scalb:double,int
   +m:scalb:float,int
   +m:signum:double
   +m:signum:float
   +m:sin:double
   +m:sinh:double
   +m:sqrt:double
   +m:subtractExact:int,int
   +m:subtractExact:long,long
   +m:tan:double
   +m:tanh:double
   +m:toDegrees:double
   +m:toIntExact:long
   +m:toRadians:double
   +m:ulp:double
   +m:ulp:float
  }
  >c:String{
   +x:
   +x:String
   +x:byte[]
   +x:char[]
   +x:StringBuffer
   +x:StringBuilder
   +x:byte[],String
   -x:byte[],Charset
   +x:int[],int,int
   +x:byte[],int,int
   +x:char[],int,int
   +x:byte[],int,int,String
   -x:byte[],int,int,Charset
   +f:CASE_INSENSITIVE_ORDER
   +m:copyValueOf:char[]
   +m:copyValueOf:char[],int,int
   +m:format:Locale,String,Object[]
   +m:format:String,Object[]
   +m:join:CharSequence,CharSequence[]
   +m:join:CharSequence,Iterable
   +m:valueOf:Object
   +m:valueOf:boolean
   +m:valueOf:char
   +m:valueOf:char[]
   +m:valueOf:char[],int,int
   +m:valueOf:double
   +m:valueOf:float
   +m:valueOf:int
   +m:valueOf:long
   +m:charAt:int
   +m:codePointAt:int
   +m:codePointBefore:int
   +m:codePointCount:int,int
   +m:compareTo:Object
   +m:compareTo:String
   +m:compareToIgnoreCase:String
   +m:concat:String
   +m:contains:CharSequence
   +m:contentEquals:CharSequence
   +m:contentEquals:StringBuffer
   +m:endsWith:String
   +m:equals:Object
   +m:equalsIgnoreCase:String
   +m:getBytes:
   -m:getBytes:Charset
   +m:getBytes:String
   +m:getChars:int,int,char[],int
   +m:hashCode:
   +m:indexOf:String
   +m:indexOf:String,int
   +m:indexOf:int
   +m:indexOf:int,int
   +m:intern:
   +m:isEmpty:
   +m:lastIndexOf:String
   +m:lastIndexOf:String,int
   +m:lastIndexOf:int
   +m:lastIndexOf:int,int
   +m:length:
   +m:matches:String
   +m:offsetByCodePoints:int,int
   +m:regionMatches:boolean,int,String,int,int
   +m:regionMatches:int,String,int,int
   +m:replace:CharSequence,CharSequence
   +m:replace:char,char
   +m:replaceAll:String,String
   +m:replaceFirst:String,String
   +m:split:String
   +m:split:String,int
   +m:startsWith:String
   +m:startsWith:String,int
   +m:subSequence:int,int
   +m:substring:int
   +m:substring:int,int
   +m:toCharArray:
   +m:toLowerCase:
   +m:toLowerCase:Locale
   +m:toString:
   +m:toUpperCase:
   +m:toUpperCase:Locale
   +m:trim:
  }
  >c:StringBuffer{
   +x:
   +x:int
   +x:String
   +x:CharSequence
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:Object
   +m:append:String
   +m:append:StringBuffer
   +m:append:boolean
   +m:append:char
   +m:append:char[]
   +m:append:char[],int,int
   +m:append:double
   +m:append:float
   +m:append:int
   +m:append:long
   +m:appendCodePoint:int
   +m:capacity:
   +m:charAt:int
   +m:codePointAt:int
   +m:codePointBefore:int
   +m:codePointCount:int,int
   +m:delete:int,int
   +m:deleteCharAt:int
   +m:ensureCapacity:int
   +m:getChars:int,int,char[],int
   +m:indexOf:String
   +m:indexOf:String,int
   +m:insert:int,CharSequence
   +m:insert:int,CharSequence,int,int
   +m:insert:int,Object
   +m:insert:int,String
   +m:insert:int,boolean
   +m:insert:int,char
   +m:insert:int,char[]
   +m:insert:int,char[],int,int
   +m:insert:int,double
   +m:insert:int,float
   +m:insert:int,int
   +m:insert:int,long
   +m:lastIndexOf:String
   +m:lastIndexOf:String,int
   +m:length:
   +m:offsetByCodePoints:int,int
   +m:replace:int,int,String
   +m:reverse:
   +m:setCharAt:int,char
   +m:setLength:int
   +m:subSequence:int,int
   +m:substring:int
   +m:substring:int,int
   +m:toString:
   +m:trimToSize:
  }
  >c:StringBuilder{
   +x:
   +x:int
   +x:String
   +x:CharSequence
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:Object
   +m:append:String
   +m:append:StringBuffer
   +m:append:boolean
   +m:append:char
   +m:append:char[]
   +m:append:char[],int,int
   +m:append:double
   +m:append:float
   +m:append:int
   +m:append:long
   +m:appendCodePoint:int
   +m:capacity:
   +m:charAt:int
   +m:codePointAt:int
   +m:codePointBefore:int
   +m:codePointCount:int,int
   +m:delete:int,int
   +m:deleteCharAt:int
   +m:ensureCapacity:int
   +m:getChars:int,int,char[],int
   +m:indexOf:String
   +m:indexOf:String,int
   +m:insert:int,CharSequence
   +m:insert:int,CharSequence,int,int
   +m:insert:int,Object
   +m:insert:int,String
   +m:insert:int,boolean
   +m:insert:int,char
   +m:insert:int,char[]
   +m:insert:int,char[],int,int
   +m:insert:int,double
   +m:insert:int,float
   +m:insert:int,int
   +m:insert:int,long
   +m:lastIndexOf:String
   +m:lastIndexOf:String,int
   +m:length:
   +m:offsetByCodePoints:int,int
   +m:replace:int,int,String
   +m:reverse:
   +m:setCharAt:int,char
   +m:setLength:int
   +m:subSequence:int,int
   +m:substring:int
   +m:substring:int,int
   +m:toString:
   +m:trimToSize:
  }
  -c:StringIndexOutOfBoundsException
  >c:System{
   -f:err
   -f:in
   -f:out
   +m:arraycopy:Object,int,Object,int,int
   -m:clearProperty:String
   -m:console:
   +m:currentTimeMillis:
   -m:exit:int
   +m:gc:
   -m:getProperties:
   -m:getProperty:String
   -m:getProperty:String,String
   -m:getSecurityManager:
   -m:getenv:
   -m:getenv:String
   -m:identityHashCode:Object
   -m:inheritedChannel:
   +m:lineSeparator:
   -m:load:String
   -m:loadLibrary:String
   -m:mapLibraryName:String
   +m:nanoTime:
   -m:runFinalization:
   -m:setErr:PrintStream
   -m:setIn:InputStream
   -m:setOut:PrintStream
   -m:setProperties:Properties
   -m:setProperty:String,String
   -m:setSecurityManager:SecurityManager
  }
  >c:Thread{
   >c:UncaughtExceptionHandler{
    +z
    +m:uncaughtException:Thread,Throwable
   }
   >c:State{
    +f:BLOCKED
    +f:NEW
    +f:RUNNABLE
    +f:TERMINATED
    +f:TIMED_WAITING
    +f:WAITING
    +m:valueOf:String
    +m:values:
   }
   +x:
   +x:String
   +x:Runnable
   +x:Runnable,String
   -x:ThreadGroup,String
   -x:ThreadGroup,Runnable
   -x:ThreadGroup,Runnable,String
   -x:ThreadGroup,Runnable,String,long
   +f:MAX_PRIORITY
   +f:MIN_PRIORITY
   +f:NORM_PRIORITY
   +m:activeCount:
   +m:currentThread:
   +m:dumpStack:
   -m:enumerate:Thread[]
   -m:getAllStackTraces:
   -m:getDefaultUncaughtExceptionHandler:
   +m:holdsLock:Object
   +m:interrupted:
   +m:setDefaultUncaughtExceptionHandler:UncaughtExceptionHandler
   +m:sleep:long
   +m:sleep:long,int
   +m:yield:
   -m:checkAccess:
   -m:getContextClassLoader:
   +m:getId:
   +m:getName:
   +m:getPriority:
   +m:getStackTrace:
   +m:getState:
   -m:getThreadGroup:
   +m:getUncaughtExceptionHandler:
   +m:interrupt:
   +m:isAlive:
   +m:isDaemon:
   +m:isInterrupted:
   +m:join:
   +m:join:long
   +m:join:long,int
   +m:run:
   -m:setContextClassLoader:ClassLoader
   +m:setDaemon:boolean
   +m:setName:String
   +m:setPriority:int
   +m:setUncaughtExceptionHandler:UncaughtExceptionHandler
   +m:start:
   +m:toString:
  }
  -c:ThreadDeath
  -c:ThreadGroup
  -c:ThreadLocal
  >c:Throwable{
   +x:
   +x:String
   +x:Throwable
   +x:String,Throwable
   +m:addSuppressed:Throwable
   +m:fillInStackTrace:
   +m:getCause:
   +m:getLocalizedMessage:
   +m:getMessage:
   +m:getStackTrace:
   +m:getSuppressed:
   +m:initCause:Throwable
   +m:printStackTrace:
   +m:printStackTrace:PrintStream
   +m:printStackTrace:PrintWriter
   +m:setStackTrace:StackTraceElement[]
   +m:toString:
  }
  -c:TypeNotPresentException
  -c:UnknownError
  -c:UnsatisfiedLinkError
  -c:UnsupportedClassVersionError
  -c:UnsupportedOperationException
  -c:VerifyError
  >c:Void{
   +f:TYPE
  }
 }
 >p:math{
  >c:BigDecimal{
   +x:int
   +x:long
   +x:String
   +x:char[]
   +x:double
   +x:BigInteger
   +x:int,MathContext
   +x:long,MathContext
   +x:String,MathContext
   +x:char[],MathContext
   +x:double,MathContext
   +x:BigInteger,int
   +x:BigInteger,MathContext
   +x:char[],int,int
   +x:BigInteger,int,MathContext
   +x:char[],int,int,MathContext
   +f:ONE
   +f:ROUND_CEILING
   +f:ROUND_DOWN
   +f:ROUND_FLOOR
   +f:ROUND_HALF_DOWN
   +f:ROUND_HALF_EVEN
   +f:ROUND_HALF_UP
   +f:ROUND_UNNECESSARY
   +f:ROUND_UP
   +f:TEN
   +f:ZERO
   +m:valueOf:double
   +m:valueOf:long
   +m:valueOf:long,int
   +m:abs:
   +m:abs:MathContext
   +m:add:BigDecimal
   +m:add:BigDecimal,MathContext
   +m:byteValueExact:
   +m:compareTo:BigDecimal
   +m:compareTo:Object
   +m:divide:BigDecimal
   +m:divide:BigDecimal,MathContext
   +m:divide:BigDecimal,RoundingMode
   +m:divide:BigDecimal,int
   +m:divide:BigDecimal,int,RoundingMode
   +m:divide:BigDecimal,int,int
   +m:divideAndRemainder:BigDecimal
   +m:divideAndRemainder:BigDecimal,MathContext
   +m:divideToIntegralValue:BigDecimal
   +m:divideToIntegralValue:BigDecimal,MathContext
   +m:doubleValue:
   +m:equals:Object
   +m:floatValue:
   +m:hashCode:
   +m:intValue:
   +m:intValueExact:
   +m:longValue:
   +m:longValueExact:
   +m:max:BigDecimal
   +m:min:BigDecimal
   +m:movePointLeft:int
   +m:movePointRight:int
   +m:multiply:BigDecimal
   +m:multiply:BigDecimal,MathContext
   +m:negate:
   +m:negate:MathContext
   +m:plus:
   +m:plus:MathContext
   +m:pow:int
   +m:pow:int,MathContext
   +m:precision:
   +m:remainder:BigDecimal
   +m:remainder:BigDecimal,MathContext
   +m:round:MathContext
   +m:scale:
   +m:scaleByPowerOfTen:int
   +m:setScale:int
   +m:setScale:int,RoundingMode
   +m:setScale:int,int
   +m:shortValueExact:
   +m:signum:
   +m:stripTrailingZeros:
   +m:subtract:BigDecimal
   +m:subtract:BigDecimal,MathContext
   +m:toBigInteger:
   +m:toBigIntegerExact:
   +m:toEngineeringString:
   +m:toPlainString:
   +m:toString:
   +m:ulp:
   +m:unscaledValue:
  }
  >c:BigInteger{
   +x:String
   +x:byte[]
   +x:int,Random
   +x:int,byte[]
   +x:String,int
   +x:int,int,Random
   +f:ONE
   +f:TEN
   +f:ZERO
   +m:probablePrime:int,Random
   +m:valueOf:long
   +m:abs:
   +m:add:BigInteger
   +m:and:BigInteger
   +m:andNot:BigInteger
   +m:bitCount:
   +m:bitLength:
   +m:byteValueExact:
   +m:clearBit:int
   +m:compareTo:BigInteger
   +m:compareTo:Object
   +m:divide:BigInteger
   +m:divideAndRemainder:BigInteger
   +m:doubleValue:
   +m:equals:Object
   +m:flipBit:int
   +m:floatValue:
   +m:gcd:BigInteger
   +m:getLowestSetBit:
   +m:hashCode:
   +m:intValue:
   +m:intValueExact:
   +m:isProbablePrime:int
   +m:longValue:
   +m:longValueExact:
   +m:max:BigInteger
   +m:min:BigInteger
   +m:mod:BigInteger
   +m:modInverse:BigInteger
   +m:modPow:BigInteger,BigInteger
   +m:multiply:BigInteger
   +m:negate:
   +m:nextProbablePrime:
   +m:not:
   +m:or:BigInteger
   +m:pow:int
   +m:remainder:BigInteger
   +m:setBit:int
   +m:shiftLeft:int
   +m:shiftRight:int
   +m:shortValueExact:
   +m:signum:
   +m:subtract:BigInteger
   +m:testBit:int
   +m:toByteArray:
   +m:toString:
   +m:toString:int
   +m:xor:BigInteger
  }
  >c:MathContext{
   +x:int
   +x:String
   +x:int,RoundingMode
   +f:DECIMAL128
   +f:DECIMAL32
   +f:DECIMAL64
   +f:UNLIMITED
   +m:equals:Object
   +m:getPrecision:
   +m:getRoundingMode:
   +m:hashCode:
   +m:toString:
  }
  >c:RoundingMode{
   +f:CEILING
   +f:DOWN
   +f:FLOOR
   +f:HALF_DOWN
   +f:HALF_EVEN
   +f:HALF_UP
   +f:UNNECESSARY
   +f:UP
   +m:valueOf:String
   +m:valueOf:int
   +m:values:
  }
 }
 >p:nio{
  -p:channels
  -p:charset
  -p:file
  >c:Buffer{
   +m:array:
   +m:arrayOffset:
   +m:capacity:
   +m:clear:
   +m:flip:
   +m:hasArray:
   +m:hasRemaining:
   +m:isDirect:
   +m:isReadOnly:
   +m:limit:
   +m:limit:int
   +m:mark:
   +m:position:
   +m:position:int
   +m:remaining:
   +m:reset:
   +m:rewind:
  }
  -c:BufferOverflowException
  -c:BufferUnderflowException
  >c:ByteBuffer{
   +m:allocate:int
   +m:allocateDirect:int
   +m:wrap:byte[]
   +m:wrap:byte[],int,int
   +m:array:
   +m:arrayOffset:
   +m:asCharBuffer:
   +m:asDoubleBuffer:
   +m:asFloatBuffer:
   +m:asIntBuffer:
   +m:asLongBuffer:
   +m:asReadOnlyBuffer:
   +m:asShortBuffer:
   +m:compact:
   +m:compareTo:ByteBuffer
   +m:compareTo:Object
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:byte[]
   +m:get:byte[],int,int
   +m:get:int
   +m:getChar:
   +m:getChar:int
   +m:getDouble:
   +m:getDouble:int
   +m:getFloat:
   +m:getFloat:int
   +m:getInt:
   +m:getInt:int
   +m:getLong:
   +m:getLong:int
   +m:getShort:
   +m:getShort:int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:order:
   +m:order:ByteOrder
   +m:put:ByteBuffer
   +m:put:byte
   +m:put:byte[]
   +m:put:byte[],int,int
   +m:put:int,byte
   +m:putChar:char
   +m:putChar:int,char
   +m:putDouble:double
   +m:putDouble:int,double
   +m:putFloat:float
   +m:putFloat:int,float
   +m:putInt:int
   +m:putInt:int,int
   +m:putLong:int,long
   +m:putLong:long
   +m:putShort:int,short
   +m:putShort:short
   +m:slice:
   +m:toString:
  }
  >c:ByteOrder{
   +f:BIG_ENDIAN
   +f:LITTLE_ENDIAN
   +m:nativeOrder:
   +m:toString:
  }
  >c:CharBuffer{
   +m:allocate:int
   +m:wrap:CharSequence
   +m:wrap:CharSequence,int,int
   +m:wrap:char[]
   +m:wrap:char[],int,int
   +m:append:CharSequence
   +m:append:CharSequence,int,int
   +m:append:char
   +m:array:
   +m:arrayOffset:
   +m:asReadOnlyBuffer:
   +m:charAt:int
   -m:chars:
   +m:compact:
   +m:compareTo:CharBuffer
   +m:compareTo:Object
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:char[]
   +m:get:char[],int,int
   +m:get:int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:length:
   +m:order:
   +m:put:CharBuffer
   +m:put:String
   +m:put:String,int,int
   +m:put:char
   +m:put:char[]
   +m:put:char[],int,int
   +m:put:int,char
   +m:read:CharBuffer
   +m:slice:
   +m:subSequence:int,int
   +m:toString:
  }
  >c:DoubleBuffer{
   +m:allocate:int
   +m:wrap:double[]
   +m:wrap:double[],int,int
   +m:array:
   +m:arrayOffset:
   +m:asReadOnlyBuffer:
   +m:compact:
   +m:compareTo:DoubleBuffer
   +m:compareTo:Object
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:double[]
   +m:get:double[],int,int
   +m:get:int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:order:
   +m:put:DoubleBuffer
   +m:put:double
   +m:put:double[]
   +m:put:double[],int,int
   +m:put:int,double
   +m:slice:
   +m:toString:
  }
  >c:FloatBuffer{
   +m:allocate:int
   +m:wrap:float[]
   +m:wrap:float[],int,int
   +m:array:
   +m:arrayOffset:
   +m:asReadOnlyBuffer:
   +m:compact:
   +m:compareTo:FloatBuffer
   +m:compareTo:Object
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:float[]
   +m:get:float[],int,int
   +m:get:int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:order:
   +m:put:FloatBuffer
   +m:put:float
   +m:put:float[]
   +m:put:float[],int,int
   +m:put:int,float
   +m:slice:
   +m:toString:
  }
  >c:IntBuffer{
   +m:allocate:int
   +m:wrap:int[]
   +m:wrap:int[],int,int
   +m:array:
   +m:arrayOffset:
   +m:asReadOnlyBuffer:
   +m:compact:
   +m:compareTo:IntBuffer
   +m:compareTo:Object
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:int
   +m:get:int[]
   +m:get:int[],int,int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:order:
   +m:put:IntBuffer
   +m:put:int
   +m:put:int,int
   +m:put:int[]
   +m:put:int[],int,int
   +m:slice:
   +m:toString:
  }
  -c:InvalidMarkException
  >c:LongBuffer{
   +m:allocate:int
   +m:wrap:long[]
   +m:wrap:long[],int,int
   +m:array:
   +m:arrayOffset:
   +m:asReadOnlyBuffer:
   +m:compact:
   +m:compareTo:LongBuffer
   +m:compareTo:Object
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:int
   +m:get:long[]
   +m:get:long[],int,int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:order:
   +m:put:LongBuffer
   +m:put:int,long
   +m:put:long
   +m:put:long[]
   +m:put:long[],int,int
   +m:slice:
   +m:toString:
  }
  -c:MappedByteBuffer
  -c:ReadOnlyBufferException
  >c:ShortBuffer{
   +m:allocate:int
   +m:wrap:short[]
   +m:wrap:short[],int,int
   +m:array:
   +m:arrayOffset:
   +m:asReadOnlyBuffer:
   +m:compact:
   +m:compareTo:Object
   +m:compareTo:ShortBuffer
   +m:duplicate:
   +m:equals:Object
   +m:get:
   +m:get:int
   +m:get:short[]
   +m:get:short[],int,int
   +m:hasArray:
   +m:hashCode:
   +m:isDirect:
   +m:order:
   +m:put:ShortBuffer
   +m:put:int,short
   +m:put:short
   +m:put:short[]
   +m:put:short[],int,int
   +m:slice:
   +m:toString:
  }
 }
 >p:util{
  >p:concurrent{
   >p:atomic{
    >c:AtomicBoolean{
     +x:
     +x:boolean
     +m:compareAndSet:boolean,boolean
     +m:get:
     +m:getAndSet:boolean
     +m:lazySet:boolean
     +m:set:boolean
     +m:toString:
     +m:weakCompareAndSet:boolean,boolean
    }
    >c:AtomicInteger{
     +x:
     +x:int
     -m:accumulateAndGet:int,IntBinaryOperator
     +m:addAndGet:int
     +m:compareAndSet:int,int
     +m:decrementAndGet:
     +m:doubleValue:
     +m:floatValue:
     +m:get:
     -m:getAndAccumulate:int,IntBinaryOperator
     +m:getAndAdd:int
     +m:getAndDecrement:
     +m:getAndIncrement:
     +m:getAndSet:int
     -m:getAndUpdate:IntUnaryOperator
     +m:incrementAndGet:
     +m:intValue:
     +m:lazySet:int
     +m:longValue:
     +m:set:int
     +m:toString:
     -m:updateAndGet:IntUnaryOperator
     +m:weakCompareAndSet:int,int
    }
    -c:AtomicIntegerArray
    -c:AtomicIntegerFieldUpdater
    -c:AtomicLong
    -c:AtomicLongArray
    -c:AtomicLongFieldUpdater
    -c:AtomicMarkableReference
    -c:AtomicReference
    -c:AtomicReferenceArray
    -c:AtomicReferenceFieldUpdater
    -c:AtomicStampedReference
    -c:DoubleAccumulator
    -c:DoubleAdder
    -c:LongAccumulator
    -c:LongAdder
   }
   -p:locks
   -c:BlockingDeque
   -c:BlockingQueue
   >c:Callable{
    +z
    +m:call:
   }
   -c:CompletionService
   -c:CompletionStage
   -c:ConcurrentMap
   -c:ConcurrentNavigableMap
   -c:Delayed
   -c:Executor
   >c:ExecutorService{
    -z
    +m:awaitTermination:long,TimeUnit
    +m:invokeAll:Collection
    +m:invokeAll:Collection,long,TimeUnit
    +m:invokeAny:Collection
    +m:invokeAny:Collection,long,TimeUnit
    +m:isShutdown:
    +m:isTerminated:
    +m:shutdown:
    +m:shutdownNow:
    +m:submit:Callable
    +m:submit:Runnable
    +m:submit:Runnable,Object
   }
   >c:Future{
    +z
    +m:cancel:boolean
    +m:get:
    +m:get:long,TimeUnit
    +m:isCancelled:
    +m:isDone:
   }
   -c:RejectedExecutionHandler
   -c:RunnableFuture
   -c:RunnableScheduledFuture
   -c:ScheduledExecutorService
   -c:ScheduledFuture
   >c:ThreadFactory{
    +z
    +m:newThread:Runnable
   }
   -c:TransferQueue
   -c:AbstractExecutorService
   -c:ArrayBlockingQueue
   -c:BrokenBarrierException
   -c:CancellationException
   -c:CompletableFuture
   -c:CompletionException
   -c:ConcurrentHashMap
   -c:ConcurrentLinkedDeque
   -c:ConcurrentLinkedQueue
   -c:ConcurrentSkipListMap
   -c:ConcurrentSkipListSet
   -c:CopyOnWriteArrayList
   -c:CopyOnWriteArraySet
   -c:CountDownLatch
   -c:CountedCompleter
   -c:CyclicBarrier
   -c:DelayQueue
   -c:Exchanger
   -c:ExecutionException
   -c:ExecutorCompletionService
   >c:Executors{
    -m:callable:PrivilegedAction
    -m:callable:PrivilegedExceptionAction
    -m:callable:Runnable
    -m:callable:Runnable,Object
    -m:defaultThreadFactory:
    -m:newCachedThreadPool:
    -m:newCachedThreadPool:ThreadFactory
    +m:newFixedThreadPool:int
    +m:newFixedThreadPool:int,ThreadFactory
    -m:newScheduledThreadPool:int
    -m:newScheduledThreadPool:int,ThreadFactory
    -m:newSingleThreadExecutor:
    -m:newSingleThreadExecutor:ThreadFactory
    -m:newSingleThreadScheduledExecutor:
    -m:newSingleThreadScheduledExecutor:ThreadFactory
    -m:newWorkStealingPool:
    -m:newWorkStealingPool:int
    -m:privilegedCallable:Callable
    -m:privilegedCallableUsingCurrentClassLoader:Callable
    -m:privilegedThreadFactory:
    -m:unconfigurableExecutorService:ExecutorService
    -m:unconfigurableScheduledExecutorService:ScheduledExecutorService
   }
   -c:ForkJoinPool
   -c:ForkJoinTask
   -c:ForkJoinWorkerThread
   -c:FutureTask
   -c:LinkedBlockingDeque
   -c:LinkedBlockingQueue
   -c:LinkedTransferQueue
   -c:Phaser
   -c:PriorityBlockingQueue
   -c:RecursiveAction
   -c:RecursiveTask
   -c:RejectedExecutionException
   -c:ScheduledThreadPoolExecutor
   -c:Semaphore
   -c:SynchronousQueue
   -c:ThreadLocalRandom
   -c:ThreadPoolExecutor
   >c:TimeUnit{
    +f:DAYS
    +f:HOURS
    +f:MICROSECONDS
    +f:MILLISECONDS
    +f:MINUTES
    +f:NANOSECONDS
    +f:SECONDS
    +m:valueOf:String
    +m:values:
    +m:convert:long,TimeUnit
    +m:sleep:long
    +m:timedJoin:Thread,long
    +m:timedWait:Object,long
    +m:toDays:long
    +m:toHours:long
    +m:toMicros:long
    +m:toMillis:long
    +m:toMinutes:long
    +m:toNanos:long
    +m:toSeconds:long
   }
   -c:TimeoutException
  }
  -p:function
  -p:jar
  -p:logging
  -p:prefs
  >p:regex{
   >c:MatchResult{
    +z
    +m:end:
    +m:end:int
    +m:group:
    +m:group:int
    +m:groupCount:
    +m:start:
    +m:start:int
   }
   >c:Matcher{
    +m:quoteReplacement:String
    +m:appendReplacement:StringBuffer,String
    +m:appendTail:StringBuffer
    +m:end:
    +m:end:String
    +m:end:int
    +m:find:
    +m:find:int
    +m:group:
    +m:group:String
    +m:group:int
    +m:groupCount:
    +m:hasAnchoringBounds:
    +m:hasTransparentBounds:
    +m:hitEnd:
    +m:lookingAt:
    +m:matches:
    +m:pattern:
    +m:region:int,int
    +m:regionEnd:
    +m:regionStart:
    +m:replaceAll:String
    +m:replaceFirst:String
    +m:requireEnd:
    +m:reset:
    +m:reset:CharSequence
    +m:start:
    +m:start:String
    +m:start:int
    +m:toMatchResult:
    +m:toString:
    +m:useAnchoringBounds:boolean
    +m:usePattern:Pattern
    +m:useTransparentBounds:boolean
   }
   >c:Pattern{
    +f:CANON_EQ
    +f:CASE_INSENSITIVE
    +f:COMMENTS
    +f:DOTALL
    +f:LITERAL
    +f:MULTILINE
    +f:UNICODE_CASE
    +f:UNICODE_CHARACTER_CLASS
    +f:UNIX_LINES
    +m:compile:String
    +m:compile:String,int
    +m:matches:String,CharSequence
    +m:quote:String
    -m:asPredicate:
    +m:flags:
    +m:matcher:CharSequence
    +m:pattern:
    +m:split:CharSequence
    +m:split:CharSequence,int
    -m:splitAsStream:CharSequence
    +m:toString:
   }
   -c:PatternSyntaxException
  }
  -p:spi
  -p:stream
  -p:zip
  >c:Collection{
   +z
   +m:add:Object
   +m:addAll:Collection
   +m:clear:
   +m:contains:Object
   +m:containsAll:Collection
   +m:equals:Object
   +m:hashCode:
   +m:isEmpty:
   +m:iterator:
   -m:parallelStream:
   +m:remove:Object
   +m:removeAll:Collection
   -m:removeIf:Predicate
   +m:retainAll:Collection
   +m:size:
   -m:spliterator:
   -m:stream:
   +m:toArray:
   +m:toArray:Object[]
  }
  >c:Comparator{
   +z
   -m:comparing:Function
   -m:comparing:Function,Comparator
   -m:comparingDouble:ToDoubleFunction
   -m:comparingInt:ToIntFunction
   -m:comparingLong:ToLongFunction
   -m:naturalOrder:
   -m:nullsFirst:Comparator
   -m:nullsLast:Comparator
   -m:reverseOrder:
   +m:compare:Object,Object
   +m:equals:Object
   -m:reversed:
   -m:thenComparing:Comparator
   -m:thenComparing:Function
   -m:thenComparing:Function,Comparator
   -m:thenComparingDouble:ToDoubleFunction
   -m:thenComparingInt:ToIntFunction
   -m:thenComparingLong:ToLongFunction
  }
  >c:Deque{
   +z
   +m:add:Object
   +m:addFirst:Object
   +m:addLast:Object
   +m:contains:Object
   +m:descendingIterator:
   +m:element:
   +m:getFirst:
   +m:getLast:
   +m:iterator:
   +m:offer:Object
   +m:offerFirst:Object
   +m:offerLast:Object
   +m:peek:
   +m:peekFirst:
   +m:peekLast:
   +m:poll:
   +m:pollFirst:
   +m:pollLast:
   +m:pop:
   +m:push:Object
   +m:remove:
   +m:remove:Object
   +m:removeFirst:
   +m:removeFirstOccurrence:Object
   +m:removeLast:
   +m:removeLastOccurrence:Object
   +m:size:
  }
  >c:Enumeration{
   +z
   +m:hasMoreElements:
   +m:nextElement:
  }
  -c:EventListener
  -c:Formattable
  >c:Iterator{
   -z
   -m:forEachRemaining:Consumer
   +m:hasNext:
   +m:next:
   +m:remove:
  }
  >c:List{
   +z
   +m:add:Object
   +m:add:int,Object
   +m:addAll:Collection
   +m:addAll:int,Collection
   +m:clear:
   +m:contains:Object
   +m:containsAll:Collection
   +m:equals:Object
   +m:get:int
   +m:hashCode:
   +m:indexOf:Object
   +m:isEmpty:
   +m:iterator:
   +m:lastIndexOf:Object
   +m:listIterator:
   +m:listIterator:int
   +m:remove:Object
   +m:remove:int
   +m:removeAll:Collection
   -m:replaceAll:UnaryOperator
   +m:retainAll:Collection
   +m:set:int,Object
   +m:size:
   +m:sort:Comparator
   -m:spliterator:
   +m:subList:int,int
   +m:toArray:
   +m:toArray:Object[]
  }
  >c:ListIterator{
   -z
   +m:add:Object
   +m:hasNext:
   +m:hasPrevious:
   +m:next:
   +m:nextIndex:
   +m:previous:
   +m:previousIndex:
   +m:remove:
   +m:set:Object
  }
  >c:Map{
   >c:Entry{
    +z
    +m:comparingByKey:
    +m:comparingByKey:Comparator
    +m:comparingByValue:
    +m:comparingByValue:Comparator
    +m:equals:Object
    +m:getKey:
    +m:getValue:
    +m:hashCode:
    +m:setValue:Object
   }
   +z
   +m:clear:
   -m:compute:Object,BiFunction
   -m:computeIfAbsent:Object,Function
   -m:computeIfPresent:Object,BiFunction
   +m:containsKey:Object
   +m:containsValue:Object
   +m:entrySet:
   +m:equals:Object
   -m:forEach:BiConsumer
   +m:get:Object
   -m:getOrDefault:Object,Object
   +m:hashCode:
   +m:isEmpty:
   +m:keySet:
   -m:merge:Object,Object,BiFunction
   +m:put:Object,Object
   +m:putAll:Map
   -m:putIfAbsent:Object,Object
   +m:remove:Object
   +m:remove:Object,Object
   +m:replace:Object,Object
   +m:replace:Object,Object,Object
   -m:replaceAll:BiFunction
   +m:size:
   +m:values:
  }
  -c:NavigableMap
  -c:NavigableSet
  -c:Observer
  -c:PrimitiveIterator
  >c:Queue{
   +z
   +m:add:Object
   +m:element:
   +m:offer:Object
   +m:peek:
   +m:poll:
   +m:remove:
  }
  -c:RandomAccess
  >c:Set{
   +z
   +m:add:Object
   +m:addAll:Collection
   +m:clear:
   +m:contains:Object
   +m:containsAll:Collection
   +m:equals:Object
   +m:hashCode:
   +m:isEmpty:
   +m:iterator:
   +m:remove:Object
   +m:removeAll:Collection
   +m:retainAll:Collection
   +m:size:
   -m:spliterator:
   +m:toArray:
   +m:toArray:Object[]
  }
  >c:SortedMap{
   +z
   +m:comparator:
   +m:entrySet:
   +m:firstKey:
   +m:headMap:Object
   +m:keySet:
   +m:lastKey:
   +m:subMap:Object,Object
   +m:tailMap:Object
   +m:values:
  }
  >c:SortedSet{
   +z
   +m:comparator:
   +m:first:
   +m:headSet:Object
   +m:last:
   -m:spliterator:
   +m:subSet:Object,Object
   +m:tailSet:Object
  }
  -c:Spliterator
  >c:AbstractCollection{
   +m:add:Object
   +m:addAll:Collection
   +m:clear:
   +m:contains:Object
   +m:containsAll:Collection
   +m:isEmpty:
   +m:iterator:
   +m:remove:Object
   +m:removeAll:Collection
   +m:retainAll:Collection
   +m:size:
   +m:toArray:
   +m:toArray:Object[]
   +m:toString:
  }
  >c:AbstractList{
   +m:add:Object
   +m:add:int,Object
   +m:addAll:int,Collection
   +m:clear:
   +m:equals:Object
   +m:get:int
   +m:hashCode:
   +m:indexOf:Object
   +m:iterator:
   +m:lastIndexOf:Object
   +m:listIterator:
   +m:listIterator:int
   +m:remove:int
   +m:set:int,Object
   +m:subList:int,int
  }
  >c:AbstractMap{
   >c:SimpleEntry{
    +x:Entry
    +x:Object,Object
    +m:equals:Object
    +m:getKey:
    +m:getValue:
    +m:hashCode:
    +m:setValue:Object
    +m:toString:
   }
   >c:SimpleImmutableEntry{
    +x:Entry
    +x:Object,Object
    +m:equals:Object
    +m:getKey:
    +m:getValue:
    +m:hashCode:
    +m:setValue:Object
    +m:toString:
   }
   +m:clear:
   +m:containsKey:Object
   +m:containsValue:Object
   +m:entrySet:
   +m:equals:Object
   +m:get:Object
   +m:hashCode:
   +m:isEmpty:
   +m:keySet:
   +m:put:Object,Object
   +m:putAll:Map
   +m:remove:Object
   +m:size:
   +m:toString:
   +m:values:
  }
  -c:AbstractQueue
  >c:AbstractSequentialList{
   +m:add:int,Object
   +m:addAll:int,Collection
   +m:get:int
   +m:iterator:
   +m:listIterator:int
   +m:remove:int
   +m:set:int,Object
  }
  >c:AbstractSet{
   +m:equals:Object
   +m:hashCode:
   +m:removeAll:Collection
  }
  >c:ArrayDeque{
   +x:
   +x:int
   +x:Collection
   +m:add:Object
   +m:addFirst:Object
   +m:addLast:Object
   +m:clear:
   +m:clone:
   +m:contains:Object
   +m:descendingIterator:
   +m:element:
   +m:getFirst:
   +m:getLast:
   +m:isEmpty:
   +m:iterator:
   +m:offer:Object
   +m:offerFirst:Object
   +m:offerLast:Object
   +m:peek:
   +m:peekFirst:
   +m:peekLast:
   +m:poll:
   +m:pollFirst:
   +m:pollLast:
   +m:pop:
   +m:push:Object
   +m:remove:
   +m:remove:Object
   +m:removeFirst:
   +m:removeFirstOccurrence:Object
   +m:removeLast:
   +m:removeLastOccurrence:Object
   +m:size:
   -m:spliterator:
   +m:toArray:
   +m:toArray:Object[]
  }
  >c:ArrayList{
   +x:
   +x:int
   +x:Collection
   +m:add:Object
   +m:add:int,Object
   +m:addAll:Collection
   +m:addAll:int,Collection
   +m:clear:
   +m:clone:
   +m:contains:Object
   +m:ensureCapacity:int
   -m:forEach:Consumer
   +m:get:int
   +m:indexOf:Object
   +m:isEmpty:
   +m:iterator:
   +m:lastIndexOf:Object
   +m:listIterator:
   +m:listIterator:int
   +m:remove:Object
   +m:remove:int
   +m:removeAll:Collection
   -m:removeIf:Predicate
   -m:replaceAll:UnaryOperator
   +m:retainAll:Collection
   +m:set:int,Object
   +m:size:
   +m:sort:Comparator
   -m:spliterator:
   +m:subList:int,int
   +m:toArray:
   +m:toArray:Object[]
   +m:trimToSize:
  }
  >c:Arrays{
   +m:asList:Object[]
   +m:binarySearch:Object[],Object
   +m:binarySearch:Object[],Object,Comparator
   +m:binarySearch:Object[],int,int,Object
   +m:binarySearch:Object[],int,int,Object,Comparator
   +m:binarySearch:byte[],byte
   +m:binarySearch:byte[],int,int,byte
   +m:binarySearch:char[],char
   +m:binarySearch:char[],int,int,char
   +m:binarySearch:double[],double
   +m:binarySearch:double[],int,int,double
   +m:binarySearch:float[],float
   +m:binarySearch:float[],int,int,float
   +m:binarySearch:int[],int
   +m:binarySearch:int[],int,int,int
   +m:binarySearch:long[],int,int,long
   +m:binarySearch:long[],long
   +m:binarySearch:short[],int,int,short
   +m:binarySearch:short[],short
   +m:copyOf:Object[],int
   -m:copyOf:Object[],int,Class
   +m:copyOf:boolean[],int
   +m:copyOf:byte[],int
   +m:copyOf:char[],int
   +m:copyOf:double[],int
   +m:copyOf:float[],int
   +m:copyOf:int[],int
   +m:copyOf:long[],int
   +m:copyOf:short[],int
   +m:copyOfRange:Object[],int,int
   -m:copyOfRange:Object[],int,int,Class
   +m:copyOfRange:boolean[],int,int
   +m:copyOfRange:byte[],int,int
   +m:copyOfRange:char[],int,int
   +m:copyOfRange:double[],int,int
   +m:copyOfRange:float[],int,int
   +m:copyOfRange:int[],int,int
   +m:copyOfRange:long[],int,int
   +m:copyOfRange:short[],int,int
   +m:deepEquals:Object[],Object[]
   +m:deepHashCode:Object[]
   +m:deepToString:Object[]
   +m:equals:Object[],Object[]
   +m:equals:boolean[],boolean[]
   +m:equals:byte[],byte[]
   +m:equals:char[],char[]
   +m:equals:double[],double[]
   +m:equals:float[],float[]
   +m:equals:int[],int[]
   +m:equals:long[],long[]
   +m:equals:short[],short[]
   +m:fill:Object[],Object
   +m:fill:Object[],int,int,Object
   +m:fill:boolean[],boolean
   +m:fill:boolean[],int,int,boolean
   +m:fill:byte[],byte
   +m:fill:byte[],int,int,byte
   +m:fill:char[],char
   +m:fill:char[],int,int,char
   +m:fill:double[],double
   +m:fill:double[],int,int,double
   +m:fill:float[],float
   +m:fill:float[],int,int,float
   +m:fill:int[],int
   +m:fill:int[],int,int,int
   +m:fill:long[],int,int,long
   +m:fill:long[],long
   +m:fill:short[],int,int,short
   +m:fill:short[],short
   +m:hashCode:Object[]
   +m:hashCode:boolean[]
   +m:hashCode:byte[]
   +m:hashCode:char[]
   +m:hashCode:double[]
   +m:hashCode:float[]
   +m:hashCode:int[]
   +m:hashCode:long[]
   +m:hashCode:short[]
   -m:parallelPrefix:Object[],BinaryOperator
   -m:parallelPrefix:Object[],int,int,BinaryOperator
   -m:parallelPrefix:double[],DoubleBinaryOperator
   -m:parallelPrefix:double[],int,int,DoubleBinaryOperator
   -m:parallelPrefix:int[],IntBinaryOperator
   -m:parallelPrefix:int[],int,int,IntBinaryOperator
   -m:parallelPrefix:long[],LongBinaryOperator
   -m:parallelPrefix:long[],int,int,LongBinaryOperator
   -m:parallelSetAll:Object[],IntFunction
   -m:parallelSetAll:double[],IntToDoubleFunction
   -m:parallelSetAll:int[],IntUnaryOperator
   -m:parallelSetAll:long[],IntToLongFunction
   -m:parallelSort:Comparable[]
   -m:parallelSort:Comparable[],int,int
   -m:parallelSort:Object[],Comparator
   -m:parallelSort:Object[],int,int,Comparator
   -m:parallelSort:byte[]
   -m:parallelSort:byte[],int,int
   -m:parallelSort:char[]
   -m:parallelSort:char[],int,int
   -m:parallelSort:double[]
   -m:parallelSort:double[],int,int
   -m:parallelSort:float[]
   -m:parallelSort:float[],int,int
   -m:parallelSort:int[]
   -m:parallelSort:int[],int,int
   -m:parallelSort:long[]
   -m:parallelSort:long[],int,int
   -m:parallelSort:short[]
   -m:parallelSort:short[],int,int
   -m:setAll:Object[],IntFunction
   -m:setAll:double[],IntToDoubleFunction
   -m:setAll:int[],IntUnaryOperator
   -m:setAll:long[],IntToLongFunction
   +m:sort:Object[]
   +m:sort:Object[],Comparator
   +m:sort:Object[],int,int
   +m:sort:Object[],int,int,Comparator
   +m:sort:byte[]
   +m:sort:byte[],int,int
   +m:sort:char[]
   +m:sort:char[],int,int
   +m:sort:double[]
   +m:sort:double[],int,int
   +m:sort:float[]
   +m:sort:float[],int,int
   +m:sort:int[]
   +m:sort:int[],int,int
   +m:sort:long[]
   +m:sort:long[],int,int
   +m:sort:short[]
   +m:sort:short[],int,int
   -m:spliterator:Object[]
   -m:spliterator:Object[],int,int
   -m:spliterator:double[]
   -m:spliterator:double[],int,int
   -m:spliterator:int[]
   -m:spliterator:int[],int,int
   -m:spliterator:long[]
   -m:spliterator:long[],int,int
   -m:stream:Object[]
   -m:stream:Object[],int,int
   -m:stream:double[]
   -m:stream:double[],int,int
   -m:stream:int[]
   -m:stream:int[],int,int
   -m:stream:long[]
   -m:stream:long[],int,int
   +m:toString:Object[]
   +m:toString:boolean[]
   +m:toString:byte[]
   +m:toString:char[]
   +m:toString:double[]
   +m:toString:float[]
   +m:toString:int[]
   +m:toString:long[]
   +m:toString:short[]
  }
  -c:Base64
  >c:BitSet{
   +x:
   +x:int
   +m:valueOf:ByteBuffer
   +m:valueOf:LongBuffer
   +m:valueOf:byte[]
   +m:valueOf:long[]
   +m:and:BitSet
   +m:andNot:BitSet
   +m:cardinality:
   +m:clear:
   +m:clear:int
   +m:clear:int,int
   +m:clone:
   +m:equals:Object
   +m:flip:int
   +m:flip:int,int
   +m:get:int
   +m:get:int,int
   +m:hashCode:
   +m:intersects:BitSet
   +m:isEmpty:
   +m:length:
   +m:nextClearBit:int
   +m:nextSetBit:int
   +m:or:BitSet
   +m:previousClearBit:int
   +m:previousSetBit:int
   +m:set:int
   +m:set:int,boolean
   +m:set:int,int
   +m:set:int,int,boolean
   +m:size:
   -m:stream:
   +m:toByteArray:
   +m:toLongArray:
   +m:toString:
   +m:xor:BitSet
  }
  -c:Calendar
  >c:Collections{
   -f:EMPTY_LIST
   -f:EMPTY_MAP
   -f:EMPTY_SET
   +m:addAll:Collection,Object[]
   +m:asLifoQueue:Deque
   +m:binarySearch:List,Object
   +m:binarySearch:List,Object,Comparator
   -m:checkedCollection:Collection,Class
   -m:checkedList:List,Class
   -m:checkedMap:Map,Class,Class
   -m:checkedNavigableMap:NavigableMap,Class,Class
   -m:checkedNavigableSet:NavigableSet,Class
   -m:checkedQueue:Queue,Class
   -m:checkedSet:Set,Class
   -m:checkedSortedMap:SortedMap,Class,Class
   -m:checkedSortedSet:SortedSet,Class
   +m:copy:List,List
   +m:disjoint:Collection,Collection
   +m:emptyEnumeration:
   +m:emptyIterator:
   +m:emptyList:
   +m:emptyListIterator:
   +m:emptyMap:
   -m:emptyNavigableMap:
   -m:emptyNavigableSet:
   +m:emptySet:
   +m:emptySortedMap:
   +m:emptySortedSet:
   +m:enumeration:Collection
   +m:fill:List,Object
   +m:frequency:Collection,Object
   +m:indexOfSubList:List,List
   +m:lastIndexOfSubList:List,List
   +m:list:Enumeration
   +m:max:Collection
   +m:max:Collection,Comparator
   +m:min:Collection
   +m:min:Collection,Comparator
   +m:nCopies:int,Object
   +m:newSetFromMap:Map
   +m:replaceAll:List,Object,Object
   +m:reverse:List
   +m:reverseOrder:
   +m:reverseOrder:Comparator
   +m:rotate:List,int
   +m:shuffle:List
   +m:shuffle:List,Random
   +m:singleton:Object
   +m:singletonList:Object
   +m:singletonMap:Object,Object
   +m:sort:List
   +m:sort:List,Comparator
   +m:swap:List,int,int
   -m:synchronizedCollection:Collection
   -m:synchronizedList:List
   -m:synchronizedMap:Map
   -m:synchronizedNavigableMap:NavigableMap
   -m:synchronizedNavigableSet:NavigableSet
   -m:synchronizedSet:Set
   -m:synchronizedSortedMap:SortedMap
   -m:synchronizedSortedSet:SortedSet
   -m:unmodifiableCollection:Collection
   +m:unmodifiableList:List
   +m:unmodifiableMap:Map
   -m:unmodifiableNavigableMap:NavigableMap
   -m:unmodifiableNavigableSet:NavigableSet
   +m:unmodifiableSet:Set
   +m:unmodifiableSortedMap:SortedMap
   +m:unmodifiableSortedSet:SortedSet
  }
  -c:ConcurrentModificationException
  -c:Currency
  >c:Date{
   +x:
   +x:long
   -m:from:Instant
   +m:after:Date
   +m:before:Date
   +m:clone:
   +m:compareTo:Date
   +m:compareTo:Object
   +m:equals:Object
   +m:getTime:
   +m:hashCode:
   +m:setTime:long
   -m:toInstant:
   +m:toString:
  }
  -c:Dictionary
  >c:DoubleSummaryStatistics{
   +x:
   +m:accept:double
   +m:combine:DoubleSummaryStatistics
   +m:getAverage:
   +m:getCount:
   +m:getMax:
   +m:getMin:
   +m:getSum:
   +m:toString:
  }
  -c:DuplicateFormatFlagsException
  -c:EmptyStackException
  >c:EnumMap{
   +x:Map
   +x:Class
   +x:EnumMap
   +m:clear:
   +m:clone:
   +m:containsKey:Object
   +m:containsValue:Object
   +m:entrySet:
   +m:equals:Object
   +m:get:Object
   +m:hashCode:
   +m:keySet:
   +m:put:Enum,Object
   +m:put:Object,Object
   +m:putAll:Map
   +m:remove:Object
   +m:size:
   +m:values:
  }
  >c:EnumSet{
   +m:allOf:Class
   +m:complementOf:EnumSet
   +m:copyOf:Collection
   +m:copyOf:EnumSet
   +m:noneOf:Class
   +m:of:Enum
   +m:of:Enum,Enum
   +m:of:Enum,Enum,Enum
   +m:of:Enum,Enum,Enum,Enum
   +m:of:Enum,Enum,Enum,Enum,Enum
   +m:of:Enum,Enum[]
   +m:range:Enum,Enum
   +m:clone:
  }
  -c:EventListenerProxy
  -c:EventObject
  -c:FormatFlagsConversionMismatchException
  -c:FormattableFlags
  -c:Formatter
  -c:FormatterClosedException
  -c:GregorianCalendar
  >c:HashMap{
   +x:
   +x:Map
   +x:int
   +x:int,float
   +m:clear:
   +m:clone:
   -m:compute:Object,BiFunction
   -m:computeIfAbsent:Object,Function
   -m:computeIfPresent:Object,BiFunction
   +m:containsKey:Object
   +m:containsValue:Object
   +m:entrySet:
   -m:forEach:BiConsumer
   +m:get:Object
   +m:getOrDefault:Object,Object
   +m:isEmpty:
   +m:keySet:
   -m:merge:Object,Object,BiFunction
   +m:put:Object,Object
   +m:putAll:Map
   +m:putIfAbsent:Object,Object
   +m:remove:Object
   +m:remove:Object,Object
   +m:replace:Object,Object
   +m:replace:Object,Object,Object
   -m:replaceAll:BiFunction
   +m:size:
   +m:values:
  }
  >c:HashSet{
   +x:
   +x:int
   +x:Collection
   +x:int,float
   +m:add:Object
   +m:clear:
   +m:clone:
   +m:contains:Object
   +m:isEmpty:
   +m:iterator:
   +m:remove:Object
   +m:size:
   -m:spliterator:
  }
  -c:Hashtable
  >c:IdentityHashMap{
   +x:
   +x:Map
   +x:int
   +m:clear:
   +m:clone:
   +m:containsKey:Object
   +m:containsValue:Object
   +m:entrySet:
   +m:equals:Object
   -m:forEach:BiConsumer
   +m:get:Object
   +m:hashCode:
   +m:isEmpty:
   +m:keySet:
   +m:put:Object,Object
   +m:putAll:Map
   +m:remove:Object
   -m:replaceAll:BiFunction
   +m:size:
   +m:values:
  }
  -c:IllegalFormatCodePointException
  -c:IllegalFormatConversionException
  -c:IllegalFormatFlagsException
  -c:IllegalFormatPrecisionException
  -c:IllegalFormatWidthException
  -c:IllformedLocaleException
  -c:InputMismatchException
  >c:IntSummaryStatistics{
   +x:
   +m:accept:int
   +m:combine:IntSummaryStatistics
   +m:getAverage:
   +m:getCount:
   +m:getMax:
   +m:getMin:
   +m:getSum:
   +m:toString:
  }
  -c:InvalidPropertiesFormatException
  -c:LinkedHashMap
  -c:LinkedHashSet
  >c:LinkedList{
   +x:
   +x:Collection
   +m:add:Object
   +m:add:int,Object
   +m:addAll:Collection
   +m:addAll:int,Collection
   +m:addFirst:Object
   +m:addLast:Object
   +m:clear:
   +m:clone:
   +m:contains:Object
   +m:descendingIterator:
   +m:element:
   +m:get:int
   +m:getFirst:
   +m:getLast:
   +m:indexOf:Object
   +m:lastIndexOf:Object
   +m:listIterator:int
   +m:offer:Object
   +m:offerFirst:Object
   +m:offerLast:Object
   +m:peek:
   +m:peekFirst:
   +m:peekLast:
   +m:poll:
   +m:pollFirst:
   +m:pollLast:
   +m:pop:
   +m:push:Object
   +m:remove:
   +m:remove:Object
   +m:remove:int
   +m:removeFirst:
   +m:removeFirstOccurrence:Object
   +m:removeLast:
   +m:removeLastOccurrence:Object
   +m:set:int,Object
   +m:size:
   -m:spliterator:
   +m:toArray:
   +m:toArray:Object[]
  }
  -c:ListResourceBundle
  >c:Locale{
   -c:Builder
   -c:Category
   -c:FilteringMode
   -c:LanguageRange
   +x:String
   +x:String,String
   +x:String,String,String
   +f:CANADA
   +f:CANADA_FRENCH
   +f:CHINA
   +f:CHINESE
   +f:ENGLISH
   +f:FRANCE
   +f:FRENCH
   +f:GERMAN
   +f:GERMANY
   +f:ITALIAN
   +f:ITALY
   +f:JAPAN
   +f:JAPANESE
   +f:KOREA
   +f:KOREAN
   +f:PRC
   +f:PRIVATE_USE_EXTENSION
   +f:ROOT
   +f:SIMPLIFIED_CHINESE
   +f:TAIWAN
   +f:TRADITIONAL_CHINESE
   +f:UK
   +f:UNICODE_LOCALE_EXTENSION
   +f:US
   -m:filter:List,Collection
   -m:filter:List,Collection,FilteringMode
   -m:filterTags:List,Collection
   -m:filterTags:List,Collection,FilteringMode
   +m:forLanguageTag:String
   +m:getAvailableLocales:
   +m:getDefault:
   -m:getDefault:Category
   -m:getISOCountries:
   -m:getISOLanguages:
   -m:lookup:List,Collection
   -m:lookupTag:List,Collection
   -m:setDefault:Category,Locale
   -m:setDefault:Locale
   +m:clone:
   +m:equals:Object
   +m:getCountry:
   +m:getDisplayCountry:
   +m:getDisplayCountry:Locale
   +m:getDisplayLanguage:
   +m:getDisplayLanguage:Locale
   +m:getDisplayName:
   +m:getDisplayName:Locale
   +m:getDisplayScript:
   +m:getDisplayScript:Locale
   +m:getDisplayVariant:
   +m:getDisplayVariant:Locale
   +m:getExtension:char
   +m:getExtensionKeys:
   +m:getISO3Country:
   +m:getISO3Language:
   +m:getLanguage:
   +m:getScript:
   +m:getUnicodeLocaleAttributes:
   +m:getUnicodeLocaleKeys:
   +m:getUnicodeLocaleType:String
   +m:getVariant:
   +m:hasExtensions:
   +m:hashCode:
   +m:stripExtensions:
   +m:toLanguageTag:
   +m:toString:
  }
  >c:LongSummaryStatistics{
   +x:
   +m:accept:int
   +m:accept:long
   +m:combine:LongSummaryStatistics
   +m:getAverage:
   +m:getCount:
   +m:getMax:
   +m:getMin:
   +m:getSum:
   +m:toString:
  }
  -c:MissingFormatArgumentException
  -c:MissingFormatWidthException
  -c:MissingResourceException
  -c:NoSuchElementException
  >c:Objects{
   +m:compare:Object,Object,Comparator
   +m:deepEquals:Object,Object
   +m:equals:Object,Object
   +m:hash:Object[]
   +m:hashCode:Object
   +m:isNull:Object
   +m:nonNull:Object
   +m:requireNonNull:Object
   +m:requireNonNull:Object,String
   -m:requireNonNull:Object,Supplier
   +m:toString:Object
   +m:toString:Object,String
  }
  -c:Observable
  -c:Optional
  -c:OptionalDouble
  -c:OptionalInt
  -c:OptionalLong
  -c:PriorityQueue
  -c:Properties
  -c:PropertyPermission
  -c:PropertyResourceBundle
  >c:Random{
   +x:
   +x:long
   -m:doubles:
   -m:doubles:double,double
   -m:doubles:long
   -m:doubles:long,double,double
   -m:ints:
   -m:ints:int,int
   -m:ints:long
   -m:ints:long,int,int
   -m:longs:
   -m:longs:long
   -m:longs:long,long
   -m:longs:long,long,long
   +m:nextBoolean:
   +m:nextBytes:byte[]
   +m:nextDouble:
   +m:nextFloat:
   +m:nextGaussian:
   +m:nextInt:
   +m:nextInt:int
   +m:nextLong:
   +m:setSeed:long
  }
  -c:ResourceBundle
  >c:Scanner{
   -x:File
   -x:Path
   +x:String
   -x:Readable
   +x:InputStream
   -x:ReadableByteChannel
   -x:File,String
   -x:Path,String
   +x:InputStream,String
   -x:ReadableByteChannel,String
   +m:close:
   +m:delimiter:
   +m:findInLine:Pattern
   +m:findInLine:String
   +m:findWithinHorizon:Pattern,int
   +m:findWithinHorizon:String,int
   +m:hasNext:
   +m:hasNext:Pattern
   +m:hasNext:String
   +m:hasNextBigDecimal:
   +m:hasNextBigInteger:
   +m:hasNextBigInteger:int
   +m:hasNextBoolean:
   +m:hasNextByte:
   +m:hasNextByte:int
   +m:hasNextDouble:
   +m:hasNextFloat:
   +m:hasNextInt:
   +m:hasNextInt:int
   +m:hasNextLine:
   +m:hasNextLong:
   +m:hasNextLong:int
   +m:hasNextShort:
   +m:hasNextShort:int
   -m:ioException:
   +m:locale:
   +m:match:
   +m:next:
   +m:next:Pattern
   +m:next:String
   +m:nextBigDecimal:
   +m:nextBigInteger:
   +m:nextBigInteger:int
   +m:nextBoolean:
   +m:nextByte:
   +m:nextByte:int
   +m:nextDouble:
   +m:nextFloat:
   +m:nextInt:
   +m:nextInt:int
   +m:nextLine:
   +m:nextLong:
   +m:nextLong:int
   +m:nextShort:
   +m:nextShort:int
   +m:radix:
   +m:remove:
   +m:reset:
   +m:skip:Pattern
   +m:skip:String
   +m:toString:
   +m:useDelimiter:Pattern
   +m:useDelimiter:String
   +m:useLocale:Locale
   +m:useRadix:int
  }
  -c:ServiceConfigurationError
  -c:ServiceLoader
  -c:SimpleTimeZone
  -c:Spliterators
  -c:SplittableRandom
  -c:Stack
  -c:StringJoiner
  -c:StringTokenizer
  -c:TimeZone
  -c:Timer
  -c:TimerTask
  -c:TooManyListenersException
  -c:TreeMap
  -c:TreeSet
  >c:UUID{
   -x:long,long
   -m:fromString:String
   -m:nameUUIDFromBytes:byte[]
   +m:randomUUID:
   +m:clockSequence:
   +m:compareTo:Object
   +m:compareTo:UUID
   +m:equals:Object
   +m:getLeastSignificantBits:
   +m:getMostSignificantBits:
   +m:hashCode:
   +m:node:
   +m:timestamp:
   +m:toString:
   +m:variant:
   +m:version:
  }
  -c:UnknownFormatConversionException
  -c:UnknownFormatFlagsException
  -c:Vector
  >c:WeakHashMap{
   +x:
   +x:Map
   +x:int
   +x:int,float
   +m:clear:
   +m:containsKey:Object
   +m:containsValue:Object
   +m:entrySet:
   -m:forEach:BiConsumer
   +m:get:Object
   +m:isEmpty:
   +m:keySet:
   +m:put:Object,Object
   +m:putAll:Map
   +m:remove:Object
   -m:replaceAll:BiFunction
   +m:size:
   +m:values:
  }
 }
}
>p:com{
 >p:badlogic{
  >p:gdx{
   >p:ai{
    >p:btree{
     >p:annotation{
      >c:TaskAttribute{
       -z
       +m:name:
       +m:required:
      }
      >c:TaskConstraint{
       -z
       +m:maxChildren:
       +m:minChildren:
      }
     }
     >p:branch{
      >c:DynamicGuardSelector{
       +x:
       +x:Array
       +x:Task[]
       +m:childFail:Task
       +m:childRunning:Task,Task
       +m:childSuccess:Task
       +m:reset:
       +m:resetTask:
       +m:run:
      }
      >c:Parallel{
       >c:Orchestrator{
        +f:Join
        +f:Resume
        +m:valueOf:String
        +m:values:
        +m:execute:Parallel
       }
       >c:Policy{
        +f:Selector
        +f:Sequence
        +m:valueOf:String
        +m:values:
        +m:onChildFail:Parallel
        +m:onChildSuccess:Parallel
       }
       +x:
       +x:Array
       +x:Policy
       +x:Task[]
       +x:Policy,Array
       +x:Policy,Task[]
       +x:Orchestrator,Array
       +x:Orchestrator,Task[]
       +x:Policy,Orchestrator,Array
       +f:orchestrator
       +f:policy
       +m:childFail:Task
       +m:childRunning:Task,Task
       +m:childSuccess:Task
       +m:reset:
       +m:resetAllChildren:
       +m:resetTask:
       +m:run:
      }
      >c:RandomSelector{
       +x:
       +x:Array
       +x:Task[]
       +m:start:
      }
      >c:RandomSequence{
       +x:
       +x:Array
       +x:Task[]
       +m:start:
      }
      >c:Selector{
       +x:
       +x:Array
       +x:Task[]
       +m:childFail:Task
       +m:childSuccess:Task
      }
      >c:Sequence{
       +x:
       +x:Array
       +x:Task[]
       +m:childFail:Task
       +m:childSuccess:Task
      }
     }
     >p:decorator{
      >c:AlwaysFail{
       +x:
       +x:Task
       +m:childSuccess:Task
      }
      >c:AlwaysSucceed{
       +x:
       +x:Task
       +m:childFail:Task
      }
      >c:Include{
       +x:
       +x:String
       +x:String,boolean
       +f:lazy
       +f:subtree
       +m:cloneTask:
       +m:reset:
       +m:start:
      }
      >c:Invert{
       +x:
       +x:Task
       +m:childFail:Task
       +m:childSuccess:Task
      }
      >c:Random{
       +x:
       +x:Task
       +x:FloatDistribution
       +x:FloatDistribution,Task
       +f:success
       +m:childFail:Task
       +m:childSuccess:Task
       +m:reset:
       +m:run:
       +m:start:
      }
      >c:Repeat{
       +x:
       +x:Task
       +x:IntegerDistribution,Task
       +f:times
       +m:childFail:Task
       +m:childSuccess:Task
       +m:condition:
       +m:reset:
       +m:start:
      }
      >c:SemaphoreGuard{
       +x:
       +x:Task
       +x:String
       +x:String,Task
       +f:name
       +m:end:
       +m:reset:
       +m:resetTask:
       +m:run:
       +m:start:
      }
      >c:UntilFail{
       +x:
       +x:Task
       +m:childFail:Task
       +m:childSuccess:Task
      }
      >c:UntilSuccess{
       +x:
       +x:Task
       +m:childFail:Task
       +m:childSuccess:Task
      }
     }
     >p:leaf{
      >c:Failure{
       +x:
       +m:execute:
      }
      >c:Success{
       +x:
       +m:execute:
      }
      >c:Wait{
       +x:
       +x:float
       +x:FloatDistribution
       +f:seconds
       +m:execute:
       +m:reset:
       +m:start:
      }
     }
     >p:utils{
      >c:BehaviorTreeLibrary{
       +x:
       +x:int
       -x:FileHandleResolver
       -x:FileHandleResolver,int
       +m:createBehaviorTree:String
       +m:createBehaviorTree:String,Object
       +m:createRootTask:String
       +m:disposeBehaviorTree:String,BehaviorTree
       +m:hasArchetypeTree:String
       +m:registerArchetypeTree:String,BehaviorTree
      }
      >c:BehaviorTreeLibraryManager{
       +m:getInstance:
       +m:createBehaviorTree:String
       +m:createBehaviorTree:String,Object
       +m:createRootTask:String
       +m:disposeBehaviorTree:String,BehaviorTree
       +m:getLibrary:
       +m:setLibrary:BehaviorTreeLibrary
      }
      -c:BehaviorTreeLoader
      >c:BehaviorTreeParser{
       >c:DefaultBehaviorTreeReader{
        +x:
        +x:boolean
        +m:getParser:
        +m:parse:char[],int,int
        +m:setParser:BehaviorTreeParser
       }
       +x:
       +x:int
       +x:DistributionAdapters
       +x:DistributionAdapters,int
       +x:DistributionAdapters,int,DefaultBehaviorTreeReader
       +f:DEBUG_HIGH
       +f:DEBUG_LOW
       +f:DEBUG_NONE
       +f:debugLevel
       +f:distributionAdapters
       -m:parse:FileHandle,Object
       +m:parse:InputStream,Object
       +m:parse:Reader,Object
       +m:parse:String,Object
      }
      >c:BehaviorTreeReader{
       -m:parse:FileHandle
       +m:parse:InputStream
       +m:parse:Reader
       +m:parse:String
       +m:parse:char[],int,int
      }
      >c:DistributionAdapters{
       >c:Adapter{
        +m:parseDouble:String
        +m:parseFloat:String
        +m:parseInteger:String
        +m:parseLong:String
        +m:toDistribution:String[]
        +m:toParameters:Distribution
       }
       >c:DistributionFormatException{
        +x:
        +x:String
        +x:Throwable
        +x:String,Throwable
       }
       +x:
       +m:add:Class,Adapter
       +m:toDistribution:String,Class
       +m:toString:Distribution
      }
      >c:PooledBehaviorTreeLibrary{
       +x:
       +m:clear:
       +m:clear:String
       +m:createBehaviorTree:String,Object
       +m:disposeBehaviorTree:String,BehaviorTree
      }
     }
     >c:TaskCloner{
      +z
      +m:cloneTask:Task
      +m:freeTask:Task
     }
     >c:BehaviorTree{
      >c:Listener{
       +z
       +m:childAdded:Task,int
       +m:statusUpdated:Task,Status
      }
      +x:
      +x:Task
      +x:Task,Object
      +f:listeners
      +m:addListener:Listener
      +m:childFail:Task
      +m:childRunning:Task,Task
      +m:childSuccess:Task
      +m:getChild:int
      +m:getChildCount:
      +m:getObject:
      +m:notifyChildAdded:Task,int
      +m:notifyStatusUpdated:Task,Status
      +m:removeListener:Listener
      +m:removeListeners:
      +m:reset:
      +m:resetTask:
      +m:run:
      +m:setObject:Object
      +m:step:
     }
     >c:BranchTask{
      +m:getChild:int
      +m:getChildCount:
      +m:reset:
     }
     >c:Decorator{
      +m:childFail:Task
      +m:childRunning:Task,Task
      +m:childSuccess:Task
      +m:getChild:int
      +m:getChildCount:
      +m:reset:
      +m:run:
     }
     >c:LeafTask{
      +m:childFail:Task
      +m:childRunning:Task,Task
      +m:childSuccess:Task
      +m:execute:
      +m:getChild:int
      +m:getChildCount:
      +m:run:
     }
     >c:LoopDecorator{
      +m:childRunning:Task,Task
      +m:condition:
      +m:reset:
      +m:run:
     }
     >c:SingleRunningChildBranch{
      +m:childFail:Task
      +m:childRunning:Task,Task
      +m:childSuccess:Task
      +m:reset:
      +m:resetTask:
      +m:run:
      +m:start:
     }
     >c:Task{
      >c:Status{
       +f:CANCELLED
       +f:FAILED
       +f:FRESH
       +f:RUNNING
       +f:SUCCEEDED
       +m:valueOf:String
       +m:values:
      }
      +f:TASK_CLONER
      +m:addChild:Task
      +m:cancel:
      +m:checkGuard:Task
      +m:childFail:Task
      +m:childRunning:Task,Task
      +m:childSuccess:Task
      +m:cloneTask:
      +m:end:
      +m:fail:
      +m:getChild:int
      +m:getChildCount:
      +m:getGuard:
      +m:getObject:
      +m:getStatus:
      +m:reset:
      +m:resetTask:
      +m:run:
      +m:running:
      +m:setControl:Task
      +m:setGuard:Task
      +m:start:
      +m:success:
     }
     -c:TaskCloneException
    }
    >p:fma{
     >p:patterns{
      >c:DefensiveCircleFormationPattern{
       +x:float
       +m:calculateSlotLocation:Location,int
       +m:setNumberOfSlots:int
       +m:supportsSlots:int
      }
      >c:OffensiveCircleFormationPattern{
       +x:float
       +m:calculateSlotLocation:Location,int
      }
     }
     >c:FormationMember{
      +z
      +m:getTargetLocation:
     }
     >c:FormationPattern{
      +z
      +m:calculateSlotLocation:Location,int
      +m:setNumberOfSlots:int
      +m:supportsSlots:int
     }
     >c:SlotAssignmentStrategy{
      +z
      +m:calculateNumberOfSlots:Array
      +m:removeSlotAssignment:Array,int
      +m:updateSlotAssignments:Array
     }
     >c:BoundedSlotAssignmentStrategy{
      +m:calculateNumberOfSlots:Array
      +m:removeSlotAssignment:Array,int
      +m:updateSlotAssignments:Array
     }
     >c:Formation{
      +x:Location,FormationPattern
      +x:Location,FormationPattern,SlotAssignmentStrategy
      +x:Location,FormationPattern,SlotAssignmentStrategy,FormationMotionModerator
      +m:addMember:FormationMember
      +m:changePattern:FormationPattern
      +m:getAnchorPoint:
      +m:getMotionModerator:
      +m:getPattern:
      +m:getSlotAssignmentAt:int
      +m:getSlotAssignmentCount:
      +m:getSlotAssignmentStrategy:
      +m:removeMember:FormationMember
      +m:setAnchorPoint:Location
      +m:setMotionModerator:FormationMotionModerator
      +m:setPattern:FormationPattern
      +m:setSlotAssignmentStrategy:SlotAssignmentStrategy
      +m:updateSlotAssignments:
      +m:updateSlots:
     }
     >c:FormationMotionModerator{
      +m:calculateDriftOffset:Location,Array,FormationPattern
      +m:updateAnchorPoint:Location
     }
     >c:FreeSlotAssignmentStrategy{
      +x:
      +m:calculateNumberOfSlots:Array
      +m:removeSlotAssignment:Array,int
      +m:updateSlotAssignments:Array
     }
     >c:SlotAssignment{
      +x:FormationMember
      +x:FormationMember,int
      +f:member
      +f:slotNumber
     }
     >c:SoftRoleSlotAssignmentStrategy{
      >c:SlotCostProvider{
       +z
       +m:getCost:FormationMember,int
      }
      +x:SlotCostProvider
      +x:SlotCostProvider,float
      +m:updateSlotAssignments:Array
     }
    }
    >p:fsm{
     >c:State{
      +z
      +m:enter:Object
      +m:exit:Object
      +m:onMessage:Object,Telegram
      +m:update:Object
     }
     >c:StateMachine{
      +z
      +m:changeState:State
      +m:getCurrentState:
      +m:getGlobalState:
      +m:getPreviousState:
      +m:handleMessage:Telegram
      +m:isInState:State
      +m:revertToPreviousState:
      +m:setGlobalState:State
      +m:setInitialState:State
      +m:update:
     }
     >c:DefaultStateMachine{
      +x:
      +x:Object
      +x:Object,State
      +x:Object,State,State
      +m:changeState:State
      +m:getCurrentState:
      +m:getGlobalState:
      +m:getOwner:
      +m:getPreviousState:
      +m:handleMessage:Telegram
      +m:isInState:State
      +m:revertToPreviousState:
      +m:setGlobalState:State
      +m:setInitialState:State
      +m:setOwner:Object
      +m:update:
     }
     >c:StackStateMachine{
      +x:
      +x:Object
      +x:Object,State
      +x:Object,State,State
      +m:changeState:State
      +m:getCurrentState:
      +m:getPreviousState:
      +m:revertToPreviousState:
      +m:setInitialState:State
     }
    }
    >p:msg{
     >c:TelegramProvider{
      +z
      +m:provideMessageInfo:int,Telegraph
     }
     >c:Telegraph{
      +z
      +m:handleMessage:Telegram
     }
     >c:MessageDispatcher{
      >c:PendingMessageCallback{
       +z
       +m:report:float,Telegraph,Telegraph,int,Object,int
      }
      +x:
      +m:addListener:Telegraph,int
      +m:addListeners:Telegraph,int[]
      +m:addProvider:TelegramProvider,int
      +m:addProviders:TelegramProvider,int[]
      +m:clear:
      +m:clearListeners:
      +m:clearListeners:int
      +m:clearListeners:int[]
      +m:clearProviders:
      +m:clearProviders:int
      +m:clearProviders:int[]
      +m:clearQueue:
      +m:dispatchMessage:Telegraph,Telegraph,int
      +m:dispatchMessage:Telegraph,Telegraph,int,Object
      +m:dispatchMessage:Telegraph,Telegraph,int,Object,boolean
      +m:dispatchMessage:Telegraph,Telegraph,int,boolean
      +m:dispatchMessage:Telegraph,int
      +m:dispatchMessage:Telegraph,int,Object
      +m:dispatchMessage:Telegraph,int,Object,boolean
      +m:dispatchMessage:Telegraph,int,boolean
      +m:dispatchMessage:float,Telegraph,Telegraph,int
      +m:dispatchMessage:float,Telegraph,Telegraph,int,Object
      +m:dispatchMessage:float,Telegraph,Telegraph,int,Object,boolean
      +m:dispatchMessage:float,Telegraph,Telegraph,int,boolean
      +m:dispatchMessage:float,Telegraph,int
      +m:dispatchMessage:float,Telegraph,int,Object
      +m:dispatchMessage:float,Telegraph,int,Object,boolean
      +m:dispatchMessage:float,Telegraph,int,boolean
      +m:dispatchMessage:float,int
      +m:dispatchMessage:float,int,Object
      +m:dispatchMessage:int
      +m:dispatchMessage:int,Object
      +m:handleMessage:Telegram
      +m:isDebugEnabled:
      +m:removeListener:Telegraph,int
      +m:removeListener:Telegraph,int[]
      +m:scanQueue:PendingMessageCallback
      +m:setDebugEnabled:boolean
      +m:update:
     }
     >c:MessageManager{
      +m:getInstance:
     }
     >c:PriorityQueue{
      +x:
      +x:int
      +m:add:Comparable
      +m:clear:
      +m:get:int
      +m:getUniqueness:
      +m:peek:
      +m:poll:
      +m:setUniqueness:boolean
      +m:size:
     }
     >c:Telegram{
      +x:
      +f:RETURN_RECEIPT_NEEDED
      +f:RETURN_RECEIPT_SENT
      +f:RETURN_RECEIPT_UNNEEDED
      +f:extraInfo
      +f:message
      +f:receiver
      +f:returnReceiptStatus
      +f:sender
      +m:compareTo:Object
      +m:compareTo:Telegram
      +m:equals:Object
      +m:getTimestamp:
      +m:hashCode:
      +m:reset:
      +m:setTimestamp:float
     }
    }
    >p:pfa{
     >p:indexed{
      >c:IndexedGraph{
       +z
       +m:getIndex:Object
       +m:getNodeCount:
      }
      >c:IndexedAStarPathFinder{
       >c:Metrics{
        +x:
        +f:openListAdditions
        +f:openListPeak
        +f:visitedNodes
        +m:reset:
       }
       +x:IndexedGraph
       +x:IndexedGraph,boolean
       +f:metrics
       +m:search:PathFinderRequest,long
       +m:searchConnectionPath:Object,Object,Heuristic,GraphPath
       +m:searchNodePath:Object,Object,Heuristic,GraphPath
      }
      >c:IndexedHierarchicalGraph{
       +m:convertNodeBetweenLevels:int,Object,int
       +m:getLevelCount:
       +m:setLevel:int
      }
     }
     >c:Connection{
      +z
      +m:getCost:
      +m:getFromNode:
      +m:getToNode:
     }
     >c:Graph{
      +z
      +m:getConnections:Object
     }
     >c:GraphPath{
      +z
      +m:add:Object
      +m:clear:
      +m:get:int
      +m:getCount:
      +m:reverse:
     }
     >c:Heuristic{
      +z
      +m:estimate:Object,Object
     }
     >c:HierarchicalGraph{
      +z
      +m:convertNodeBetweenLevels:int,Object,int
      +m:getLevelCount:
      +m:setLevel:int
     }
     >c:PathFinder{
      +z
      +m:search:PathFinderRequest,long
      +m:searchConnectionPath:Object,Object,Heuristic,GraphPath
      +m:searchNodePath:Object,Object,Heuristic,GraphPath
     }
     >c:SmoothableGraphPath{
      +z
      +m:getNodePosition:int
      +m:swapNodes:int,int
      +m:truncatePath:int
     }
     >c:DefaultConnection{
      +x:Object,Object
      +m:getCost:
      +m:getFromNode:
      +m:getToNode:
     }
     >c:DefaultGraphPath{
      +x:
      +x:int
      +x:Array
      +f:nodes
      +m:add:Object
      +m:clear:
      +m:get:int
      +m:getCount:
      +m:iterator:
      +m:reverse:
     }
     >c:HierarchicalPathFinder{
      +x:HierarchicalGraph,PathFinder
      +f:DEBUG
      +m:search:PathFinderRequest,long
      +m:searchConnectionPath:Object,Object,Heuristic,GraphPath
      +m:searchNodePath:Object,Object,Heuristic,GraphPath
     }
     >c:PathFinderQueue{
      +x:PathFinder
      +f:TIME_TOLERANCE
      +m:handleMessage:Telegram
      +m:run:long
      +m:size:
     }
     >c:PathFinderRequest{
      +x:
      +x:Object,Object,Heuristic,GraphPath
      +x:Object,Object,Heuristic,GraphPath,MessageDispatcher
      +f:SEARCH_DONE
      +f:SEARCH_FINALIZED
      +f:SEARCH_INITIALIZED
      +f:SEARCH_NEW
      +f:client
      +f:dispatcher
      +f:endNode
      +f:executionFrames
      +f:heuristic
      +f:pathFound
      +f:responseMessageCode
      +f:resultPath
      +f:startNode
      +f:status
      +f:statusChanged
      +m:changeStatus:int
      +m:finalizeSearch:long
      +m:initializeSearch:long
      +m:search:PathFinder,long
     }
     >c:PathFinderRequestControl{
      +x:
      +f:DEBUG
      +m:execute:PathFinderRequest
     }
     >c:PathSmoother{
      +x:RaycastCollisionDetector
      +m:smoothPath:PathSmootherRequest,long
      +m:smoothPath:SmoothableGraphPath
     }
     >c:PathSmootherRequest{
      +x:
      +f:inputIndex
      +f:isNew
      +f:outputIndex
      +f:path
      +m:refresh:SmoothableGraphPath
     }
    }
    >p:sched{
     >c:Schedulable{
      +z
      +m:run:long
     }
     >c:Scheduler{
      +z
      +m:add:Schedulable,int,int
      +m:addWithAutomaticPhasing:Schedulable,int
     }
     >c:LoadBalancingScheduler{
      +x:int
      +m:add:Schedulable,int,int
      +m:addWithAutomaticPhasing:Schedulable,int
      +m:run:long
     }
     >c:PriorityScheduler{
      +x:int
      +m:add:Schedulable,int,int
      +m:add:Schedulable,int,int,float
      +m:addWithAutomaticPhasing:Schedulable,int
      +m:addWithAutomaticPhasing:Schedulable,int,float
      +m:run:long
     }
    }
    >p:steer{
     >p:behaviors{
      >c:Alignment{
       +x:Steerable,Proximity
       +m:reportNeighbor:Steerable
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
      }
      >c:Arrive{
       +x:Steerable
       +x:Steerable,Location
       +m:getArrivalTolerance:
       +m:getDecelerationRadius:
       +m:getTarget:
       +m:getTimeToTarget:
       +m:setArrivalTolerance:float
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:BlendedSteering{
       >c:BehaviorAndWeight{
        +x:SteeringBehavior,float
        +m:getBehavior:
        +m:getWeight:
        +m:setBehavior:SteeringBehavior
        +m:setWeight:float
       }
       +x:Steerable
       +m:add:BehaviorAndWeight
       +m:add:SteeringBehavior,float
       +m:get:int
       +m:remove:BehaviorAndWeight
       +m:remove:SteeringBehavior
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
      }
      >c:Cohesion{
       +x:Steerable,Proximity
       +m:reportNeighbor:Steerable
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
      }
      >c:CollisionAvoidance{
       +x:Steerable,Proximity
       +m:reportNeighbor:Steerable
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
      }
      >c:Evade{
       +x:Steerable,Steerable
       +x:Steerable,Steerable,float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Steerable
      }
      >c:Face{
       +x:Steerable
       +x:Steerable,Location
       +m:setAlignTolerance:float
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:Flee{
       +x:Steerable
       +x:Steerable,Location
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
      }
      >c:FollowFlowField{
       >c:FlowField{
        +z
        +m:lookup:Vector
       }
       +x:Steerable
       +x:Steerable,FlowField
       +x:Steerable,FlowField,float
       +m:getFlowField:
       +m:getPredictionTime:
       +m:setEnabled:boolean
       +m:setFlowField:FlowField
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setPredictionTime:float
      }
      >c:FollowPath{
       +x:Steerable,Path
       +x:Steerable,Path,float
       +x:Steerable,Path,float,float
       +m:getInternalTargetPosition:
       +m:getPath:
       +m:getPathOffset:
       +m:getPathParam:
       +m:getPredictionTime:
       +m:isArriveEnabled:
       +m:setArrivalTolerance:float
       +m:setArriveEnabled:boolean
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setPath:Path
       +m:setPathOffset:float
       +m:setPredictionTime:float
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:Hide{
       +x:Steerable
       +x:Steerable,Location
       +x:Steerable,Location,Proximity
       +m:getDistanceFromBoundary:
       +m:getProximity:
       +m:reportNeighbor:Steerable
       +m:setArrivalTolerance:float
       +m:setDecelerationRadius:float
       +m:setDistanceFromBoundary:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setProximity:Proximity
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:Interpose{
       +x:Steerable,Steerable,Steerable
       +x:Steerable,Steerable,Steerable,float
       +m:getAgentA:
       +m:getAgentB:
       +m:getInternalTargetPosition:
       +m:getInterpositionRatio:
       +m:setAgentA:Steerable
       +m:setAgentB:Steerable
       +m:setArrivalTolerance:float
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setInterpositionRatio:float
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:Jump{
       >c:GravityComponentHandler{
        +z
        +m:getComponent:Vector
        +m:setComponent:Vector,float
       }
       >c:JumpCallback{
        +z
        +m:reportAchievability:boolean
        +m:takeoff:float,float
       }
       >c:JumpDescriptor{
        +x:Vector,Vector
        +f:delta
        +f:landingPosition
        +f:takeoffPosition
        +m:set:Vector,Vector
       }
       +x:Steerable,JumpDescriptor,Vector,GravityComponentHandler,JumpCallback
       +f:DEBUG_ENABLED
       +m:calculateAirborneTimeAndVelocity:Vector,JumpDescriptor,float
       +m:calculateRealSteering:SteeringAcceleration
       +m:getGravity:
       +m:getJumpDescriptor:
       +m:getMaxVerticalVelocity:
       +m:getTakeoffPositionTolerance:
       +m:getTakeoffVelocityTolerance:
       +m:setEnabled:boolean
       +m:setGravity:Vector
       +m:setJumpDescriptor:JumpDescriptor
       +m:setLimiter:Limiter
       +m:setMaxVerticalVelocity:float
       +m:setOwner:Steerable
       +m:setTakeoffPositionTolerance:float
       +m:setTakeoffTolerance:float
       +m:setTakeoffVelocityTolerance:float
       +m:setTarget:Steerable
       +m:setTimeToTarget:float
      }
      >c:LookWhereYouAreGoing{
       +x:Steerable
       +m:setAlignTolerance:float
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:MatchVelocity{
       +x:Steerable
       +x:Steerable,Steerable
       +x:Steerable,Steerable,float
       +m:getTarget:
       +m:getTimeToTarget:
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Steerable
       +m:setTimeToTarget:float
      }
      >c:PrioritySteering{
       +x:Steerable
       +x:Steerable,float
       +m:add:SteeringBehavior
       +m:getEpsilon:
       +m:getSelectedBehaviorIndex:
       +m:setEnabled:boolean
       +m:setEpsilon:float
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
      }
      >c:Pursue{
       +x:Steerable,Steerable
       +x:Steerable,Steerable,float
       +m:getMaxPredictionTime:
       +m:getTarget:
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setMaxPredictionTime:float
       +m:setOwner:Steerable
       +m:setTarget:Steerable
      }
      >c:RaycastObstacleAvoidance{
       +x:Steerable
       +x:Steerable,RayConfiguration
       +x:Steerable,RayConfiguration,RaycastCollisionDetector
       +x:Steerable,RayConfiguration,RaycastCollisionDetector,float
       +m:getDistanceFromBoundary:
       +m:getRayConfiguration:
       +m:getRaycastCollisionDetector:
       +m:setDistanceFromBoundary:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setRayConfiguration:RayConfiguration
       +m:setRaycastCollisionDetector:RaycastCollisionDetector
      }
      >c:ReachOrientation{
       +x:Steerable
       +x:Steerable,Location
       +m:getAlignTolerance:
       +m:getDecelerationRadius:
       +m:getTarget:
       +m:getTimeToTarget:
       +m:setAlignTolerance:float
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
       +m:setTimeToTarget:float
      }
      >c:Seek{
       +x:Steerable
       +x:Steerable,Location
       +m:getTarget:
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
      }
      >c:Separation{
       +x:Steerable,Proximity
       +m:getDecayCoefficient:
       +m:reportNeighbor:Steerable
       +m:setDecayCoefficient:float
       +m:setEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
      }
      >c:Wander{
       +x:Steerable
       +m:getInternalTargetPosition:
       +m:getWanderCenter:
       +m:getWanderOffset:
       +m:getWanderOrientation:
       +m:getWanderRadius:
       +m:getWanderRate:
       +m:isFaceEnabled:
       +m:setAlignTolerance:float
       +m:setDecelerationRadius:float
       +m:setEnabled:boolean
       +m:setFaceEnabled:boolean
       +m:setLimiter:Limiter
       +m:setOwner:Steerable
       +m:setTarget:Location
       +m:setTimeToTarget:float
       +m:setWanderOffset:float
       +m:setWanderOrientation:float
       +m:setWanderRadius:float
       +m:setWanderRate:float
      }
     }
     >p:limiters{
      >c:AngularAccelerationLimiter{
       +x:float
       +m:getMaxAngularAcceleration:
       +m:setMaxAngularAcceleration:float
      }
      >c:AngularLimiter{
       +x:float,float
       +m:getMaxAngularAcceleration:
       +m:getMaxAngularSpeed:
       +m:setMaxAngularAcceleration:float
       +m:setMaxAngularSpeed:float
      }
      >c:AngularSpeedLimiter{
       +x:float
       +m:getMaxAngularSpeed:
       +m:setMaxAngularSpeed:float
      }
      >c:FullLimiter{
       +x:float,float,float,float
       +m:getMaxAngularAcceleration:
       +m:getMaxAngularSpeed:
       +m:getMaxLinearAcceleration:
       +m:getMaxLinearSpeed:
       +m:getZeroLinearSpeedThreshold:
       +m:setMaxAngularAcceleration:float
       +m:setMaxAngularSpeed:float
       +m:setMaxLinearAcceleration:float
       +m:setMaxLinearSpeed:float
       +m:setZeroLinearSpeedThreshold:float
      }
      >c:LinearAccelerationLimiter{
       +x:float
       +m:getMaxLinearAcceleration:
       +m:setMaxLinearAcceleration:float
      }
      >c:LinearLimiter{
       +x:float,float
       +m:getMaxLinearAcceleration:
       +m:getMaxLinearSpeed:
       +m:setMaxLinearAcceleration:float
       +m:setMaxLinearSpeed:float
      }
      >c:LinearSpeedLimiter{
       +x:float
       +m:getMaxLinearSpeed:
       +m:setMaxLinearSpeed:float
      }
      >c:NullLimiter{
       +x:
       +f:NEUTRAL_LIMITER
       +m:getMaxAngularAcceleration:
       +m:getMaxAngularSpeed:
       +m:getMaxLinearAcceleration:
       +m:getMaxLinearSpeed:
       +m:getZeroLinearSpeedThreshold:
       +m:setMaxAngularAcceleration:float
       +m:setMaxAngularSpeed:float
       +m:setMaxLinearAcceleration:float
       +m:setMaxLinearSpeed:float
       +m:setZeroLinearSpeedThreshold:float
      }
     }
     >p:proximities{
      >c:FieldOfViewProximity{
       +x:Steerable,Iterable,float,float
       +m:findNeighbors:ProximityCallback
       +m:getAngle:
       +m:getRadius:
       +m:setAngle:float
       +m:setRadius:float
      }
      >c:InfiniteProximity{
       +x:Steerable,Iterable
       +m:findNeighbors:ProximityCallback
      }
      >c:ProximityBase{
       +m:getAgents:
       +m:getOwner:
       +m:setAgents:Iterable
       +m:setOwner:Steerable
      }
      >c:RadiusProximity{
       +x:Steerable,Iterable,float
       +m:findNeighbors:ProximityCallback
       +m:getRadius:
       +m:setRadius:float
      }
     }
     >p:utils{
      >p:paths{
       >c:LinePath{
        >c:LinePathParam{
         +x:
         +m:getDistance:
         +m:getSegmentIndex:
         +m:setDistance:float
        }
        >c:Segment{
         +m:getBegin:
         +m:getCumulativeLength:
         +m:getEnd:
         +m:getLength:
        }
        +x:Array
        +x:Array,boolean
        +m:calculateDistance:Vector,LinePathParam
        +m:calculateDistance:Vector,PathParam
        +m:calculatePointSegmentSquareDistance:Vector,Vector,Vector,Vector
        +m:calculateTargetPosition:Vector,LinePathParam,float
        +m:calculateTargetPosition:Vector,PathParam,float
        +m:createParam:
        +m:createPath:Array
        +m:getEndPoint:
        +m:getLength:
        +m:getSegments:
        +m:getStartPoint:
        +m:isOpen:
       }
      }
      >p:rays{
       >c:CentralRayWithWhiskersConfiguration{
        +x:Steerable,float,float,float
        +m:getRayLength:
        +m:getWhiskerAngle:
        +m:getWhiskerLength:
        +m:setRayLength:float
        +m:setWhiskerAngle:float
        +m:setWhiskerLength:float
        +m:updateRays:
       }
       >c:ParallelSideRayConfiguration{
        +x:Steerable,float,float
        +m:getLength:
        +m:getSideOffset:
        +m:setLength:float
        +m:setSideOffset:float
        +m:updateRays:
       }
       >c:RayConfigurationBase{
        +m:getOwner:
        +m:getRays:
        +m:setOwner:Steerable
        +m:setRays:Ray[]
       }
       >c:SingleRayConfiguration{
        +x:Steerable,float
        +m:getLength:
        +m:setLength:float
        +m:updateRays:
       }
      }
      >c:Path{
       >c:PathParam{
        +z
        +m:getDistance:
        +m:setDistance:float
       }
       +z
       +m:calculateDistance:Vector,PathParam
       +m:calculateTargetPosition:Vector,PathParam,float
       +m:createParam:
       +m:getEndPoint:
       +m:getLength:
       +m:getStartPoint:
       +m:isOpen:
      }
      >c:RayConfiguration{
       +z
       +m:updateRays:
      }
     }
     >c:Limiter{
      +z
      +m:getMaxAngularAcceleration:
      +m:getMaxAngularSpeed:
      +m:getMaxLinearAcceleration:
      +m:getMaxLinearSpeed:
      +m:getZeroLinearSpeedThreshold:
      +m:setMaxAngularAcceleration:float
      +m:setMaxAngularSpeed:float
      +m:setMaxLinearAcceleration:float
      +m:setMaxLinearSpeed:float
      +m:setZeroLinearSpeedThreshold:float
     }
     >c:Proximity{
      >c:ProximityCallback{
       +z
       +m:reportNeighbor:Steerable
      }
      +z
      +m:findNeighbors:ProximityCallback
      +m:getOwner:
      +m:setOwner:Steerable
     }
     >c:Steerable{
      +z
      +m:getAngularVelocity:
      +m:getBoundingRadius:
      +m:getLinearVelocity:
      +m:isTagged:
      +m:setTagged:boolean
     }
     >c:GroupBehavior{
      +m:getProximity:
      +m:setProximity:Proximity
     }
     >c:SteerableAdapter{
      +x:
      +m:angleToVector:Vector,float
      +m:getAngularVelocity:
      +m:getBoundingRadius:
      +m:getLinearVelocity:
      +m:getMaxAngularAcceleration:
      +m:getMaxAngularSpeed:
      +m:getMaxLinearAcceleration:
      +m:getMaxLinearSpeed:
      +m:getOrientation:
      +m:getPosition:
      +m:getZeroLinearSpeedThreshold:
      +m:isTagged:
      +m:newLocation:
      +m:setMaxAngularAcceleration:float
      +m:setMaxAngularSpeed:float
      +m:setMaxLinearAcceleration:float
      +m:setMaxLinearSpeed:float
      +m:setOrientation:float
      +m:setTagged:boolean
      +m:setZeroLinearSpeedThreshold:float
      +m:vectorToAngle:Vector
     }
     >c:SteeringAcceleration{
      +x:Vector
      +x:Vector,float
      +f:angular
      +f:linear
      +m:add:SteeringAcceleration
      +m:calculateMagnitude:
      +m:calculateSquareMagnitude:
      +m:isZero:
      +m:mulAdd:SteeringAcceleration,float
      +m:scl:float
      +m:setZero:
     }
     >c:SteeringBehavior{
      +m:calculateSteering:SteeringAcceleration
      +m:getLimiter:
      +m:getOwner:
      +m:isEnabled:
      +m:setEnabled:boolean
      +m:setLimiter:Limiter
      +m:setOwner:Steerable
     }
    }
    >p:utils{
     >p:random{
      >c:Distribution{
       +z
       +m:nextDouble:
       +m:nextFloat:
       +m:nextInt:
       +m:nextLong:
      }
      >c:ConstantDoubleDistribution{
       +x:double
       +f:NEGATIVE_ONE
       +f:ONE
       +f:ZERO
       +m:getValue:
       +m:nextDouble:
      }
      >c:ConstantFloatDistribution{
       +x:float
       +f:NEGATIVE_ONE
       +f:ONE
       +f:ZERO
       +f:ZERO_POINT_FIVE
       +m:getValue:
       +m:nextFloat:
      }
      >c:ConstantIntegerDistribution{
       +x:int
       +f:NEGATIVE_ONE
       +f:ONE
       +f:ZERO
       +m:getValue:
       +m:nextInt:
      }
      >c:ConstantLongDistribution{
       +x:long
       +f:NEGATIVE_ONE
       +f:ONE
       +f:ZERO
       +m:getValue:
       +m:nextLong:
      }
      >c:DoubleDistribution{
       +m:nextFloat:
       +m:nextInt:
       +m:nextLong:
      }
      >c:FloatDistribution{
       +m:nextDouble:
       +m:nextInt:
       +m:nextLong:
      }
      >c:GaussianDoubleDistribution{
       +x:double,double
       +f:STANDARD_NORMAL
       +m:getMean:
       +m:getStandardDeviation:
       +m:nextDouble:
      }
      >c:GaussianFloatDistribution{
       +x:float,float
       +f:STANDARD_NORMAL
       +m:getMean:
       +m:getStandardDeviation:
       +m:nextFloat:
      }
      >c:IntegerDistribution{
       +m:nextDouble:
       +m:nextFloat:
       +m:nextLong:
      }
      >c:LongDistribution{
       +m:nextDouble:
       +m:nextFloat:
       +m:nextInt:
      }
      >c:TriangularDoubleDistribution{
       +x:double
       +x:double,double
       +x:double,double,double
       +m:getHigh:
       +m:getLow:
       +m:getMode:
       +m:nextDouble:
      }
      >c:TriangularFloatDistribution{
       +x:float
       +x:float,float
       +x:float,float,float
       +m:getHigh:
       +m:getLow:
       +m:getMode:
       +m:nextFloat:
      }
      >c:TriangularIntegerDistribution{
       +x:int
       +x:int,int
       +x:int,int,float
       +m:getHigh:
       +m:getLow:
       +m:getMode:
       +m:nextInt:
      }
      >c:TriangularLongDistribution{
       +x:long
       +x:long,long
       +x:long,long,double
       +m:getHigh:
       +m:getLow:
       +m:getMode:
       +m:nextLong:
      }
      >c:UniformDoubleDistribution{
       +x:double
       +x:double,double
       +m:getHigh:
       +m:getLow:
       +m:nextDouble:
      }
      >c:UniformFloatDistribution{
       +x:float
       +x:float,float
       +m:getHigh:
       +m:getLow:
       +m:nextFloat:
      }
      >c:UniformIntegerDistribution{
       +x:int
       +x:int,int
       +m:getHigh:
       +m:getLow:
       +m:nextInt:
      }
      >c:UniformLongDistribution{
       +x:long
       +x:long,long
       +m:getHigh:
       +m:getLow:
       +m:nextLong:
      }
     }
     >c:Location{
      +z
      +m:angleToVector:Vector,float
      +m:getOrientation:
      +m:getPosition:
      +m:newLocation:
      +m:setOrientation:float
      +m:vectorToAngle:Vector
     }
     >c:NonBlockingSemaphore{
      >c:Factory{
       +z
       +m:createSemaphore:String,int
      }
      +z
      +m:acquire:
      +m:acquire:int
      +m:release:
      +m:release:int
     }
     >c:RaycastCollisionDetector{
      +z
      +m:collides:Ray
      +m:findCollision:Collision,Ray
     }
     >c:ArithmeticUtils{
      +m:gcdPositive:int,int
      +m:gcdPositive:int[]
      +m:lcmPositive:int,int
      +m:lcmPositive:int[]
      +m:mulAndCheck:int,int
      +m:wrapAngleAroundZero:float
     }
     >c:CircularBuffer{
      +x:
      +x:int
      +x:int,boolean
      +m:clear:
      +m:ensureCapacity:int
      +m:isEmpty:
      +m:isFull:
      +m:isResizable:
      +m:read:
      +m:setResizable:boolean
      +m:size:
      +m:store:Object
     }
     >c:Collision{
      +x:Vector,Vector
      +f:normal
      +f:point
      +m:set:Collision
      +m:set:Vector,Vector
     }
     >c:NonBlockingSemaphoreRepository{
      +x:
      +m:addSemaphore:String,int
      +m:clear:
      +m:getSemaphore:String
      +m:removeSemaphore:String
      +m:setFactory:Factory
     }
     >c:Ray{
      +x:Vector,Vector
      +f:end
      +f:start
      +m:set:Ray
      +m:set:Vector,Vector
     }
     >c:SimpleNonBlockingSemaphore{
      >c:Factory{
       +x:
       +m:createSemaphore:String,int
      }
      +x:String,int
      +m:acquire:
      +m:acquire:int
      +m:release:
      +m:release:int
     }
    }
    -c:FileSystem
    -c:Logger
    >c:Timepiece{
     +z
     +m:getDeltaTime:
     +m:getTime:
     +m:update:float
    }
    >c:DefaultTimepiece{
     +x:
     +x:float
     +m:getDeltaTime:
     +m:getTime:
     +m:update:float
    }
    >c:GdxAI{
     -m:getFileSystem:
     -m:getLogger:
     +m:getTimepiece:
     -m:setFileSystem:FileSystem
     -m:setLogger:Logger
     +m:setTimepiece:Timepiece
    }
    -c:GdxFileSystem
    -c:GdxLogger
    >c:NullLogger{
     +x:
     +m:debug:String,String
     +m:debug:String,String,Throwable
     +m:error:String,String
     +m:error:String,String,Throwable
     +m:info:String,String
     +m:info:String,String,Throwable
    }
    -c:StandaloneFileSystem
    >c:StdoutLogger{
     +x:
     +m:debug:String,String
     +m:debug:String,String,Throwable
     +m:error:String,String
     +m:error:String,String,Throwable
     +m:info:String,String
     +m:info:String,String,Throwable
    }
   }
   >p:assets{
    -p:loaders
    -c:AssetErrorListener
    -c:AssetDescriptor
    -c:AssetLoaderParameters
    -c:AssetManager
   }
   >p:audio{
    >p:analysis{
     >c:FFT{
      +x:int,float
      +m:forward:float[]
      +m:forward:float[],float[]
      +m:inverse:float[]
      +m:scaleBand:int,float
      +m:setBand:int,float
     }
     >c:FourierTransform{
      +f:HAMMING
      +f:NONE
      +m:avgSize:
      +m:calcAvg:float,float
      +m:forward:float[]
      +m:forward:float[],int
      +m:freqToIndex:float
      +m:getAverageCenterFrequency:int
      +m:getAvg:int
      +m:getBand:int
      +m:getBandWidth:
      +m:getFreq:float
      +m:getImaginaryPart:
      +m:getRealPart:
      +m:getSpectrum:
      +m:getTimeSize:
      +m:indexToFreq:int
      +m:inverse:float[]
      +m:inverse:float[],float[],float[]
      +m:linAverages:int
      +m:logAverages:int,int
      +m:noAverages:
      +m:scaleBand:int,float
      +m:scaleFreq:float,float
      +m:setBand:int,float
      +m:setFreq:float,float
      +m:specSize:
      +m:timeSize:
      +m:window:int
     }
    }
    >c:AudioDevice{
     +z
     +m:dispose:
     +m:getLatency:
     +m:isMono:
     +m:pause:
     +m:resume:
     +m:setVolume:float
     +m:writeSamples:float[],int,int
     +m:writeSamples:short[],int,int
    }
    -c:AudioRecorder
    >c:Music{
     >c:OnCompletionListener{
      +z
      +m:onCompletion:Music
     }
     +z
     +m:dispose:
     +m:getPosition:
     +m:getVolume:
     +m:isLooping:
     +m:isPlaying:
     +m:pause:
     +m:play:
     +m:setLooping:boolean
     +m:setOnCompletionListener:OnCompletionListener
     +m:setPan:float,float
     +m:setPosition:float
     +m:setVolume:float
     +m:stop:
    }
    >c:Sound{
     +z
     +m:dispose:
     +m:loop:
     +m:loop:float
     +m:loop:float,float,float
     +m:pause:
     +m:pause:long
     +m:play:
     +m:play:float
     +m:play:float,float,float
     +m:resume:
     +m:resume:long
     +m:setLooping:long,boolean
     +m:setPan:long,float,float
     +m:setPitch:long,float
     +m:setVolume:long,float
     +m:stop:
     +m:stop:long
    }
   }
   -p:backends
   >p:controllers{
    -p:desktop
    >c:Controller{
     +z
     +f:PLAYER_IDX_UNSET
     +m:addListener:ControllerListener
     +m:canVibrate:
     +m:cancelVibration:
     +m:getAxis:int
     +m:getAxisCount:
     +m:getButton:int
     +m:getMapping:
     +m:getMaxButtonIndex:
     +m:getMinButtonIndex:
     +m:getName:
     +m:getPlayerIndex:
     +m:getPowerLevel:
     +m:getUniqueId:
     +m:isConnected:
     +m:isVibrating:
     +m:removeListener:ControllerListener
     +m:setPlayerIndex:int
     +m:startVibration:int,float
     +m:supportsPlayerIndex:
    }
    >c:ControllerListener{
     +z
     +m:axisMoved:Controller,int,float
     +m:buttonDown:Controller,int
     +m:buttonUp:Controller,int
     +m:connected:Controller
     +m:disconnected:Controller
    }
    >c:ControllerManager{
     +z
     +m:addListener:ControllerListener
     +m:clearListeners:
     +m:getControllers:
     +m:getCurrentController:
     +m:getListeners:
     +m:removeListener:ControllerListener
    }
    >c:AbstractControllerManager{
     >c:ManageCurrentControllerListener{
      +m:axisMoved:Controller,int,float
      +m:buttonDown:Controller,int
      +m:buttonUp:Controller,int
      +m:connected:Controller
      +m:disconnected:Controller
     }
     +m:getControllers:
     +m:getCurrentController:
    }
    >c:ControllerAdapter{
     +x:
     +m:axisMoved:Controller,int,float
     +m:buttonDown:Controller,int
     +m:buttonUp:Controller,int
     +m:connected:Controller
     +m:disconnected:Controller
    }
    >c:ControllerManagerStub{
     +x:
     +m:addListener:ControllerListener
     +m:clearListeners:
     +m:getListeners:
     +m:removeListener:ControllerListener
    }
    >c:ControllerMapping{
     +f:UNDEFINED
     +f:axisLeftX
     +f:axisLeftY
     +f:axisRightX
     +f:axisRightY
     +f:buttonA
     +f:buttonB
     +f:buttonBack
     +f:buttonDpadDown
     +f:buttonDpadLeft
     +f:buttonDpadRight
     +f:buttonDpadUp
     +f:buttonL1
     +f:buttonL2
     +f:buttonLeftStick
     +f:buttonR1
     +f:buttonR2
     +f:buttonRightStick
     +f:buttonStart
     +f:buttonX
     +f:buttonY
    }
    >c:ControllerPowerLevel{
     +f:POWER_EMPTY
     +f:POWER_FULL
     +f:POWER_LOW
     +f:POWER_MEDIUM
     +f:POWER_UNKNOWN
     +f:POWER_WIRED
     +m:valueOf:String
     +m:values:
    }
    >c:Controllers{
     +x:
     +f:preferredManager
     +m:addListener:ControllerListener
     +m:clearListeners:
     +m:getControllers:
     +m:getCurrent:
     +m:getListeners:
     +m:removeListener:ControllerListener
    }
   }
   -p:files
   >p:graphics{
    >p:g2d{
     >c:Batch{
      +z
      +f:C1
      +f:C2
      +f:C3
      +f:C4
      +f:U1
      +f:U2
      +f:U3
      +f:U4
      +f:V1
      +f:V2
      +f:V3
      +f:V4
      +f:X1
      +f:X2
      +f:X3
      +f:X4
      +f:Y1
      +f:Y2
      +f:Y3
      +f:Y4
      +m:begin:
      +m:disableBlending:
      +m:draw:Texture,float,float
      +m:draw:Texture,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,int,int,int,int
      +m:draw:Texture,float[],int,int
      +m:draw:TextureRegion,float,float
      +m:draw:TextureRegion,float,float,Affine2
      +m:draw:TextureRegion,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float,boolean
      +m:enableBlending:
      +m:end:
      +m:flush:
      +m:getBlendDstFunc:
      +m:getBlendDstFuncAlpha:
      +m:getBlendSrcFunc:
      +m:getBlendSrcFuncAlpha:
      +m:getColor:
      +m:getPackedColor:
      +m:getProjectionMatrix:
      +m:getShader:
      +m:getTransformMatrix:
      +m:isBlendingEnabled:
      +m:isDrawing:
      +m:setBlendFunction:int,int
      +m:setBlendFunctionSeparate:int,int,int,int
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setPackedColor:float
      +m:setProjectionMatrix:Matrix4
      +m:setShader:ShaderProgram
      +m:setTransformMatrix:Matrix4
     }
     >c:PolygonBatch{
      +z
      +m:draw:PolygonRegion,float,float
      +m:draw:PolygonRegion,float,float,float,float
      +m:draw:PolygonRegion,float,float,float,float,float,float,float,float,float
      +m:draw:Texture,float[],int,int,short[],int,int
     }
     >c:Animation{
      >c:PlayMode{
       +f:LOOP
       +f:LOOP_PINGPONG
       +f:LOOP_RANDOM
       +f:LOOP_REVERSED
       +f:NORMAL
       +f:REVERSED
       +m:valueOf:String
       +m:values:
      }
      +x:float,Array
      +x:float,Object[]
      +x:float,Array,PlayMode
      +m:getAnimationDuration:
      +m:getFrameDuration:
      +m:getKeyFrame:float
      +m:getKeyFrame:float,boolean
      +m:getKeyFrameIndex:float
      +m:getKeyFrames:
      +m:getPlayMode:
      +m:isAnimationFinished:float
      +m:setFrameDuration:float
      +m:setPlayMode:PlayMode
     }
     >c:BitmapFont{
      >c:BitmapFontData{
       -x:
       -x:FileHandle,boolean
       +f:ascent
       +f:blankLineScale
       +f:breakChars
       +f:capChars
       +f:capHeight
       +f:cursorX
       +f:descent
       +f:down
       +f:flipped
       -f:fontFile
       +f:glyphs
       +f:imagePaths
       +f:lineHeight
       +f:markupEnabled
       +f:missingGlyph
       +f:name
       +f:padBottom
       +f:padLeft
       +f:padRight
       +f:padTop
       +f:scaleX
       +f:scaleY
       +f:spaceXadvance
       +f:xChars
       +f:xHeight
       +m:getFirstGlyph:
       -m:getFontFile:
       +m:getGlyph:char
       +m:getGlyphs:GlyphRun,CharSequence,int,int,Glyph
       +m:getImagePath:int
       +m:getImagePaths:
       +m:getWrapIndex:Array,int
       +m:hasGlyph:char
       +m:isBreakChar:char
       +m:isWhitespace:char
       -m:load:FileHandle,boolean
       +m:scale:float
       +m:setGlyph:int,Glyph
       +m:setGlyphRegion:Glyph,TextureRegion
       +m:setLineHeight:float
       +m:setScale:float
       +m:setScale:float,float
       +m:toString:
      }
      >c:Glyph{
       +x:
       +f:fixedWidth
       +f:height
       +f:id
       +f:kerning
       +f:page
       +f:srcX
       +f:srcY
       +f:u2
       +f:u
       +f:v2
       +f:v
       +f:width
       +f:xadvance
       +f:xoffset
       +f:yoffset
       +m:getKerning:char
       +m:setKerning:int,int
       +m:toString:
      }
      +x:
      +x:boolean
      -x:FileHandle
      -x:FileHandle,boolean
      -x:FileHandle,TextureRegion
      -x:FileHandle,FileHandle,boolean
      -x:FileHandle,TextureRegion,boolean
      +x:BitmapFontData,Array,boolean
      +x:BitmapFontData,TextureRegion,boolean
      -x:FileHandle,FileHandle,boolean,boolean
      +m:dispose:
      +m:draw:Batch,CharSequence,float,float
      +m:draw:Batch,CharSequence,float,float,float,int,boolean
      +m:draw:Batch,CharSequence,float,float,int,int,float,int,boolean
      +m:draw:Batch,CharSequence,float,float,int,int,float,int,boolean,String
      +m:draw:Batch,GlyphLayout,float,float
      +m:getAscent:
      +m:getCache:
      +m:getCapHeight:
      +m:getColor:
      +m:getData:
      +m:getDescent:
      +m:getLineHeight:
      +m:getRegion:
      +m:getRegion:int
      +m:getRegions:
      +m:getScaleX:
      +m:getScaleY:
      +m:getSpaceXadvance:
      +m:getXHeight:
      +m:isFlipped:
      +m:newFontCache:
      +m:ownsTexture:
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setFixedWidthGlyphs:CharSequence
      +m:setOwnsTexture:boolean
      +m:setUseIntegerPositions:boolean
      +m:toString:
      +m:usesIntegerPositions:
     }
     >c:BitmapFontCache{
      +x:BitmapFont
      +x:BitmapFont,boolean
      +m:addText:CharSequence,float,float
      +m:addText:CharSequence,float,float,float,int,boolean
      +m:addText:CharSequence,float,float,int,int,float,int,boolean
      +m:addText:CharSequence,float,float,int,int,float,int,boolean,String
      +m:addText:GlyphLayout,float,float
      +m:clear:
      +m:draw:Batch
      +m:draw:Batch,float
      +m:draw:Batch,int,int
      +m:getColor:
      +m:getFont:
      +m:getLayouts:
      +m:getVertexCount:int
      +m:getVertices:
      +m:getVertices:int
      +m:getX:
      +m:getY:
      +m:setAlphas:float
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setColors:Color
      +m:setColors:Color,int,int
      +m:setColors:float
      +m:setColors:float,float,float,float
      +m:setColors:float,int,int
      +m:setPosition:float,float
      +m:setText:CharSequence,float,float
      +m:setText:CharSequence,float,float,float,int,boolean
      +m:setText:CharSequence,float,float,int,int,float,int,boolean
      +m:setText:CharSequence,float,float,int,int,float,int,boolean,String
      +m:setText:GlyphLayout,float,float
      +m:setUseIntegerPositions:boolean
      +m:tint:Color
      +m:translate:float,float
      +m:usesIntegerPositions:
     }
     >c:CpuSpriteBatch{
      +x:
      +x:int
      +x:int,ShaderProgram
      +m:draw:Texture,float,float
      +m:draw:Texture,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,int,int,int,int
      +m:draw:Texture,float[],int,int
      +m:draw:TextureRegion,float,float
      +m:draw:TextureRegion,float,float,Affine2
      +m:draw:TextureRegion,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float,boolean
      +m:flushAndSyncTransformMatrix:
      +m:getTransformMatrix:
      +m:setTransformMatrix:Affine2
      +m:setTransformMatrix:Matrix4
     }
     >c:DistanceFieldFont{
      -x:FileHandle
      -x:FileHandle,boolean
      -x:FileHandle,TextureRegion
      -x:FileHandle,FileHandle,boolean
      -x:FileHandle,TextureRegion,boolean
      +x:BitmapFontData,Array,boolean
      +x:BitmapFontData,TextureRegion,boolean
      -x:FileHandle,FileHandle,boolean,boolean
      +m:createDistanceFieldShader:
      +m:getDistanceFieldSmoothing:
      +m:newFontCache:
      +m:setDistanceFieldSmoothing:float
     }
     >c:Gdx2DPixmap{
      +x:ByteBuffer,long[]
      +x:InputStream,int
      +x:int,int,int
      +x:byte[],int,int,int
      +x:ByteBuffer,int,int,int
      +f:GDX2D_BLEND_NONE
      +f:GDX2D_BLEND_SRC_OVER
      +f:GDX2D_FORMAT_ALPHA
      +f:GDX2D_FORMAT_LUMINANCE_ALPHA
      +f:GDX2D_FORMAT_RGB565
      +f:GDX2D_FORMAT_RGB888
      +f:GDX2D_FORMAT_RGBA4444
      +f:GDX2D_FORMAT_RGBA8888
      +f:GDX2D_SCALE_LINEAR
      +f:GDX2D_SCALE_NEAREST
      +m:getFailureReason:
      +m:newPixmap:InputStream,int
      +m:newPixmap:int,int,int
      +m:toGlFormat:int
      +m:toGlType:int
      +m:clear:int
      +m:dispose:
      +m:drawCircle:int,int,int,int
      +m:drawLine:int,int,int,int,int
      +m:drawPixmap:Gdx2DPixmap,int,int,int,int,int,int
      +m:drawPixmap:Gdx2DPixmap,int,int,int,int,int,int,int,int
      +m:drawRect:int,int,int,int,int
      +m:fillCircle:int,int,int,int
      +m:fillRect:int,int,int,int,int
      +m:fillTriangle:int,int,int,int,int,int,int
      +m:getFormat:
      +m:getFormatString:
      +m:getGLFormat:
      +m:getGLInternalFormat:
      +m:getGLType:
      +m:getHeight:
      +m:getPixel:int,int
      +m:getPixels:
      +m:getWidth:
      +m:setBlend:int
      +m:setPixel:int,int,int
      +m:setScale:int
     }
     >c:GlyphLayout{
      >c:GlyphRun{
       +x:
       +f:glyphs
       +f:width
       +f:x
       +f:xAdvances
       +f:y
       +m:reset:
       +m:toString:
      }
      +x:
      +x:BitmapFont,CharSequence
      +x:BitmapFont,CharSequence,Color,float,int,boolean
      +x:BitmapFont,CharSequence,int,int,Color,float,int,boolean,String
      +f:colors
      +f:glyphCount
      +f:height
      +f:runs
      +f:width
      +m:reset:
      +m:setText:BitmapFont,CharSequence
      +m:setText:BitmapFont,CharSequence,Color,float,int,boolean
      +m:setText:BitmapFont,CharSequence,int,int,Color,float,int,boolean,String
      +m:toString:
     }
     >c:NinePatch{
      +x:Texture
      +x:NinePatch
      +x:TextureRegion
      +x:TextureRegion[]
      +x:Texture,Color
      +x:NinePatch,Color
      +x:TextureRegion,Color
      +x:Texture,int,int,int,int
      +x:TextureRegion,int,int,int,int
      +f:BOTTOM_CENTER
      +f:BOTTOM_LEFT
      +f:BOTTOM_RIGHT
      +f:MIDDLE_CENTER
      +f:MIDDLE_LEFT
      +f:MIDDLE_RIGHT
      +f:TOP_CENTER
      +f:TOP_LEFT
      +f:TOP_RIGHT
      +m:draw:Batch,float,float,float,float
      +m:draw:Batch,float,float,float,float,float,float,float,float,float
      +m:getBottomHeight:
      +m:getColor:
      +m:getLeftWidth:
      +m:getMiddleHeight:
      +m:getMiddleWidth:
      +m:getPadBottom:
      +m:getPadLeft:
      +m:getPadRight:
      +m:getPadTop:
      +m:getRightWidth:
      +m:getTexture:
      +m:getTopHeight:
      +m:getTotalHeight:
      +m:getTotalWidth:
      +m:scale:float,float
      +m:setBottomHeight:float
      +m:setColor:Color
      +m:setLeftWidth:float
      +m:setMiddleHeight:float
      +m:setMiddleWidth:float
      +m:setPadBottom:float
      +m:setPadLeft:float
      +m:setPadRight:float
      +m:setPadTop:float
      +m:setPadding:float,float,float,float
      +m:setRightWidth:float
      +m:setTopHeight:float
     }
     >c:ParticleEffect{
      +x:
      +x:ParticleEffect
      +m:allowCompletion:
      +m:dispose:
      +m:draw:Batch
      +m:draw:Batch,float
      +m:findEmitter:String
      +m:flipY:
      +m:getBoundingBox:
      +m:getEmitters:
      +m:isComplete:
      -m:load:FileHandle,FileHandle
      -m:load:FileHandle,TextureAtlas
      -m:load:FileHandle,TextureAtlas,String
      -m:loadEmitterImages:FileHandle
      +m:loadEmitterImages:TextureAtlas
      +m:loadEmitterImages:TextureAtlas,String
      -m:loadEmitters:FileHandle
      -m:preAllocateParticles:
      +m:reset:
      +m:reset:boolean
      +m:reset:boolean,boolean
      +m:save:Writer
      +m:scaleEffect:float
      +m:scaleEffect:float,float
      +m:scaleEffect:float,float,float
      +m:setDuration:int
      +m:setEmittersCleanUpBlendFunction:boolean
      +m:setFlip:boolean,boolean
      +m:setPosition:float,float
      +m:start:
      +m:update:float
     }
     >c:ParticleEffectPool{
      >c:PooledEffect{
       +m:free:
      }
      +x:ParticleEffect,int,int
      +m:free:Object
      +m:free:PooledEffect
     }
     >c:ParticleEmitter{
      >c:GradientColorValue{
       +x:
       +m:getColor:float
       +m:getColors:
       +m:getTimeline:
       +m:load:BufferedReader
       +m:load:GradientColorValue
       +m:save:Writer
       +m:setColors:float[]
       +m:setTimeline:float[]
      }
      >c:IndependentScaledNumericValue{
       +x:
       +m:isIndependent:
       +m:load:BufferedReader
       +m:load:IndependentScaledNumericValue
       +m:save:Writer
       +m:set:IndependentScaledNumericValue
       +m:set:RangedNumericValue
       +m:set:ScaledNumericValue
       +m:setIndependent:boolean
      }
      >c:NumericValue{
       +x:
       +m:getValue:
       +m:load:BufferedReader
       +m:load:NumericValue
       +m:save:Writer
       +m:setValue:float
      }
      >c:Particle{
       +x:Sprite
      }
      >c:ParticleValue{
       +x:
       +m:isActive:
       +m:isAlwaysActive:
       +m:load:BufferedReader
       +m:load:ParticleValue
       +m:save:Writer
       +m:setActive:boolean
       +m:setAlwaysActive:boolean
      }
      >c:RangedNumericValue{
       +x:
       +m:getLowMax:
       +m:getLowMin:
       +m:load:BufferedReader
       +m:load:RangedNumericValue
       +m:newLowValue:
       +m:save:Writer
       +m:scale:float
       +m:set:RangedNumericValue
       +m:setLow:float
       +m:setLow:float,float
       +m:setLowMax:float
       +m:setLowMin:float
      }
      >c:ScaledNumericValue{
       +x:
       +m:getHighMax:
       +m:getHighMin:
       +m:getScale:float
       +m:getScaling:
       +m:getTimeline:
       +m:isRelative:
       +m:load:BufferedReader
       +m:load:ScaledNumericValue
       +m:newHighValue:
       +m:save:Writer
       +m:scale:float
       +m:set:RangedNumericValue
       +m:set:ScaledNumericValue
       +m:setHigh:float
       +m:setHigh:float,float
       +m:setHighMax:float
       +m:setHighMin:float
       +m:setRelative:boolean
       +m:setScaling:float[]
       +m:setTimeline:float[]
      }
      >c:SpawnEllipseSide{
       +f:both
       +f:bottom
       +f:top
       +m:valueOf:String
       +m:values:
      }
      >c:SpawnShape{
       +f:ellipse
       +f:line
       +f:point
       +f:square
       +m:valueOf:String
       +m:values:
      }
      >c:SpawnShapeValue{
       +x:
       +m:getShape:
       +m:getSide:
       +m:isEdges:
       +m:load:BufferedReader
       +m:load:SpawnShapeValue
       +m:save:Writer
       +m:setEdges:boolean
       +m:setShape:SpawnShape
       +m:setSide:SpawnEllipseSide
      }
      >c:SpriteMode{
       +f:animated
       +f:random
       +f:single
       +m:valueOf:String
       +m:values:
      }
      +x:
      +x:BufferedReader
      +x:ParticleEmitter
      +f:duration
      +f:durationTimer
      +m:addParticle:
      +m:addParticles:int
      +m:allowCompletion:
      +m:cleansUpBlendFunction:
      +m:draw:Batch
      +m:draw:Batch,float
      +m:flipY:
      +m:getActiveCount:
      +m:getAllowCompletion:
      +m:getAngle:
      +m:getBoundingBox:
      +m:getDelay:
      +m:getDuration:
      +m:getEmission:
      +m:getGravity:
      +m:getImagePaths:
      +m:getLife:
      +m:getLifeOffset:
      +m:getMaxParticleCount:
      +m:getMinParticleCount:
      +m:getName:
      +m:getPercentComplete:
      +m:getRotation:
      +m:getSpawnHeight:
      +m:getSpawnShape:
      +m:getSpawnWidth:
      +m:getSpriteMode:
      +m:getSprites:
      +m:getTint:
      +m:getTransparency:
      +m:getVelocity:
      +m:getWind:
      +m:getX:
      +m:getXOffsetValue:
      +m:getXScale:
      +m:getY:
      +m:getYOffsetValue:
      +m:getYScale:
      +m:isAdditive:
      +m:isAligned:
      +m:isAttached:
      +m:isBehind:
      +m:isComplete:
      +m:isContinuous:
      +m:isPremultipliedAlpha:
      +m:load:BufferedReader
      +m:matchMotion:ParticleEmitter
      +m:matchSize:ParticleEmitter
      +m:matchXSize:ParticleEmitter
      +m:matchYSize:ParticleEmitter
      +m:preAllocateParticles:
      +m:reset:
      +m:reset:boolean
      +m:save:Writer
      +m:scaleMotion:float
      +m:scaleSize:float
      +m:scaleSize:float,float
      +m:setAdditive:boolean
      +m:setAligned:boolean
      +m:setAttached:boolean
      +m:setBehind:boolean
      +m:setCleansUpBlendFunction:boolean
      +m:setContinuous:boolean
      +m:setFlip:boolean,boolean
      +m:setImagePaths:Array
      +m:setMaxParticleCount:int
      +m:setMinParticleCount:int
      +m:setName:String
      +m:setPosition:float,float
      +m:setPremultipliedAlpha:boolean
      +m:setSpriteMode:SpriteMode
      +m:setSprites:Array
      +m:start:
      +m:update:float
     }
     >c:PixmapPacker{
      >c:PackStrategy{
       +z
       +m:pack:PixmapPacker,String,Rectangle
       +m:sort:Array
      }
      >c:GuillotineStrategy{
       +x:
       +m:pack:PixmapPacker,String,Rectangle
       +m:sort:Array
      }
      >c:Page{
       +x:PixmapPacker
       +m:getPixmap:
       +m:getRects:
       +m:getTexture:
       +m:updateTexture:TextureFilter,TextureFilter,boolean
      }
      >c:PixmapPackerRectangle{
       +f:offsetX
       +f:offsetY
       +f:originalHeight
       +f:originalWidth
       +f:pads
       +f:page
       +f:splits
      }
      >c:SkylineStrategy{
       +x:
       +m:pack:PixmapPacker,String,Rectangle
       +m:sort:Array
      }
      +x:int,int,Format,int,boolean
      +x:int,int,Format,int,boolean,PackStrategy
      +x:int,int,Format,int,boolean,boolean,boolean,PackStrategy
      +m:dispose:
      +m:generateTextureAtlas:TextureFilter,TextureFilter,boolean
      +m:getDuplicateBorder:
      +m:getPackToTexture:
      +m:getPadding:
      +m:getPage:String
      +m:getPageFormat:
      +m:getPageHeight:
      +m:getPageIndex:String
      +m:getPageWidth:
      +m:getPages:
      +m:getRect:String
      +m:getTransparentColor:
      +m:pack:Pixmap
      +m:pack:String,Pixmap
      +m:setDuplicateBorder:boolean
      +m:setPackToTexture:boolean
      +m:setPadding:int
      +m:setPageFormat:Format
      +m:setPageHeight:int
      +m:setPageWidth:int
      +m:setTransparentColor:Color
      +m:sort:Array
      +m:updatePageTextures:TextureFilter,TextureFilter,boolean
      +m:updateTextureAtlas:TextureAtlas,TextureFilter,TextureFilter,boolean
      +m:updateTextureAtlas:TextureAtlas,TextureFilter,TextureFilter,boolean,boolean
      +m:updateTextureRegions:Array,TextureFilter,TextureFilter,boolean
     }
     -c:PixmapPackerIO
     >c:PolygonRegion{
      +x:TextureRegion,float[],short[]
      +m:getRegion:
      +m:getTextureCoords:
      +m:getTriangles:
      +m:getVertices:
     }
     -c:PolygonRegionLoader
     >c:PolygonSprite{
      +x:PolygonRegion
      +x:PolygonSprite
      +m:draw:PolygonSpriteBatch
      +m:draw:PolygonSpriteBatch,float
      +m:getBoundingRectangle:
      +m:getColor:
      +m:getHeight:
      +m:getOriginX:
      +m:getOriginY:
      +m:getPackedColor:
      +m:getRegion:
      +m:getRotation:
      +m:getScaleX:
      +m:getScaleY:
      +m:getVertices:
      +m:getWidth:
      +m:getX:
      +m:getY:
      +m:rotate:float
      +m:scale:float
      +m:set:PolygonSprite
      +m:setBounds:float,float,float,float
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setOrigin:float,float
      +m:setPosition:float,float
      +m:setRegion:PolygonRegion
      +m:setRotation:float
      +m:setScale:float
      +m:setScale:float,float
      +m:setSize:float,float
      +m:setX:float
      +m:setY:float
      +m:translate:float,float
      +m:translateX:float
      +m:translateY:float
     }
     >c:PolygonSpriteBatch{
      +x:
      +x:int
      +x:int,ShaderProgram
      +x:int,int,ShaderProgram
      +f:maxTrianglesInBatch
      +f:renderCalls
      +f:totalRenderCalls
      +m:begin:
      +m:disableBlending:
      +m:dispose:
      +m:draw:PolygonRegion,float,float
      +m:draw:PolygonRegion,float,float,float,float
      +m:draw:PolygonRegion,float,float,float,float,float,float,float,float,float
      +m:draw:Texture,float,float
      +m:draw:Texture,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,int,int,int,int
      +m:draw:Texture,float[],int,int
      +m:draw:Texture,float[],int,int,short[],int,int
      +m:draw:TextureRegion,float,float
      +m:draw:TextureRegion,float,float,Affine2
      +m:draw:TextureRegion,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float,boolean
      +m:enableBlending:
      +m:end:
      +m:flush:
      +m:getBlendDstFunc:
      +m:getBlendDstFuncAlpha:
      +m:getBlendSrcFunc:
      +m:getBlendSrcFuncAlpha:
      +m:getColor:
      +m:getPackedColor:
      +m:getProjectionMatrix:
      +m:getShader:
      +m:getTransformMatrix:
      +m:isBlendingEnabled:
      +m:isDrawing:
      +m:setBlendFunction:int,int
      +m:setBlendFunctionSeparate:int,int,int,int
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setPackedColor:float
      +m:setProjectionMatrix:Matrix4
      +m:setShader:ShaderProgram
      +m:setTransformMatrix:Matrix4
     }
     >c:RepeatablePolygonSprite{
      +x:
      +f:x
      +f:y
      +m:draw:PolygonSpriteBatch
      +m:setColor:Color
      +m:setPolygon:TextureRegion,float[]
      +m:setPolygon:TextureRegion,float[],float
      +m:setPosition:float,float
     }
     >c:Sprite{
      +x:
      +x:Sprite
      +x:Texture
      +x:TextureRegion
      +x:Texture,int,int
      +x:Texture,int,int,int,int
      +x:TextureRegion,int,int,int,int
      +m:draw:Batch
      +m:draw:Batch,float
      +m:flip:boolean,boolean
      +m:getBoundingRectangle:
      +m:getColor:
      +m:getHeight:
      +m:getOriginX:
      +m:getOriginY:
      +m:getPackedColor:
      +m:getRotation:
      +m:getScaleX:
      +m:getScaleY:
      +m:getVertices:
      +m:getWidth:
      +m:getX:
      +m:getY:
      +m:rotate90:boolean
      +m:rotate:float
      +m:scale:float
      +m:scroll:float,float
      +m:set:Sprite
      +m:setAlpha:float
      +m:setBounds:float,float,float,float
      +m:setCenter:float,float
      +m:setCenterX:float
      +m:setCenterY:float
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setFlip:boolean,boolean
      +m:setOrigin:float,float
      +m:setOriginBasedPosition:float,float
      +m:setOriginCenter:
      +m:setPackedColor:float
      +m:setPosition:float,float
      +m:setRegion:float,float,float,float
      +m:setRotation:float
      +m:setScale:float
      +m:setScale:float,float
      +m:setSize:float,float
      +m:setU2:float
      +m:setU:float
      +m:setV2:float
      +m:setV:float
      +m:setX:float
      +m:setY:float
      +m:translate:float,float
      +m:translateX:float
      +m:translateY:float
     }
     >c:SpriteBatch{
      +x:
      +x:int
      +x:int,ShaderProgram
      +f:maxSpritesInBatch
      +f:renderCalls
      +f:totalRenderCalls
      +m:createDefaultShader:
      +m:begin:
      +m:disableBlending:
      +m:dispose:
      +m:draw:Texture,float,float
      +m:draw:Texture,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float
      +m:draw:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,float,float,int,int,int,int,boolean,boolean
      +m:draw:Texture,float,float,int,int,int,int
      +m:draw:Texture,float[],int,int
      +m:draw:TextureRegion,float,float
      +m:draw:TextureRegion,float,float,Affine2
      +m:draw:TextureRegion,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float
      +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float,boolean
      +m:enableBlending:
      +m:end:
      +m:flush:
      +m:getBlendDstFunc:
      +m:getBlendDstFuncAlpha:
      +m:getBlendSrcFunc:
      +m:getBlendSrcFuncAlpha:
      +m:getColor:
      +m:getPackedColor:
      +m:getProjectionMatrix:
      +m:getShader:
      +m:getTransformMatrix:
      +m:isBlendingEnabled:
      +m:isDrawing:
      +m:setBlendFunction:int,int
      +m:setBlendFunctionSeparate:int,int,int,int
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setPackedColor:float
      +m:setProjectionMatrix:Matrix4
      +m:setShader:ShaderProgram
      +m:setTransformMatrix:Matrix4
     }
     >c:SpriteCache{
      +x:
      +x:int,boolean
      +x:int,ShaderProgram,boolean
      +f:renderCalls
      +f:totalRenderCalls
      +m:add:Sprite
      +m:add:Texture,float,float
      +m:add:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
      +m:add:Texture,float,float,float,float,int,int,int,int,boolean,boolean
      +m:add:Texture,float,float,int,int,float,float,float,float,float
      +m:add:Texture,float,float,int,int,int,int
      +m:add:Texture,float[],int,int
      +m:add:TextureRegion,float,float
      +m:add:TextureRegion,float,float,float,float
      +m:add:TextureRegion,float,float,float,float,float,float,float,float,float
      +m:begin:
      +m:beginCache:
      +m:beginCache:int
      +m:clear:
      +m:dispose:
      +m:draw:int
      +m:draw:int,int,int
      +m:end:
      +m:endCache:
      +m:getColor:
      +m:getCustomShader:
      +m:getPackedColor:
      +m:getProjectionMatrix:
      +m:getTransformMatrix:
      +m:isDrawing:
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setPackedColor:float
      +m:setProjectionMatrix:Matrix4
      +m:setShader:ShaderProgram
      +m:setTransformMatrix:Matrix4
     }
     >c:TextureAtlas{
      >c:AtlasRegion{
       +x:AtlasRegion
       +x:TextureRegion
       +x:Texture,int,int,int,int
       +f:degrees
       +f:index
       +f:name
       +f:names
       +f:offsetX
       +f:offsetY
       +f:originalHeight
       +f:originalWidth
       +f:packedHeight
       +f:packedWidth
       +f:rotate
       +f:values
       +m:findValue:String
       +m:flip:boolean,boolean
       +m:getRotatedPackedHeight:
       +m:getRotatedPackedWidth:
       +m:toString:
      }
      >c:AtlasSprite{
       +x:AtlasRegion
       +x:AtlasSprite
       +m:flip:boolean,boolean
       +m:getAtlasRegion:
       +m:getHeight:
       +m:getHeightRatio:
       +m:getOriginX:
       +m:getOriginY:
       +m:getWidth:
       +m:getWidthRatio:
       +m:getX:
       +m:getY:
       +m:rotate90:boolean
       +m:setBounds:float,float,float,float
       +m:setOrigin:float,float
       +m:setOriginCenter:
       +m:setPosition:float,float
       +m:setSize:float,float
       +m:setX:float
       +m:setY:float
       +m:toString:
      }
      >c:TextureAtlasData{
       >c:Page{
        +x:
        +f:format
        +f:height
        +f:magFilter
        +f:minFilter
        +f:name
        +f:pma
        +f:texture
        -f:textureFile
        +f:uWrap
        +f:useMipMaps
        +f:vWrap
        +f:width
       }
       >c:Region{
        +x:
        +f:degrees
        +f:flip
        +f:height
        +f:index
        +f:left
        +f:name
        +f:names
        +f:offsetX
        +f:offsetY
        +f:originalHeight
        +f:originalWidth
        +f:page
        +f:rotate
        +f:top
        +f:values
        +f:width
        +m:findValue:String
       }
       -x:
       -x:FileHandle,FileHandle,boolean
       +m:getPages:
       +m:getRegions:
       -m:load:FileHandle,FileHandle,boolean
      }
      +x:
      +x:String
      -x:FileHandle
      +x:TextureAtlasData
      -x:FileHandle,boolean
      -x:FileHandle,FileHandle
      -x:FileHandle,FileHandle,boolean
      +m:addRegion:String,Texture,int,int,int,int
      +m:addRegion:String,TextureRegion
      +m:createPatch:String
      +m:createSprite:String
      +m:createSprite:String,int
      +m:createSprites:
      +m:createSprites:String
      +m:dispose:
      +m:findRegion:String
      +m:findRegion:String,int
      +m:findRegions:String
      +m:getRegions:
      +m:getTextures:
      +m:load:TextureAtlasData
     }
     >c:TextureRegion{
      +x:
      +x:Texture
      +x:TextureRegion
      +x:Texture,int,int
      +x:Texture,int,int,int,int
      +x:Texture,float,float,float,float
      +x:TextureRegion,int,int,int,int
      +m:split:Texture,int,int
      +m:flip:boolean,boolean
      +m:getRegionHeight:
      +m:getRegionWidth:
      +m:getRegionX:
      +m:getRegionY:
      +m:getTexture:
      +m:getU2:
      +m:getU:
      +m:getV2:
      +m:getV:
      +m:isFlipX:
      +m:isFlipY:
      +m:scroll:float,float
      +m:setRegion:Texture
      +m:setRegion:TextureRegion
      +m:setRegion:TextureRegion,int,int,int,int
      +m:setRegion:float,float,float,float
      +m:setRegion:int,int,int,int
      +m:setRegionHeight:int
      +m:setRegionWidth:int
      +m:setRegionX:int
      +m:setRegionY:int
      +m:setTexture:Texture
      +m:setU2:float
      +m:setU:float
      +m:setV2:float
      +m:setV:float
      +m:split:int,int
     }
    }
    >p:g3d{
     >p:attributes{
      >c:BlendingAttribute{
       +x:
       +x:float
       +x:BlendingAttribute
       +x:int,int
       +x:boolean,float
       +x:int,int,float
       +x:boolean,int,int,float
       +f:Alias
       +f:Type
       +f:blended
       +f:destFunction
       +f:opacity
       +f:sourceFunction
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:ColorAttribute{
       +x:long
       +x:ColorAttribute
       +x:long,Color
       +x:long,float,float,float,float
       +f:Ambient
       +f:AmbientAlias
       +f:AmbientLight
       +f:AmbientLightAlias
       +f:Diffuse
       +f:DiffuseAlias
       +f:Emissive
       +f:EmissiveAlias
       +f:Fog
       +f:FogAlias
       +f:Reflection
       +f:ReflectionAlias
       +f:Specular
       +f:SpecularAlias
       +f:color
       +m:createAmbient:Color
       +m:createAmbient:float,float,float,float
       +m:createAmbientLight:Color
       +m:createAmbientLight:float,float,float,float
       +m:createDiffuse:Color
       +m:createDiffuse:float,float,float,float
       +m:createEmissive:Color
       +m:createEmissive:float,float,float,float
       +m:createFog:Color
       +m:createFog:float,float,float,float
       +m:createReflection:Color
       +m:createReflection:float,float,float,float
       +m:createSpecular:Color
       +m:createSpecular:float,float,float,float
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:CubemapAttribute{
       +x:long
       +x:CubemapAttribute
       +x:long,Cubemap
       +x:long,TextureDescriptor
       +f:EnvironmentMap
       +f:EnvironmentMapAlias
       +f:textureDescription
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:DepthTestAttribute{
       +x:
       +x:int
       +x:boolean
       +x:DepthTestAttribute
       +x:int,boolean
       +x:int,float,float
       +x:int,float,float,boolean
       +x:long,int,float,float,boolean
       +f:Alias
       +f:Type
       +f:depthFunc
       +f:depthMask
       +f:depthRangeFar
       +f:depthRangeNear
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:DirectionalLightsAttribute{
       +x:
       +x:DirectionalLightsAttribute
       +f:Alias
       +f:Type
       +f:lights
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:FloatAttribute{
       +x:long
       +x:long,float
       +f:AlphaTest
       +f:AlphaTestAlias
       +f:Shininess
       +f:ShininessAlias
       +f:value
       +m:createAlphaTest:float
       +m:createShininess:float
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:IntAttribute{
       +x:long
       +x:long,int
       +f:CullFace
       +f:CullFaceAlias
       +f:value
       +m:createCullFace:int
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:PointLightsAttribute{
       +x:
       +x:PointLightsAttribute
       +f:Alias
       +f:Type
       +f:lights
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:SpotLightsAttribute{
       +x:
       +x:SpotLightsAttribute
       +f:Alias
       +f:Type
       +f:lights
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
      }
      >c:TextureAttribute{
       +x:long
       +x:TextureAttribute
       +x:long,Texture
       +x:long,TextureRegion
       +x:long,TextureDescriptor
       +x:long,TextureDescriptor,float,float,float,float
       +x:long,TextureDescriptor,float,float,float,float,int
       +f:Ambient
       +f:AmbientAlias
       +f:Bump
       +f:BumpAlias
       +f:Diffuse
       +f:DiffuseAlias
       +f:Emissive
       +f:EmissiveAlias
       +f:Normal
       +f:NormalAlias
       +f:Reflection
       +f:ReflectionAlias
       +f:Specular
       +f:SpecularAlias
       +f:offsetU
       +f:offsetV
       +f:scaleU
       +f:scaleV
       +f:textureDescription
       +f:uvIndex
       +m:createAmbient:Texture
       +m:createAmbient:TextureRegion
       +m:createBump:Texture
       +m:createBump:TextureRegion
       +m:createDiffuse:Texture
       +m:createDiffuse:TextureRegion
       +m:createEmissive:Texture
       +m:createEmissive:TextureRegion
       +m:createNormal:Texture
       +m:createNormal:TextureRegion
       +m:createReflection:Texture
       +m:createReflection:TextureRegion
       +m:createSpecular:Texture
       +m:createSpecular:TextureRegion
       +m:is:long
       +m:compareTo:Attribute
       +m:compareTo:Object
       +m:copy:
       +m:hashCode:
       +m:set:TextureRegion
      }
     }
     >p:decals{
      >c:GroupPlug{
       +z
       +m:afterGroup:
       +m:beforeGroup:Array
      }
      >c:GroupStrategy{
       +z
       +m:afterGroup:int
       +m:afterGroups:
       +m:beforeGroup:int,Array
       +m:beforeGroups:
       +m:decideGroup:Decal
       +m:getGroupShader:int
      }
      >c:CameraGroupStrategy{
       +x:Camera
       +x:Camera,Comparator
       +m:afterGroup:int
       +m:afterGroups:
       +m:beforeGroup:int,Array
       +m:beforeGroups:
       +m:decideGroup:Decal
       +m:dispose:
       +m:getCamera:
       +m:getGroupShader:int
       +m:setCamera:Camera
      }
      >c:Decal{
       +x:
       +x:DecalMaterial
       +f:C1
       +f:C2
       +f:C3
       +f:C4
       +f:SIZE
       +f:U1
       +f:U2
       +f:U3
       +f:U4
       +f:V1
       +f:V2
       +f:V3
       +f:V4
       +f:X1
       +f:X2
       +f:X3
       +f:X4
       +f:Y1
       +f:Y2
       +f:Y3
       +f:Y4
       +f:Z1
       +f:Z2
       +f:Z3
       +f:Z4
       +f:transformationOffset
       +f:value
       +m:newDecal:TextureRegion
       +m:newDecal:TextureRegion,boolean
       +m:newDecal:float,float,TextureRegion
       +m:newDecal:float,float,TextureRegion,boolean
       +m:newDecal:float,float,TextureRegion,int,int
       +m:newDecal:float,float,TextureRegion,int,int,DecalMaterial
       +m:getColor:
       +m:getHeight:
       +m:getMaterial:
       +m:getPosition:
       +m:getRotation:
       +m:getScaleX:
       +m:getScaleY:
       +m:getTextureRegion:
       +m:getVertices:
       +m:getWidth:
       +m:getX:
       +m:getY:
       +m:getZ:
       +m:lookAt:Vector3,Vector3
       +m:rotateX:float
       +m:rotateY:float
       +m:rotateZ:float
       +m:setBlending:int,int
       +m:setColor:Color
       +m:setColor:float,float,float,float
       +m:setDimensions:float,float
       +m:setHeight:float
       +m:setMaterial:DecalMaterial
       +m:setPackedColor:float
       +m:setPosition:Vector3
       +m:setPosition:float,float,float
       +m:setRotation:Quaternion
       +m:setRotation:Vector3,Vector3
       +m:setRotation:float,float,float
       +m:setRotationX:float
       +m:setRotationY:float
       +m:setRotationZ:float
       +m:setScale:float
       +m:setScale:float,float
       +m:setScaleX:float
       +m:setScaleY:float
       +m:setTextureRegion:TextureRegion
       +m:setWidth:float
       +m:setX:float
       +m:setY:float
       +m:setZ:float
       +m:translate:Vector3
       +m:translate:float,float,float
       +m:translateX:float
       +m:translateY:float
       +m:translateZ:float
      }
      >c:DecalBatch{
       +x:GroupStrategy
       +x:int,GroupStrategy
       +m:add:Decal
       +m:dispose:
       +m:flush:
       +m:getSize:
       +m:initialize:int
       +m:setGroupStrategy:GroupStrategy
      }
      >c:DecalMaterial{
       +x:
       +f:NO_BLEND
       +m:equals:Object
       +m:getDstBlendFactor:
       +m:getSrcBlendFactor:
       +m:hashCode:
       +m:isOpaque:
       +m:set:
      }
      >c:PluggableGroupStrategy{
       +m:afterGroup:int
       +m:beforeGroup:int,Array
       +m:plugIn:GroupPlug,int
       +m:unPlug:int
      }
      >c:SimpleOrthoGroupStrategy{
       +x:
       +m:afterGroup:int
       +m:afterGroups:
       +m:beforeGroup:int,Array
       +m:beforeGroups:
       +m:decideGroup:Decal
       +m:getGroupShader:int
      }
     }
     >p:environment{
      >c:ShadowMap{
       +z
       +m:getDepthMap:
       +m:getProjViewTrans:
      }
      >c:AmbientCubemap{
       +x:
       +x:float[]
       +x:AmbientCubemap
       +f:data
       +m:add:Color
       +m:add:Color,Vector3
       +m:add:Color,Vector3,Vector3
       +m:add:Color,Vector3,Vector3,float
       +m:add:Color,float,float,float
       +m:add:float,float,float
       +m:add:float,float,float,Vector3
       +m:add:float,float,float,float,float,float
       +m:clamp:
       +m:clear:
       +m:getColor:Color,int
       +m:set:AmbientCubemap
       +m:set:Color
       +m:set:float,float,float
       +m:set:float[]
       +m:toString:
      }
      >c:BaseLight{
       +f:color
       +m:setColor:Color
       +m:setColor:float,float,float,float
      }
      >c:DirectionalLight{
       +x:
       +f:direction
       +m:equals:DirectionalLight
       +m:equals:Object
       +m:set:Color,Vector3
       +m:set:Color,float,float,float
       +m:set:DirectionalLight
       +m:set:float,float,float,Vector3
       +m:set:float,float,float,float,float,float
       +m:setDirection:Vector3
       +m:setDirection:float,float,float
      }
      >c:DirectionalShadowLight{
       +x:int,int,float,float,float,float
       +m:begin:
       +m:begin:Camera
       +m:begin:Vector3,Vector3
       +m:dispose:
       +m:end:
       +m:getCamera:
       +m:getDepthMap:
       +m:getFrameBuffer:
       +m:getProjViewTrans:
       +m:update:Camera
       +m:update:Vector3,Vector3
      }
      >c:PointLight{
       +x:
       +f:intensity
       +f:position
       +m:equals:Object
       +m:equals:PointLight
       +m:set:Color,Vector3,float
       +m:set:Color,float,float,float,float
       +m:set:PointLight
       +m:set:float,float,float,Vector3,float
       +m:set:float,float,float,float,float,float,float
       +m:setIntensity:float
       +m:setPosition:Vector3
       +m:setPosition:float,float,float
      }
      >c:SphericalHarmonics{
       +x:
       +x:float[]
       +f:data
       +m:set:AmbientCubemap
       +m:set:Color
       +m:set:float,float,float
       +m:set:float[]
      }
      >c:SpotLight{
       +x:
       +f:cutoffAngle
       +f:direction
       +f:exponent
       +f:intensity
       +f:position
       +m:equals:Object
       +m:equals:SpotLight
       +m:set:Color,Vector3,Vector3,float,float,float
       +m:set:Color,float,float,float,float,float,float,float,float,float
       +m:set:SpotLight
       +m:set:float,float,float,Vector3,Vector3,float,float,float
       +m:set:float,float,float,float,float,float,float,float,float,float,float,float
       +m:setCutoffAngle:float
       +m:setDirection:Vector3
       +m:setDirection:float,float,float
       +m:setExponent:float
       +m:setIntensity:float
       +m:setPosition:Vector3
       +m:setPosition:float,float,float
       +m:setTarget:Vector3
      }
     }
     -p:loader
     >p:model{
      >p:data{
       >c:ModelAnimation{
        +x:
        +f:id
        +f:nodeAnimations
       }
       >c:ModelData{
        +x:
        +f:animations
        +f:id
        +f:materials
        +f:meshes
        +f:nodes
        +f:version
        +m:addMesh:ModelMesh
       }
       >c:ModelMaterial{
        >c:MaterialType{
         +f:Lambert
         +f:Phong
         +m:valueOf:String
         +m:values:
        }
        +x:
        +f:ambient
        +f:diffuse
        +f:emissive
        +f:id
        +f:opacity
        +f:reflection
        +f:shininess
        +f:specular
        +f:textures
        +f:type
       }
       >c:ModelMesh{
        +x:
        +f:attributes
        +f:id
        +f:parts
        +f:vertices
       }
       >c:ModelMeshPart{
        +x:
        +f:id
        +f:indices
        +f:primitiveType
       }
       >c:ModelNode{
        +x:
        +f:children
        +f:id
        +f:meshId
        +f:parts
        +f:rotation
        +f:scale
        +f:translation
       }
       >c:ModelNodeAnimation{
        +x:
        +f:nodeId
        +f:rotation
        +f:scaling
        +f:translation
       }
       >c:ModelNodeKeyframe{
        +x:
        +f:keytime
        +f:value
       }
       >c:ModelNodePart{
        +x:
        +f:bones
        +f:materialId
        +f:meshPartId
        +f:uvMapping
       }
       >c:ModelTexture{
        +x:
        +f:USAGE_AMBIENT
        +f:USAGE_BUMP
        +f:USAGE_DIFFUSE
        +f:USAGE_EMISSIVE
        +f:USAGE_NONE
        +f:USAGE_NORMAL
        +f:USAGE_REFLECTION
        +f:USAGE_SHININESS
        +f:USAGE_SPECULAR
        +f:USAGE_TRANSPARENCY
        +f:USAGE_UNKNOWN
        +f:fileName
        +f:id
        +f:usage
        +f:uvScaling
        +f:uvTranslation
       }
      }
      >c:Animation{
       +x:
       +f:duration
       +f:id
       +f:nodeAnimations
      }
      >c:MeshPart{
       +x:
       +x:MeshPart
       +x:String,Mesh,int,int,int
       +f:center
       +f:halfExtents
       +f:id
       +f:mesh
       +f:offset
       +f:primitiveType
       +f:radius
       +f:size
       +m:equals:MeshPart
       +m:equals:Object
       +m:render:ShaderProgram
       +m:render:ShaderProgram,boolean
       +m:set:MeshPart
       +m:set:String,Mesh,int,int,int
       +m:update:
      }
      >c:Node{
       +x:
       +f:globalTransform
       +f:id
       +f:inheritTransform
       +f:isAnimated
       +f:localTransform
       +f:parts
       +f:rotation
       +f:scale
       +f:translation
       +m:getNode:Array,String,boolean,boolean
       +m:addChild:Node
       +m:addChildren:Iterable
       +m:attachTo:Node
       +m:calculateBoneTransforms:boolean
       +m:calculateBoundingBox:BoundingBox
       +m:calculateBoundingBox:BoundingBox,boolean
       +m:calculateLocalTransform:
       +m:calculateTransforms:boolean
       +m:calculateWorldTransform:
       +m:copy:
       +m:detach:
       +m:extendBoundingBox:BoundingBox
       +m:extendBoundingBox:BoundingBox,boolean
       +m:getChild:String,boolean,boolean
       +m:getChild:int
       +m:getChildCount:
       +m:getChildren:
       +m:getParent:
       +m:hasChildren:
       +m:hasParent:
       +m:insertChild:int,Node
       +m:insertChildren:int,Iterable
       +m:removeChild:Node
      }
      >c:NodeAnimation{
       +x:
       +f:node
       +f:rotation
       +f:scaling
       +f:translation
      }
      >c:NodeKeyframe{
       +x:float,Object
       +f:keytime
       +f:value
      }
      >c:NodePart{
       +x:
       +x:MeshPart,Material
       +f:bones
       +f:enabled
       +f:invBoneBindTransforms
       +f:material
       +f:meshPart
       +m:copy:
       +m:setRenderable:Renderable
      }
     }
     >p:particles{
      >p:batches{
       >c:ParticleBatch{
        +z
        +m:begin:
        +m:draw:ParticleControllerRenderData
        +m:end:
        -m:load:AssetManager,ResourceData
        -m:save:AssetManager,ResourceData
       }
       >c:BillboardParticleBatch{
        >c:Config{
         +x:
         +x:boolean,AlignMode
        }
        +x:
        +x:int
        +x:AlignMode,boolean,int
        +x:AlignMode,boolean,int,BlendingAttribute,DepthTestAttribute
        +m:allocParticlesData:int
        +m:begin:
        +m:getAlignMode:
        +m:getBlendingAttribute:
        +m:getRenderables:Array,Pool
        +m:getTexture:
        +m:isUseGPU:
        -m:load:AssetManager,ResourceData
        -m:save:AssetManager,ResourceData
        +m:setAlignMode:AlignMode
        +m:setTexture:Texture
        +m:setUseGpu:boolean
        +m:setVertexData:
       }
       >c:BufferedParticleBatch{
        +m:begin:
        +m:draw:ParticleControllerRenderData
        +m:end:
        +m:ensureCapacity:int
        +m:getBufferedCount:
        +m:getSorter:
        +m:resetCapacity:
        +m:setCamera:Camera
        +m:setSorter:ParticleSorter
       }
       >c:ModelInstanceParticleBatch{
        +x:
        +m:begin:
        +m:draw:ModelInstanceControllerRenderData
        +m:draw:ParticleControllerRenderData
        +m:end:
        +m:getBufferedCount:
        +m:getRenderables:Array,Pool
        -m:load:AssetManager,ResourceData
        -m:save:AssetManager,ResourceData
       }
       >c:PointSpriteParticleBatch{
        +x:
        +x:int
        +x:int,Config
        +x:int,Config,BlendingAttribute,DepthTestAttribute
        +m:getBlendingAttribute:
        +m:getRenderables:Array,Pool
        +m:getTexture:
        -m:load:AssetManager,ResourceData
        -m:save:AssetManager,ResourceData
        +m:setTexture:Texture
       }
      }
      >p:emitters{
       >c:Emitter{
        +f:maxParticleCount
        +f:minParticleCount
        +f:percent
        +m:end:
        +m:getMaxParticleCount:
        +m:getMinParticleCount:
        +m:init:
        +m:isComplete:
        +m:read:Json,JsonValue
        +m:set:Emitter
        +m:setMaxParticleCount:int
        +m:setMinParticleCount:int
        +m:setParticleCount:int,int
        +m:write:Json
       }
       >c:RegularEmitter{
        >c:EmissionMode{
         +f:Disabled
         +f:Enabled
         +f:EnabledUntilCycleEnd
         +m:valueOf:String
         +m:values:
        }
        +x:
        +x:RegularEmitter
        +f:delayValue
        +f:durationValue
        +f:emissionValue
        +f:lifeOffsetValue
        +f:lifeValue
        +m:activateParticles:int,int
        +m:allocateChannels:
        +m:copy:
        +m:getDelay:
        +m:getDuration:
        +m:getEmission:
        +m:getEmissionMode:
        +m:getLife:
        +m:getLifeOffset:
        +m:getPercentComplete:
        +m:init:
        +m:isComplete:
        +m:isContinuous:
        +m:read:Json,JsonValue
        +m:set:RegularEmitter
        +m:setContinuous:boolean
        +m:setEmissionMode:EmissionMode
        +m:start:
        +m:update:
        +m:write:Json
       }
      }
      >p:influencers{
       >c:ColorInfluencer{
        >c:Random{
         +x:
         +m:activateParticles:int,int
         +m:allocateChannels:
         +m:copy:
        }
        >c:Single{
         +x:
         +x:Single
         +f:alphaValue
         +f:colorValue
         +m:activateParticles:int,int
         +m:allocateChannels:
         +m:copy:
         +m:read:Json,JsonValue
         +m:set:Single
         +m:update:
         +m:write:Json
        }
        +m:allocateChannels:
       }
       >c:DynamicsInfluencer{
        +x:
        +x:DynamicsInfluencer
        +x:DynamicsModifier[]
        +f:velocities
        +m:activateParticles:int,int
        +m:allocateChannels:
        +m:copy:
        +m:init:
        +m:read:Json,JsonValue
        +m:set:ParticleController
        +m:update:
        +m:write:Json
       }
       >c:DynamicsModifier{
        >c:Angular{
         +f:phiValue
         +f:thetaValue
         +m:activateParticles:int,int
         +m:allocateChannels:
         +m:read:Json,JsonValue
         +m:write:Json
        }
        >c:BrownianAcceleration{
         +x:
         +x:BrownianAcceleration
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:CentripetalAcceleration{
         +x:
         +x:CentripetalAcceleration
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:FaceDirection{
         +x:
         +x:FaceDirection
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:PolarAcceleration{
         +x:
         +x:PolarAcceleration
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:Rotational2D{
         +x:
         +x:Rotational2D
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:Rotational3D{
         +x:
         +x:Rotational3D
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:Strength{
         +f:strengthValue
         +m:activateParticles:int,int
         +m:allocateChannels:
         +m:read:Json,JsonValue
         +m:write:Json
        }
        >c:TangentialAcceleration{
         +x:
         +x:TangentialAcceleration
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        +f:isGlobal
        +m:allocateChannels:
        +m:read:Json,JsonValue
        +m:write:Json
       }
       >c:ModelInfluencer{
        >c:Random{
         +x:
         +x:Random
         +x:Model[]
         +m:activateParticles:int,int
         +m:copy:
         +m:init:
         +m:killParticles:int,int
        }
        >c:Single{
         +x:
         +x:Single
         +x:Model[]
         +m:copy:
         +m:init:
        }
        +f:models
        +m:allocateChannels:
        -m:load:AssetManager,ResourceData
        -m:save:AssetManager,ResourceData
       }
       >c:ParticleControllerFinalizerInfluencer{
        +x:
        +m:allocateChannels:
        +m:copy:
        +m:init:
        +m:update:
       }
       >c:ParticleControllerInfluencer{
        >c:Random{
         +x:
         +x:Random
         +x:ParticleController[]
         +m:activateParticles:int,int
         +m:copy:
         +m:dispose:
         +m:init:
         +m:killParticles:int,int
        }
        >c:Single{
         +x:
         +x:Single
         +x:ParticleController[]
         +m:activateParticles:int,int
         +m:copy:
         +m:init:
         +m:killParticles:int,int
        }
        +f:templates
        +m:allocateChannels:
        +m:dispose:
        +m:end:
        -m:load:AssetManager,ResourceData
        -m:save:AssetManager,ResourceData
       }
       >c:RegionInfluencer{
        >c:Animated{
         +x:
         +x:Texture
         +x:Animated
         +x:TextureRegion
         +m:allocateChannels:
         +m:copy:
         +m:update:
        }
        >c:AspectTextureRegion{
         +x:
         +x:TextureRegion
         +x:AspectTextureRegion
         +f:halfInvAspectRatio
         +f:imageName
         +f:u2
         +f:u
         +f:v2
         +f:v
         +m:set:AspectTextureRegion
         +m:set:TextureRegion
         +m:updateUV:TextureAtlas
        }
        >c:Random{
         +x:
         +x:Random
         +x:Texture
         +x:TextureRegion
         +m:activateParticles:int,int
         +m:copy:
        }
        >c:Single{
         +x:
         +x:Single
         +x:Texture
         +x:TextureRegion
         +m:copy:
         +m:init:
        }
        +f:atlasName
        +f:regions
        +m:add:TextureRegion[]
        +m:allocateChannels:
        +m:clear:
        -m:load:AssetManager,ResourceData
        +m:read:Json,JsonValue
        -m:save:AssetManager,ResourceData
        +m:setAtlasName:String
        +m:write:Json
       }
       >c:ScaleInfluencer{
        +x:
        +x:ScaleInfluencer
        +m:activateParticles:int,int
        +m:copy:
       }
       >c:SimpleInfluencer{
        +f:value
        +m:activateParticles:int,int
        +m:allocateChannels:
        +m:read:Json,JsonValue
        +m:update:
        +m:write:Json
       }
       >c:SpawnInfluencer{
        +x:
        +x:SpawnInfluencer
        +x:SpawnShapeValue
        +f:spawnShapeValue
        +m:activateParticles:int,int
        +m:allocateChannels:
        +m:copy:
        +m:init:
        -m:load:AssetManager,ResourceData
        +m:read:Json,JsonValue
        -m:save:AssetManager,ResourceData
        +m:start:
        +m:write:Json
       }
      }
      >p:renderers{
       >c:BillboardControllerRenderData{
        +x:
        +f:colorChannel
        +f:regionChannel
        +f:rotationChannel
        +f:scaleChannel
       }
       >c:BillboardRenderer{
        +x:
        +x:BillboardParticleBatch
        +m:allocateChannels:
        +m:copy:
        +m:isCompatible:ParticleBatch
       }
       >c:ModelInstanceControllerRenderData{
        +x:
        +f:colorChannel
        +f:modelInstanceChannel
        +f:rotationChannel
        +f:scaleChannel
       }
       >c:ModelInstanceRenderer{
        +x:
        +x:ModelInstanceParticleBatch
        +m:allocateChannels:
        +m:copy:
        +m:init:
        +m:isCompatible:ParticleBatch
        +m:update:
       }
       >c:ParticleControllerControllerRenderer{
        +x:
        +m:copy:
        +m:init:
        +m:isCompatible:ParticleBatch
        +m:update:
       }
       >c:ParticleControllerRenderData{
        +f:controller
        +f:positionChannel
       }
       >c:ParticleControllerRenderer{
        +m:isCompatible:ParticleBatch
        +m:set:ParticleController
        +m:setBatch:ParticleBatch
        +m:update:
       }
       >c:PointSpriteControllerRenderData{
        +x:
        +f:colorChannel
        +f:regionChannel
        +f:rotationChannel
        +f:scaleChannel
       }
       >c:PointSpriteRenderer{
        +x:
        +x:PointSpriteParticleBatch
        +m:allocateChannels:
        +m:copy:
        +m:isCompatible:ParticleBatch
       }
      }
      >p:values{
       >c:CylinderSpawnShapeValue{
        +x:
        +x:CylinderSpawnShapeValue
        +m:copy:
        +m:spawnAux:Vector3,float
       }
       >c:EllipseSpawnShapeValue{
        +x:
        +x:EllipseSpawnShapeValue
        +m:copy:
        +m:getSide:
        +m:load:ParticleValue
        +m:read:Json,JsonValue
        +m:setSide:SpawnSide
        +m:spawnAux:Vector3,float
        +m:write:Json
       }
       >c:GradientColorValue{
        +x:
        +f:timeline
        +m:getColor:float
        +m:getColor:float,float[],int
        +m:getColors:
        +m:getTimeline:
        +m:load:GradientColorValue
        +m:read:Json,JsonValue
        +m:setColors:float[]
        +m:setTimeline:float[]
        +m:write:Json
       }
       >c:LineSpawnShapeValue{
        +x:
        +x:LineSpawnShapeValue
        +m:copy:
        +m:spawnAux:Vector3,float
       }
       >c:MeshSpawnShapeValue{
        >c:Triangle{
         +x:float,float,float,float,float,float,float,float,float
         +m:pick:float,float,float,float,float,float,float,float,float,Vector3
         +m:pick:Vector3
        }
        -m:load:AssetManager,ResourceData
        +m:load:ParticleValue
        -m:save:AssetManager,ResourceData
        +m:setMesh:Mesh
        +m:setMesh:Mesh,Model
       }
       >c:NumericValue{
        +x:
        +m:getValue:
        +m:load:NumericValue
        +m:read:Json,JsonValue
        +m:setValue:float
        +m:write:Json
       }
       >c:ParticleValue{
        +x:
        +x:ParticleValue
        +f:active
        +m:isActive:
        +m:load:ParticleValue
        +m:read:Json,JsonValue
        +m:setActive:boolean
        +m:write:Json
       }
       >c:PointSpawnShapeValue{
        +x:
        +x:PointSpawnShapeValue
        +m:copy:
        +m:spawnAux:Vector3,float
       }
       >c:PrimitiveSpawnShapeValue{
        >c:SpawnSide{
         +f:both
         +f:bottom
         +f:top
         +m:valueOf:String
         +m:values:
        }
        +f:spawnDepthValue
        +f:spawnHeightValue
        +f:spawnWidthValue
        +m:getSpawnDepth:
        +m:getSpawnHeight:
        +m:getSpawnWidth:
        +m:isEdges:
        +m:load:ParticleValue
        +m:read:Json,JsonValue
        +m:setActive:boolean
        +m:setDimensions:float,float,float
        +m:setEdges:boolean
        +m:start:
        +m:write:Json
       }
       >c:RangedNumericValue{
        +x:
        +m:getLowMax:
        +m:getLowMin:
        +m:load:RangedNumericValue
        +m:newLowValue:
        +m:read:Json,JsonValue
        +m:setLow:float
        +m:setLow:float,float
        +m:setLowMax:float
        +m:setLowMin:float
        +m:write:Json
       }
       >c:RectangleSpawnShapeValue{
        +x:
        +x:RectangleSpawnShapeValue
        +m:copy:
        +m:spawnAux:Vector3,float
       }
       >c:ScaledNumericValue{
        +x:
        +f:timeline
        +m:getHighMax:
        +m:getHighMin:
        +m:getScale:float
        +m:getScaling:
        +m:getTimeline:
        +m:isRelative:
        +m:load:ScaledNumericValue
        +m:newHighValue:
        +m:read:Json,JsonValue
        +m:setHigh:float
        +m:setHigh:float,float
        +m:setHighMax:float
        +m:setHighMin:float
        +m:setRelative:boolean
        +m:setScaling:float[]
        +m:setTimeline:float[]
        +m:write:Json
       }
       >c:SpawnShapeValue{
        +f:xOffsetValue
        +f:yOffsetValue
        +f:zOffsetValue
        +m:copy:
        +m:init:
        -m:load:AssetManager,ResourceData
        +m:load:ParticleValue
        +m:read:Json,JsonValue
        -m:save:AssetManager,ResourceData
        +m:spawn:Vector3,float
        +m:spawnAux:Vector3,float
        +m:start:
        +m:write:Json
       }
       >c:UnweightedMeshSpawnShapeValue{
        +x:
        +x:UnweightedMeshSpawnShapeValue
        +m:copy:
        +m:setMesh:Mesh,Model
        +m:spawnAux:Vector3,float
       }
       >c:WeightMeshSpawnShapeValue{
        +x:
        +x:WeightMeshSpawnShapeValue
        +m:calculateWeights:
        +m:copy:
        +m:init:
        +m:spawnAux:Vector3,float
       }
      }
      >c:ParallelArray{
       >c:ChannelInitializer{
        +z
        +m:init:Channel
       }
       >c:Channel{
        +f:data
        +f:id
        +f:strideSize
        +m:add:int,Object[]
        +m:swap:int,int
       }
       >c:ChannelDescriptor{
        +x:int,Class,int
        +f:count
        +f:id
        +f:type
       }
       >c:FloatChannel{
        +f:data
        +m:add:int,Object[]
        +m:setCapacity:int
        +m:swap:int,int
       }
       >c:IntChannel{
        +f:data
        +m:add:int,Object[]
        +m:setCapacity:int
        +m:swap:int,int
       }
       >c:ObjectChannel{
        +f:data
        +m:add:int,Object[]
        +m:setCapacity:int
        +m:swap:int,int
       }
       +x:int
       +f:capacity
       +f:size
       +m:addChannel:ChannelDescriptor
       +m:addChannel:ChannelDescriptor,ChannelInitializer
       +m:addElement:Object[]
       +m:clear:
       +m:getChannel:ChannelDescriptor
       +m:removeArray:int
       +m:removeElement:int
       +m:setCapacity:int
      }
      >c:ParticleChannels{
       >c:ColorInitializer{
        +x:
        +m:get:
        +m:init:Channel
        +m:init:FloatChannel
       }
       >c:Rotation2dInitializer{
        +x:
        +m:get:
        +m:init:Channel
        +m:init:FloatChannel
       }
       >c:Rotation3dInitializer{
        +x:
        +m:get:
        +m:init:Channel
        +m:init:FloatChannel
       }
       >c:ScaleInitializer{
        +x:
        +m:get:
        +m:init:Channel
        +m:init:FloatChannel
       }
       >c:TextureRegionInitializer{
        +x:
        +m:get:
        +m:init:Channel
        +m:init:FloatChannel
       }
       +x:
       +f:Acceleration
       +f:AlphaOffset
       +f:AngularVelocity2D
       +f:AngularVelocity3D
       +f:BlueOffset
       +f:Color
       +f:CosineOffset
       +f:CurrentLifeOffset
       +f:GreenOffset
       +f:HalfHeightOffset
       +f:HalfWidthOffset
       +f:Interpolation4
       +f:Interpolation6
       +f:Interpolation
       +f:InterpolationDiffOffset
       +f:InterpolationStartOffset
       +f:Life
       +f:LifePercentOffset
       +f:ModelInstance
       +f:ParticleController
       +f:Position
       +f:PreviousPosition
       +f:RedOffset
       +f:Rotation2D
       +f:Rotation3D
       +f:Scale
       +f:SineOffset
       +f:TextureRegion
       +f:TotalLifeOffset
       +f:U2Offset
       +f:UOffset
       +f:V2Offset
       +f:VOffset
       +f:VelocityPhiDiffOffset
       +f:VelocityPhiStartOffset
       +f:VelocityStrengthDiffOffset
       +f:VelocityStrengthStartOffset
       +f:VelocityThetaDiffOffset
       +f:VelocityThetaStartOffset
       +f:WOffset
       +f:XOffset
       +f:YOffset
       +f:ZOffset
       +m:newGlobalId:
       +m:newId:
      }
      >c:ParticleController{
       +x:
       +x:String,Emitter,ParticleControllerRenderer,Influencer[]
       +f:deltaTime
       +f:deltaTimeSqr
       +f:emitter
       +f:influencers
       +f:name
       +f:particleChannels
       +f:particles
       +f:renderer
       +f:scale
       +f:transform
       +m:activateParticles:int,int
       +m:copy:
       +m:dispose:
       +m:draw:
       +m:end:
       +m:findInfluencer:Class
       +m:getBoundingBox:
       +m:getTransform:Matrix4
       +m:init:
       +m:isComplete:
       +m:killParticles:int,int
       -m:load:AssetManager,ResourceData
       +m:mul:Matrix4
       +m:read:Json,JsonValue
       +m:removeInfluencer:Class
       +m:replaceInfluencer:Class,Influencer
       +m:reset:
       +m:rotate:Quaternion
       +m:rotate:Vector3,float
       -m:save:AssetManager,ResourceData
       +m:scale:Vector3
       +m:scale:float,float,float
       +m:setTransform:Matrix4
       +m:setTransform:float,float,float,float,float,float,float,float
       +m:setTranslation:Vector3
       +m:start:
       +m:translate:Vector3
       +m:update:
       +m:update:float
       +m:write:Json
      }
      >c:ParticleControllerComponent{
       +m:activateParticles:int,int
       +m:allocateChannels:
       +m:copy:
       +m:dispose:
       +m:end:
       +m:init:
       +m:killParticles:int,int
       -m:load:AssetManager,ResourceData
       +m:read:Json,JsonValue
       -m:save:AssetManager,ResourceData
       +m:set:ParticleController
       +m:start:
       +m:update:
       +m:write:Json
      }
      >c:ParticleEffect{
       +x:
       +x:ParticleEffect
       +x:ParticleController[]
       +m:copy:
       +m:dispose:
       +m:draw:
       +m:end:
       +m:findController:String
       +m:getBoundingBox:
       +m:getControllers:
       +m:init:
       +m:isComplete:
       -m:load:AssetManager,ResourceData
       +m:reset:
       +m:rotate:Quaternion
       +m:rotate:Vector3,float
       -m:save:AssetManager,ResourceData
       +m:scale:Vector3
       +m:scale:float,float,float
       +m:setBatch:Array
       +m:setTransform:Matrix4
       +m:start:
       +m:translate:Vector3
       +m:update:
       +m:update:float
      }
      >c:ParticleEffectLoader{
       -c:ParticleEffectLoadParameter
       >c:ParticleEffectSaveParameter{
        -x:FileHandle,AssetManager,Array
        -x:FileHandle,AssetManager,Array,OutputType,boolean
       }
       -x:FileHandleResolver
       -m:getDependencies:String,FileHandle,AssetLoaderParameters
       -m:getDependencies:String,FileHandle,ParticleEffectLoadParameter
       -m:loadAsync:AssetManager,String,FileHandle,AssetLoaderParameters
       -m:loadAsync:AssetManager,String,FileHandle,ParticleEffectLoadParameter
       -m:loadSync:AssetManager,String,FileHandle,AssetLoaderParameters
       -m:loadSync:AssetManager,String,FileHandle,ParticleEffectLoadParameter
       -m:save:ParticleEffect,ParticleEffectSaveParameter
      }
      >c:ParticleShader{
       >c:AlignMode{
        +f:Screen
        +f:ViewPoint
        +m:valueOf:String
        +m:values:
       }
       >c:Config{
        +x:
        +x:AlignMode
        +x:ParticleType
        +x:String,String
        +x:AlignMode,ParticleType
        +f:align
        +f:defaultCullFace
        +f:defaultDepthFunc
        +f:fragmentShader
        +f:ignoreUnimplemented
        +f:type
        +f:vertexShader
       }
       >c:Inputs{
        +x:
        +f:cameraInvDirection
        +f:cameraRight
        +f:regionSize
        +f:screenWidth
       }
       >c:ParticleType{
        +f:Billboard
        +f:Point
        +m:valueOf:String
        +m:values:
       }
       >c:Setters{
        +x:
        +f:cameraInvDirection
        +f:cameraPosition
        +f:cameraRight
        +f:cameraUp
        +f:screenWidth
        +f:worldViewTrans
       }
       +x:Renderable
       +x:Renderable,Config
       +x:Renderable,Config,String
       +x:Renderable,Config,ShaderProgram
       +x:Renderable,Config,String,String,String
       +m:createPrefix:Renderable,Config
       +m:getDefaultFragmentShader:
       +m:getDefaultVertexShader:
       +m:begin:Camera,RenderContext
       +m:canRender:Renderable
       +m:compareTo:Shader
       +m:dispose:
       +m:end:
       +m:equals:Object
       +m:equals:ParticleShader
       +m:getDefaultCullFace:
       +m:getDefaultDepthFunc:
       +m:init:
       +m:render:Renderable
       +m:setDefaultCullFace:int
       +m:setDefaultDepthFunc:int
      }
      >c:ParticleSorter{
       >c:Distance{
        +x:
        +m:ensureCapacity:int
        +m:qsort:int,int
        +m:sort:Array
       }
       >c:None{
        +x:
        +m:ensureCapacity:int
        +m:sort:Array
       }
       +m:ensureCapacity:int
       +m:setCamera:Camera
       +m:sort:Array
      }
      >c:ParticleSystem{
       +x:
       +m:add:ParticleBatch
       +m:add:ParticleEffect
       +m:begin:
       +m:draw:
       +m:end:
       +m:getBatches:
       +m:getRenderables:Array,Pool
       +m:remove:ParticleEffect
       +m:removeAll:
       +m:update:
       +m:update:float
       +m:updateAndDraw:
       +m:updateAndDraw:float
      }
      >c:ResourceData{
       -c:Configurable
       >c:AssetData{
        +x:
        +x:String,Class
        +f:filename
        +f:type
        +m:read:Json,JsonValue
        +m:write:Json
       }
       >c:SaveData{
        +x:
        +x:ResourceData
        +m:load:String
        -m:loadAsset:
        +m:read:Json,JsonValue
        +m:save:String,Object
        +m:saveAsset:String,Class
        +m:write:Json
       }
       +x:
       +x:Object
       +f:resource
       +m:createSaveData:
       +m:createSaveData:String
       +m:getAssetDescriptors:
       +m:getAssets:
       +m:getSaveData:
       +m:getSaveData:String
       +m:read:Json,JsonValue
       +m:write:Json
      }
     }
     >p:shaders{
      >c:BaseShader{
       >c:Setter{
        +z
        +m:isGlobal:BaseShader,int
        +m:set:BaseShader,int,Renderable,Attributes
       }
       >c:Validator{
        +z
        +m:validate:BaseShader,int,Renderable
       }
       >c:GlobalSetter{
        +m:isGlobal:BaseShader,int
       }
       >c:LocalSetter{
        +m:isGlobal:BaseShader,int
       }
       >c:Uniform{
        +x:String
        +x:String,long
        +x:String,long,long
        +x:String,long,long,long
        +f:alias
        +f:environmentMask
        +f:materialMask
        +f:overallMask
        +m:validate:BaseShader,int,Renderable
       }
       +f:camera
       +f:context
       +f:program
       +m:begin:Camera,RenderContext
       +m:dispose:
       +m:end:
       +m:getUniformAlias:int
       +m:getUniformID:String
       +m:has:int
       +m:init:ShaderProgram,Renderable
       +m:loc:int
       +m:register:String
       +m:register:String,Setter
       +m:register:String,Validator
       +m:register:String,Validator,Setter
       +m:register:Uniform
       +m:register:Uniform,Setter
       +m:render:Renderable
       +m:render:Renderable,Attributes
       +m:set:int,Color
       +m:set:int,GLTexture
       +m:set:int,Matrix3
       +m:set:int,Matrix4
       +m:set:int,TextureDescriptor
       +m:set:int,Vector2
       +m:set:int,Vector3
       +m:set:int,float
       +m:set:int,float,float
       +m:set:int,float,float,float
       +m:set:int,float,float,float,float
       +m:set:int,int
       +m:set:int,int,int
       +m:set:int,int,int,int
       +m:set:int,int,int,int,int
      }
      >c:DefaultShader{
       >c:Config{
        +x:
        +x:String,String
        +f:defaultCullFace
        +f:defaultDepthFunc
        +f:fragmentShader
        +f:ignoreUnimplemented
        +f:numBoneWeights
        +f:numBones
        +f:numDirectionalLights
        +f:numPointLights
        +f:numSpotLights
        +f:vertexShader
       }
       >c:Inputs{
        +x:
        +f:alphaTest
        +f:ambientCube
        +f:ambientTexture
        +f:ambientUVTransform
        +f:bones
        +f:cameraDirection
        +f:cameraNearFar
        +f:cameraPosition
        +f:cameraUp
        +f:diffuseColor
        +f:diffuseTexture
        +f:diffuseUVTransform
        +f:dirLights
        +f:emissiveColor
        +f:emissiveTexture
        +f:emissiveUVTransform
        +f:environmentCubemap
        +f:normalMatrix
        +f:normalTexture
        +f:normalUVTransform
        +f:opacity
        +f:pointLights
        +f:projTrans
        +f:projViewTrans
        +f:projViewWorldTrans
        +f:reflectionColor
        +f:reflectionTexture
        +f:reflectionUVTransform
        +f:shininess
        +f:specularColor
        +f:specularTexture
        +f:specularUVTransform
        +f:spotLights
        +f:viewTrans
        +f:viewWorldTrans
        +f:worldTrans
       }
       >c:Setters{
        >c:ACubemap{
         +x:int,int
         +f:dirLightsOffset
         +f:pointLightsOffset
         +m:set:BaseShader,int,Renderable,Attributes
        }
        >c:Bones{
         +x:int
         +f:bones
         +m:set:BaseShader,int,Renderable,Attributes
        }
        +x:
        +f:ambientTexture
        +f:ambientUVTransform
        +f:cameraDirection
        +f:cameraNearFar
        +f:cameraPosition
        +f:cameraUp
        +f:diffuseColor
        +f:diffuseTexture
        +f:diffuseUVTransform
        +f:emissiveColor
        +f:emissiveTexture
        +f:emissiveUVTransform
        +f:environmentCubemap
        +f:normalMatrix
        +f:normalTexture
        +f:normalUVTransform
        +f:projTrans
        +f:projViewTrans
        +f:projViewWorldTrans
        +f:reflectionColor
        +f:reflectionTexture
        +f:reflectionUVTransform
        +f:shininess
        +f:specularColor
        +f:specularTexture
        +f:specularUVTransform
        +f:viewTrans
        +f:viewWorldTrans
        +f:worldTrans
       }
       +x:Renderable
       +x:Renderable,Config
       +x:Renderable,Config,String
       +x:Renderable,Config,ShaderProgram
       +x:Renderable,Config,String,String,String
       +f:u_alphaTest
       +f:u_ambientTexture
       +f:u_ambientUVTransform
       +f:u_bones
       +f:u_cameraDirection
       +f:u_cameraNearFar
       +f:u_cameraPosition
       +f:u_cameraUp
       +f:u_diffuseColor
       +f:u_diffuseTexture
       +f:u_diffuseUVTransform
       +f:u_emissiveColor
       +f:u_emissiveTexture
       +f:u_emissiveUVTransform
       +f:u_normalMatrix
       +f:u_normalTexture
       +f:u_normalUVTransform
       +f:u_opacity
       +f:u_projTrans
       +f:u_projViewTrans
       +f:u_projViewWorldTrans
       +f:u_reflectionColor
       +f:u_reflectionTexture
       +f:u_reflectionUVTransform
       +f:u_shininess
       +f:u_specularColor
       +f:u_specularTexture
       +f:u_specularUVTransform
       +f:u_time
       +f:u_viewTrans
       +f:u_viewWorldTrans
       +f:u_worldTrans
       +m:createPrefix:Renderable,Config
       +m:getDefaultFragmentShader:
       +m:getDefaultVertexShader:
       +m:begin:Camera,RenderContext
       +m:canRender:Renderable
       +m:compareTo:Shader
       +m:dispose:
       +m:end:
       +m:equals:DefaultShader
       +m:equals:Object
       +m:getDefaultCullFace:
       +m:getDefaultDepthFunc:
       +m:init:
       +m:render:Renderable,Attributes
       +m:setDefaultCullFace:int
       +m:setDefaultDepthFunc:int
      }
      >c:DepthShader{
       >c:Config{
        +x:
        +x:String,String
        +f:defaultAlphaTest
        +f:depthBufferOnly
       }
       +x:Renderable
       +x:Renderable,Config
       +x:Renderable,Config,String
       +x:Renderable,Config,ShaderProgram
       +x:Renderable,Config,String,String,String
       +f:numBones
       +m:createPrefix:Renderable,Config
       +m:getDefaultFragmentShader:
       +m:getDefaultVertexShader:
       +m:begin:Camera,RenderContext
       +m:canRender:Renderable
       +m:end:
       +m:render:Renderable,Attributes
      }
     }
     >p:utils{
      >p:shapebuilders{
       >c:ArrowShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,float,float,float,float,float,float,float,float,int
       }
       >c:BaseShapeBuilder{
        +x:
       }
       >c:BoxShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,BoundingBox
        +m:build:MeshPartBuilder,Matrix4
        +m:build:MeshPartBuilder,Vector3,Vector3,Vector3,Vector3,Vector3,Vector3,Vector3,Vector3
        +m:build:MeshPartBuilder,VertexInfo,VertexInfo,VertexInfo,VertexInfo,VertexInfo,VertexInfo,VertexInfo,VertexInfo
        +m:build:MeshPartBuilder,float,float,float
        +m:build:MeshPartBuilder,float,float,float,float,float,float
       }
       >c:CapsuleShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,float,float,int
       }
       >c:ConeShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,float,float,float,int
        +m:build:MeshPartBuilder,float,float,float,int,float,float
        +m:build:MeshPartBuilder,float,float,float,int,float,float,boolean
       }
       >c:CylinderShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,float,float,float,int
        +m:build:MeshPartBuilder,float,float,float,int,float,float
        +m:build:MeshPartBuilder,float,float,float,int,float,float,boolean
       }
       >c:EllipseShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,float,float,float,float,int,Vector3,Vector3
        +m:build:MeshPartBuilder,float,float,float,float,int,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,float,float,float,int,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,float,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,float,int,Vector3,Vector3
        +m:build:MeshPartBuilder,float,float,int,Vector3,Vector3,Vector3,Vector3
        +m:build:MeshPartBuilder,float,float,int,Vector3,Vector3,Vector3,Vector3,float,float
        +m:build:MeshPartBuilder,float,float,int,Vector3,Vector3,float,float
        +m:build:MeshPartBuilder,float,float,int,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,float,int,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,int,Vector3,Vector3
        +m:build:MeshPartBuilder,float,int,Vector3,Vector3,Vector3,Vector3
        +m:build:MeshPartBuilder,float,int,Vector3,Vector3,Vector3,Vector3,float,float
        +m:build:MeshPartBuilder,float,int,Vector3,Vector3,float,float
        +m:build:MeshPartBuilder,float,int,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,int,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,int,float,float,float,float,float,float,float,float,float,float,float,float
        +m:build:MeshPartBuilder,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float
       }
       >c:FrustumShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,Camera
        +m:build:MeshPartBuilder,Camera,Color,Color,Color,Color,Color
        +m:build:MeshPartBuilder,Frustum,Color,Color
       }
       >c:PatchShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,Vector3,Vector3,Vector3,Vector3,Vector3,int,int
        +m:build:MeshPartBuilder,VertexInfo,VertexInfo,VertexInfo,VertexInfo,int,int
        +m:build:MeshPartBuilder,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,int
       }
       >c:RenderableShapeBuilder{
        +x:
        +m:buildNormals:MeshPartBuilder,Renderable,float,Color,Color,Color
        +m:buildNormals:MeshPartBuilder,RenderableProvider,float
        +m:buildNormals:MeshPartBuilder,RenderableProvider,float,Color,Color,Color
       }
       >c:SphereShapeBuilder{
        +x:
        +m:build:MeshPartBuilder,float,float,float,int,int
        +m:build:MeshPartBuilder,float,float,float,int,int,float,float,float,float
       }
      }
      >c:MeshPartBuilder{
       >c:VertexInfo{
        +x:
        +f:color
        +f:hasColor
        +f:hasNormal
        +f:hasPosition
        +f:hasUV
        +f:normal
        +f:position
        +f:uv
        +m:lerp:VertexInfo,float
        +m:reset:
        +m:set:Vector3,Vector3,Color,Vector2
        +m:set:VertexInfo
        +m:setCol:Color
        +m:setCol:float,float,float,float
        +m:setNor:Vector3
        +m:setNor:float,float,float
        +m:setPos:Vector3
        +m:setPos:float,float,float
        +m:setUV:Vector2
        +m:setUV:float,float
       }
       +z
       +m:addMesh:Mesh
       +m:addMesh:Mesh,int,int
       +m:addMesh:MeshPart
       +m:addMesh:float[],short[]
       +m:addMesh:float[],short[],int,int
       +m:ensureCapacity:int,int
       +m:ensureIndices:int
       +m:ensureRectangleIndices:int
       +m:ensureTriangleIndices:int
       +m:ensureVertices:int
       +m:getAttributes:
       +m:getMeshPart:
       +m:getPrimitiveType:
       +m:getVertexTransform:Matrix4
       +m:index:short
       +m:index:short,short
       +m:index:short,short,short
       +m:index:short,short,short,short
       +m:index:short,short,short,short,short,short
       +m:index:short,short,short,short,short,short,short,short
       +m:isVertexTransformationEnabled:
       +m:lastIndex:
       +m:line:Vector3,Color,Vector3,Color
       +m:line:Vector3,Vector3
       +m:line:VertexInfo,VertexInfo
       +m:line:float,float,float,float,float,float
       +m:line:short,short
       +m:rect:Vector3,Vector3,Vector3,Vector3,Vector3
       +m:rect:VertexInfo,VertexInfo,VertexInfo,VertexInfo
       +m:rect:float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
       +m:rect:short,short,short,short
       +m:setColor:Color
       +m:setColor:float,float,float,float
       +m:setUVRange:TextureRegion
       +m:setUVRange:float,float,float,float
       +m:setVertexTransform:Matrix4
       +m:setVertexTransformationEnabled:boolean
       +m:triangle:Vector3,Color,Vector3,Color,Vector3,Color
       +m:triangle:Vector3,Vector3,Vector3
       +m:triangle:VertexInfo,VertexInfo,VertexInfo
       +m:triangle:short,short,short
       +m:vertex:Vector3,Vector3,Color,Vector2
       +m:vertex:VertexInfo
       +m:vertex:float[]
      }
      >c:RenderableSorter{
       +z
       +m:sort:Camera,Array
      }
      >c:ShaderProvider{
       +z
       +m:getShader:Renderable
      }
      >c:TextureBinder{
       +z
       +m:begin:
       +m:bind:GLTexture
       +m:bind:TextureDescriptor
       +m:end:
       +m:getBindCount:
       +m:getReuseCount:
       +m:resetCounts:
      }
      >c:TextureProvider{
       -c:AssetTextureProvider
       -c:FileTextureProvider
       +z
       +m:load:String
      }
      >c:AnimationController{
       >c:AnimationListener{
        +z
        +m:onEnd:AnimationDesc
        +m:onLoop:AnimationDesc
       }
       >c:AnimationDesc{
        +f:animation
        +f:duration
        +f:listener
        +f:loopCount
        +f:offset
        +f:speed
        +f:time
       }
       +x:ModelInstance
       +f:allowSameAnimation
       +f:current
       +f:inAction
       +f:paused
       +f:previous
       +f:queued
       +f:queuedTransitionTime
       +f:transitionCurrentTime
       +f:transitionTargetTime
       +m:action:String,float,float,int,float,AnimationListener,float
       +m:action:String,int,float,AnimationListener,float
       +m:animate:String,AnimationListener,float
       +m:animate:String,float
       +m:animate:String,float,float,int,float,AnimationListener,float
       +m:animate:String,int,AnimationListener,float
       +m:animate:String,int,float,AnimationListener,float
       +m:queue:String,float,float,int,float,AnimationListener,float
       +m:queue:String,int,float,AnimationListener,float
       +m:setAnimation:String
       +m:setAnimation:String,AnimationListener
       +m:setAnimation:String,float,float,int,float,AnimationListener
       +m:setAnimation:String,int
       +m:setAnimation:String,int,AnimationListener
       +m:setAnimation:String,int,float,AnimationListener
       +m:update:float
      }
      >c:BaseAnimationController{
       >c:Transform{
        +x:
        +f:rotation
        +f:scale
        +f:translation
        +m:idt:
        +m:lerp:Transform,float
        +m:lerp:Vector3,Quaternion,Vector3,float
        +m:reset:
        +m:set:Transform
        +m:set:Vector3,Quaternion,Vector3
        +m:toMatrix4:Matrix4
        +m:toString:
       }
       +x:ModelInstance
       +f:target
      }
      >c:BaseShaderProvider{
       +m:dispose:
       +m:getShader:Renderable
      }
      >c:CameraInputController{
       +x:Camera
       +f:activateKey
       +f:alwaysScroll
       +f:autoUpdate
       +f:backwardKey
       +f:camera
       +f:forwardButton
       +f:forwardKey
       +f:forwardTarget
       +f:pinchZoomFactor
       +f:rotateAngle
       +f:rotateButton
       +f:rotateLeftKey
       +f:rotateRightKey
       +f:scrollFactor
       +f:scrollTarget
       +f:target
       +f:translateButton
       +f:translateTarget
       +f:translateUnits
       +m:keyDown:int
       +m:keyUp:int
       +m:scrolled:float,float
       +m:setInvertedControls:boolean
       +m:touchDown:int,int,int,int
       +m:touchDragged:int,int,int
       +m:touchUp:int,int,int,int
       +m:update:
       +m:zoom:float
      }
      >c:DefaultRenderableSorter{
       +x:
       +m:compare:Object,Object
       +m:compare:Renderable,Renderable
       +m:sort:Camera,Array
      }
      >c:DefaultShaderProvider{
       +x:
       +x:Config
       +x:String,String
       -x:FileHandle,FileHandle
       +f:config
      }
      >c:DefaultTextureBinder{
       +x:int
       +x:int,int
       +x:int,int,int
       +f:LRU
       +f:MAX_GLES_UNITS
       +f:ROUNDROBIN
       +m:begin:
       +m:bind:GLTexture
       +m:bind:TextureDescriptor
       +m:end:
       +m:getBindCount:
       +m:getReuseCount:
       +m:resetCounts:
      }
      >c:DepthShaderProvider{
       +x:
       +x:Config
       +x:String,String
       -x:FileHandle,FileHandle
       +f:config
      }
      >c:FirstPersonCameraController{
       +x:Camera
       +f:autoUpdate
       +f:backwardKey
       +f:downKey
       +f:forwardKey
       +f:strafeLeftKey
       +f:strafeRightKey
       +f:upKey
       +m:keyDown:int
       +m:keyUp:int
       +m:setDegreesPerPixel:float
       +m:setVelocity:float
       +m:touchDragged:int,int,int
       +m:update:
       +m:update:float
      }
      >c:MeshBuilder{
       +x:
       +f:MAX_INDEX
       +f:MAX_VERTICES
       +m:createAttributes:long
       +m:addMesh:Mesh
       +m:addMesh:Mesh,int,int
       +m:addMesh:MeshPart
       +m:addMesh:float[],short[]
       +m:addMesh:float[],short[],int,int
       +m:begin:VertexAttributes
       +m:begin:VertexAttributes,int
       +m:begin:long
       +m:begin:long,int
       +m:clear:
       +m:end:
       +m:end:Mesh
       +m:ensureCapacity:int,int
       +m:ensureIndices:int
       +m:ensureRectangleIndices:int
       +m:ensureTriangleIndices:int
       +m:ensureVertices:int
       +m:getAttributes:
       +m:getFloatsPerVertex:
       +m:getIndices:short[],int
       +m:getMeshPart:
       +m:getNumIndices:
       +m:getNumVertices:
       +m:getPrimitiveType:
       +m:getVertexTransform:Matrix4
       +m:getVertices:float[],int
       +m:index:short
       +m:index:short,short
       +m:index:short,short,short
       +m:index:short,short,short,short
       +m:index:short,short,short,short,short,short
       +m:index:short,short,short,short,short,short,short,short
       +m:isVertexTransformationEnabled:
       +m:lastIndex:
       +m:line:Vector3,Color,Vector3,Color
       +m:line:Vector3,Vector3
       +m:line:VertexInfo,VertexInfo
       +m:line:float,float,float,float,float,float
       +m:line:short,short
       +m:part:String,int
       +m:part:String,int,MeshPart
       +m:rect:Vector3,Vector3,Vector3,Vector3,Vector3
       +m:rect:VertexInfo,VertexInfo,VertexInfo,VertexInfo
       +m:rect:float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
       +m:rect:short,short,short,short
       +m:setColor:Color
       +m:setColor:float,float,float,float
       +m:setUVRange:TextureRegion
       +m:setUVRange:float,float,float,float
       +m:setVertexTransform:Matrix4
       +m:setVertexTransformationEnabled:boolean
       +m:triangle:Vector3,Color,Vector3,Color,Vector3,Color
       +m:triangle:Vector3,Vector3,Vector3
       +m:triangle:VertexInfo,VertexInfo,VertexInfo
       +m:triangle:short,short,short
       +m:vertex:Vector3,Vector3,Color,Vector2
       +m:vertex:VertexInfo
       +m:vertex:float[]
      }
      >c:ModelBuilder{
       +x:
       +m:rebuildReferences:Model
       +m:begin:
       +m:createArrow:Vector3,Vector3,Material,long
       +m:createArrow:float,float,float,float,float,float,float,float,int,int,Material,long
       +m:createBox:float,float,float,Material,long
       +m:createBox:float,float,float,int,Material,long
       +m:createCapsule:float,float,int,Material,long
       +m:createCapsule:float,float,int,int,Material,long
       +m:createCone:float,float,float,int,Material,long
       +m:createCone:float,float,float,int,Material,long,float,float
       +m:createCone:float,float,float,int,int,Material,long
       +m:createCone:float,float,float,int,int,Material,long,float,float
       +m:createCylinder:float,float,float,int,Material,long
       +m:createCylinder:float,float,float,int,Material,long,float,float
       +m:createCylinder:float,float,float,int,int,Material,long
       +m:createCylinder:float,float,float,int,int,Material,long,float,float
       +m:createLineGrid:int,int,float,float,Material,long
       +m:createRect:float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,Material,long
       +m:createRect:float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,Material,long
       +m:createSphere:float,float,float,int,int,Material,long
       +m:createSphere:float,float,float,int,int,Material,long,float,float,float,float
       +m:createSphere:float,float,float,int,int,int,Material,long
       +m:createSphere:float,float,float,int,int,int,Material,long,float,float,float,float
       +m:createXYZCoordinates:float,Material,long
       +m:createXYZCoordinates:float,float,float,int,int,Material,long
       +m:end:
       +m:manage:Disposable
       +m:node:
       +m:node:String,Model
       +m:part:MeshPart,Material
       +m:part:String,Mesh,int,Material
       +m:part:String,Mesh,int,int,int,Material
       +m:part:String,int,VertexAttributes,Material
       +m:part:String,int,long,Material
      }
      >c:RenderContext{
       +x:TextureBinder
       +f:textureBinder
       +m:begin:
       +m:end:
       +m:setBlending:boolean,int,int
       +m:setCullFace:int
       +m:setDepthMask:boolean
       +m:setDepthTest:int
       +m:setDepthTest:int,float,float
      }
      >c:ShapeCache{
       +x:
       +x:int,int,VertexAttributes,int
       +m:begin:
       +m:begin:int
       +m:dispose:
       +m:end:
       +m:getMaterial:
       +m:getRenderables:Array,Pool
       +m:getWorldTransform:
      }
      >c:TextureDescriptor{
       +x:
       +x:GLTexture
       +x:GLTexture,TextureFilter,TextureFilter,TextureWrap,TextureWrap
       +f:magFilter
       +f:minFilter
       +f:texture
       +f:uWrap
       +f:vWrap
       +m:compareTo:Object
       +m:compareTo:TextureDescriptor
       +m:equals:Object
       +m:hashCode:
       +m:set:GLTexture,TextureFilter,TextureFilter,TextureWrap,TextureWrap
       +m:set:TextureDescriptor
      }
     }
     >c:RenderableProvider{
      +z
      +m:getRenderables:Array,Pool
     }
     >c:Shader{
      +z
      +m:begin:Camera,RenderContext
      +m:canRender:Renderable
      +m:compareTo:Shader
      +m:end:
      +m:init:
      +m:render:Renderable
     }
     >c:Attribute{
      +f:type
      +m:getAttributeAlias:long
      +m:getAttributeType:String
      +m:copy:
      +m:equals:Object
      +m:hashCode:
      +m:toString:
     }
     >c:Attributes{
      +x:
      +m:attributesHash:
      +m:clear:
      +m:compare:Attribute,Attribute
      +m:compare:Object,Object
      +m:compareTo:Attributes
      +m:compareTo:Object
      +m:equals:Object
      +m:get:Array,long
      +m:get:Class,long
      +m:get:long
      +m:getMask:
      +m:has:long
      +m:hashCode:
      +m:iterator:
      +m:remove:long
      +m:same:Attributes
      +m:same:Attributes,boolean
      +m:set:Attribute
      +m:set:Attribute,Attribute
      +m:set:Attribute,Attribute,Attribute
      +m:set:Attribute,Attribute,Attribute,Attribute
      +m:set:Attribute[]
      +m:set:Iterable
      +m:size:
      +m:sort:
     }
     >c:Environment{
      +x:
      +f:shadowMap
      +m:add:Array
      +m:add:BaseLight
      +m:add:BaseLight[]
      +m:add:DirectionalLight
      +m:add:PointLight
      +m:add:SpotLight
      +m:remove:Array
      +m:remove:BaseLight
      +m:remove:BaseLight[]
      +m:remove:DirectionalLight
      +m:remove:PointLight
      +m:remove:SpotLight
     }
     >c:Material{
      +x:
      +x:Array
      +x:String
      +x:Material
      +x:Attribute[]
      +x:String,Array
      +x:String,Material
      +x:String,Attribute[]
      +f:id
      +m:copy:
      +m:equals:Object
      +m:hashCode:
     }
     >c:Model{
      +x:
      +x:ModelData
      +x:ModelData,TextureProvider
      +f:animations
      +f:materials
      +f:meshParts
      +f:meshes
      +f:nodes
      +m:calculateBoundingBox:BoundingBox
      +m:calculateTransforms:
      +m:dispose:
      +m:extendBoundingBox:BoundingBox
      +m:getAnimation:String
      +m:getAnimation:String,boolean
      +m:getManagedDisposables:
      +m:getMaterial:String
      +m:getMaterial:String,boolean
      +m:getNode:String
      +m:getNode:String,boolean
      +m:getNode:String,boolean,boolean
      +m:manageDisposable:Disposable
     }
     >c:ModelBatch{
      +x:
      +x:RenderContext
      +x:ShaderProvider
      +x:RenderableSorter
      +x:String,String
      -x:FileHandle,FileHandle
      +x:RenderContext,ShaderProvider
      +x:RenderContext,RenderableSorter
      +x:ShaderProvider,RenderableSorter
      +x:RenderContext,ShaderProvider,RenderableSorter
      +m:begin:Camera
      +m:dispose:
      +m:end:
      +m:flush:
      +m:getCamera:
      +m:getRenderContext:
      +m:getRenderableSorter:
      +m:getShaderProvider:
      +m:ownsRenderContext:
      +m:render:Iterable
      +m:render:Iterable,Environment
      +m:render:Iterable,Environment,Shader
      +m:render:Iterable,Shader
      +m:render:Renderable
      +m:render:RenderableProvider
      +m:render:RenderableProvider,Environment
      +m:render:RenderableProvider,Environment,Shader
      +m:render:RenderableProvider,Shader
      +m:setCamera:Camera
     }
     >c:ModelCache{
      >c:MeshPool{
       +z
       +m:flush:
       +m:obtain:VertexAttributes,int,int
      }
      >c:SimpleMeshPool{
       +x:
       +m:dispose:
       +m:flush:
       +m:obtain:VertexAttributes,int,int
      }
      >c:Sorter{
       +x:
       +m:compare:Object,Object
       +m:compare:Renderable,Renderable
       +m:sort:Camera,Array
      }
      >c:TightMeshPool{
       +x:
       +m:dispose:
       +m:flush:
       +m:obtain:VertexAttributes,int,int
      }
      +x:
      +x:RenderableSorter,MeshPool
      +m:add:Iterable
      +m:add:Renderable
      +m:add:RenderableProvider
      +m:begin:
      +m:begin:Camera
      +m:dispose:
      +m:end:
      +m:getRenderables:Array,Pool
     }
     >c:ModelInstance{
      +x:Model
      +x:ModelInstance
      +x:Model,Array
      +x:Model,Matrix4
      +x:Model,Vector3
      +x:Model,String[]
      +x:ModelInstance,Matrix4
      +x:Model,String,boolean
      +x:Model,Matrix4,Array
      +x:Model,Matrix4,String[]
      +x:ModelInstance,Matrix4,boolean
      +x:Model,float,float,float
      +x:Model,String,boolean,boolean
      +x:Model,Matrix4,Array,boolean
      +x:Model,Matrix4,String,boolean
      +x:Model,String,boolean,boolean,boolean
      +x:Model,Matrix4,String,boolean,boolean
      +x:Model,Matrix4,String,boolean,boolean,boolean
      +x:Model,Matrix4,String,boolean,boolean,boolean,boolean
      +f:defaultShareKeyframes
      +f:animations
      +f:materials
      +f:model
      +f:nodes
      +f:transform
      +f:userData
      +m:calculateBoundingBox:BoundingBox
      +m:calculateTransforms:
      +m:copy:
      +m:copyAnimation:Animation
      +m:copyAnimation:Animation,boolean
      +m:copyAnimations:Iterable
      +m:copyAnimations:Iterable,boolean
      +m:extendBoundingBox:BoundingBox
      +m:getAnimation:String
      +m:getAnimation:String,boolean
      +m:getMaterial:String
      +m:getMaterial:String,boolean
      +m:getNode:String
      +m:getNode:String,boolean
      +m:getNode:String,boolean,boolean
      +m:getRenderable:Renderable
      +m:getRenderable:Renderable,Node
      +m:getRenderable:Renderable,Node,NodePart
      +m:getRenderables:Array,Pool
     }
     >c:Renderable{
      +x:
      +f:bones
      +f:environment
      +f:material
      +f:meshPart
      +f:shader
      +f:userData
      +f:worldTransform
      +m:set:Renderable
     }
    }
    >p:glutils{
     >c:ImmediateModeRenderer{
      +z
      +m:begin:Matrix4,int
      +m:color:Color
      +m:color:float
      +m:color:float,float,float,float
      +m:dispose:
      +m:end:
      +m:flush:
      +m:getMaxVertices:
      +m:getNumVertices:
      +m:normal:float,float,float
      +m:texCoord:float,float
      +m:vertex:float,float,float
     }
     >c:IndexData{
      +z
      +m:bind:
      +m:dispose:
      +m:getBuffer:boolean
      +m:getNumIndices:
      +m:getNumMaxIndices:
      +m:invalidate:
      +m:setIndices:ShortBuffer
      +m:setIndices:short[],int,int
      +m:unbind:
      +m:updateIndices:int,short[],int,int
     }
     >c:InstanceData{
      +z
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getNumInstances:
      +m:getNumMaxInstances:
      +m:invalidate:
      +m:setInstanceData:FloatBuffer,int
      +m:setInstanceData:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateInstanceData:int,FloatBuffer,int,int
      +m:updateInstanceData:int,float[],int,int
     }
     >c:VertexData{
      +z
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getNumMaxVertices:
      +m:getNumVertices:
      +m:invalidate:
      +m:setVertices:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateVertices:int,float[],int,int
     }
     >c:CustomTexture3DData{
      +x:int,int,int,int,int,int,int
      +m:consume3DData:
      +m:getDepth:
      +m:getGLFormat:
      +m:getGLType:
      +m:getHeight:
      +m:getInternalFormat:
      +m:getMipMapLevel:
      +m:getPixels:
      +m:getWidth:
      +m:isManaged:
      +m:isPrepared:
      +m:prepare:
      +m:useMipMaps:
     }
     >c:ETC1{
      >c:ETC1Data{
       -x:FileHandle
       +x:int,int,ByteBuffer,int
       +f:compressedData
       +f:dataOffset
       +f:height
       +f:width
       +m:dispose:
       +m:hasPKMHeader:
       +m:toString:
       -m:write:FileHandle
      }
      +x:
      +f:ETC1_RGB8_OES
      +f:PKM_HEADER_SIZE
      +m:decodeImage:ETC1Data,Format
      +m:encodeImage:Pixmap
      +m:encodeImagePKM:Pixmap
      +m:formatHeader:ByteBuffer,int,int,int
      +m:getCompressedDataSize:int,int
     }
     >c:ETC1TextureData{
      -x:FileHandle
      +x:ETC1Data,boolean
      -x:FileHandle,boolean
      +m:consumeCustomData:int
      +m:consumePixmap:
      +m:disposePixmap:
      +m:getFormat:
      +m:getHeight:
      +m:getType:
      +m:getWidth:
      +m:isManaged:
      +m:isPrepared:
      +m:prepare:
      +m:useMipMaps:
     }
     >c:FacedCubemapData{
      +x:
      +x:int,int,int,Format
      +x:Pixmap,Pixmap,Pixmap,Pixmap,Pixmap,Pixmap
      -x:FileHandle,FileHandle,FileHandle,FileHandle,FileHandle,FileHandle
      +x:TextureData,TextureData,TextureData,TextureData,TextureData,TextureData
      +x:Pixmap,Pixmap,Pixmap,Pixmap,Pixmap,Pixmap,boolean
      -x:FileHandle,FileHandle,FileHandle,FileHandle,FileHandle,FileHandle,boolean
      +m:consumeCubemapData:
      +m:getHeight:
      +m:getTextureData:CubemapSide
      +m:getWidth:
      +m:isComplete:
      +m:isManaged:
      +m:isPrepared:
      -m:load:CubemapSide,FileHandle
      +m:load:CubemapSide,Pixmap
      +m:prepare:
     }
     -c:FileTextureArrayData
     -c:FileTextureData
     >c:FloatFrameBuffer{
      +x:int,int,boolean
     }
     >c:FloatTextureData{
      +x:int,int,int,int,int,boolean
      +m:consumeCustomData:int
      +m:consumePixmap:
      +m:disposePixmap:
      +m:getBuffer:
      +m:getFormat:
      +m:getHeight:
      +m:getType:
      +m:getWidth:
      +m:isManaged:
      +m:isPrepared:
      +m:prepare:
      +m:useMipMaps:
     }
     >c:FrameBuffer{
      +x:Format,int,int,boolean
      +x:Format,int,int,boolean,boolean
      +m:unbind:
     }
     >c:FrameBufferCubemap{
      +x:Format,int,int,boolean
      +x:Format,int,int,boolean,boolean
      +m:bind:
      +m:getSide:
      +m:nextSide:
     }
     >c:GLFrameBuffer{
      >c:FloatFrameBufferBuilder{
       +x:int,int
       +x:int,int,int
       +m:build:
      }
      >c:FrameBufferBuilder{
       +x:int,int
       +x:int,int,int
       +m:build:
      }
      >c:FrameBufferCubemapBuilder{
       +x:int,int
       +x:int,int,int
       +m:build:
      }
      >c:GLFrameBufferBuilder{
       +m:addBasicColorTextureAttachment:Format
       +m:addBasicDepthRenderBuffer:
       +m:addBasicStencilDepthPackedRenderBuffer:
       +m:addBasicStencilRenderBuffer:
       +m:addColorRenderBuffer:int
       +m:addColorTextureAttachment:int,int,int
       +m:addDepthRenderBuffer:int
       +m:addDepthTextureAttachment:int,int
       +m:addFloatAttachment:int,int,int,boolean
       +m:addStencilDepthPackedRenderBuffer:int
       +m:addStencilRenderBuffer:int
       +m:addStencilTextureAttachment:int,int
       +m:build:
      }
      +m:clearAllFrameBuffers:Application
      +m:getManagedStatus:
      +m:getManagedStatus:StringBuilder
      +m:invalidateAllFrameBuffers:Application
      +m:unbind:
      +m:begin:
      +m:bind:
      +m:dispose:
      +m:end:
      +m:end:int,int,int,int
      +m:getColorBufferHandle:int
      +m:getColorBufferTexture:
      +m:getDepthBufferHandle:
      +m:getFramebufferHandle:
      +m:getHeight:
      +m:getStencilBufferHandle:
      +m:getTextureAttachments:
      +m:getWidth:
      +m:transfer:GLFrameBuffer
      +m:transfer:GLFrameBuffer,int
     }
     >c:GLOnlyTextureData{
      +x:int,int,int,int,int,int
      +m:consumeCustomData:int
      +m:consumePixmap:
      +m:disposePixmap:
      +m:getFormat:
      +m:getHeight:
      +m:getType:
      +m:getWidth:
      +m:isManaged:
      +m:isPrepared:
      +m:prepare:
      +m:useMipMaps:
     }
     >c:GLVersion{
      >c:Type{
       +f:GLES
       +f:NONE
       +f:OpenGL
       +f:WebGL
       +m:valueOf:String
       +m:values:
      }
      +x:ApplicationType,String,String,String
      +m:getDebugVersionString:
      +m:getMajorVersion:
      +m:getMinorVersion:
      +m:getReleaseVersion:
      +m:getRendererString:
      +m:getType:
      +m:getVendorString:
      +m:getVersionString:
      +m:isVersionEqualToOrHigher:int,int
     }
     >c:HdpiMode{
      +f:Logical
      +f:Pixels
      +m:valueOf:String
      +m:values:
     }
     >c:HdpiUtils{
      +x:
      +m:glScissor:int,int,int,int
      +m:glViewport:int,int,int,int
      +m:setMode:HdpiMode
      +m:toBackBufferX:int
      +m:toBackBufferY:int
      +m:toLogicalX:int
      +m:toLogicalY:int
     }
     >c:ImmediateModeRenderer20{
      +x:boolean,boolean,int
      +x:int,boolean,boolean,int
      +x:int,boolean,boolean,int,ShaderProgram
      +m:createDefaultShader:boolean,boolean,int
      +m:begin:Matrix4,int
      +m:color:Color
      +m:color:float
      +m:color:float,float,float,float
      +m:dispose:
      +m:end:
      +m:flush:
      +m:getMaxVertices:
      +m:getNumVertices:
      +m:getShader:
      +m:normal:float,float,float
      +m:setShader:ShaderProgram
      +m:texCoord:float,float
      +m:vertex:float,float,float
     }
     >c:IndexArray{
      +x:int
      +m:bind:
      +m:dispose:
      +m:getBuffer:boolean
      +m:getNumIndices:
      +m:getNumMaxIndices:
      +m:invalidate:
      +m:setIndices:ShortBuffer
      +m:setIndices:short[],int,int
      +m:unbind:
      +m:updateIndices:int,short[],int,int
     }
     >c:IndexBufferObject{
      +x:int
      +x:boolean,int
      +x:boolean,ByteBuffer
      +m:bind:
      +m:dispose:
      +m:getBuffer:boolean
      +m:getNumIndices:
      +m:getNumMaxIndices:
      +m:invalidate:
      +m:setIndices:ShortBuffer
      +m:setIndices:short[],int,int
      +m:unbind:
      +m:updateIndices:int,short[],int,int
     }
     >c:IndexBufferObjectSubData{
      +x:int
      +x:boolean,int
      +m:bind:
      +m:dispose:
      +m:getBuffer:boolean
      +m:getNumIndices:
      +m:getNumMaxIndices:
      +m:invalidate:
      +m:setIndices:ShortBuffer
      +m:setIndices:short[],int,int
      +m:unbind:
      +m:updateIndices:int,short[],int,int
     }
     >c:InstanceBufferObject{
      +x:boolean,int,VertexAttributes
      +x:boolean,int,VertexAttribute[]
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getNumInstances:
      +m:getNumMaxInstances:
      +m:invalidate:
      +m:setInstanceData:FloatBuffer,int
      +m:setInstanceData:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateInstanceData:int,FloatBuffer,int,int
      +m:updateInstanceData:int,float[],int,int
     }
     >c:InstanceBufferObjectSubData{
      +x:boolean,int,VertexAttributes
      +x:boolean,int,VertexAttribute[]
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getBufferHandle:
      +m:getNumInstances:
      +m:getNumMaxInstances:
      +m:invalidate:
      +m:setInstanceData:FloatBuffer,int
      +m:setInstanceData:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateInstanceData:int,FloatBuffer,int,int
      +m:updateInstanceData:int,float[],int,int
     }
     -c:KTXTextureData
     >c:MipMapGenerator{
      +m:generateMipMap:Pixmap,int,int
      +m:generateMipMap:int,Pixmap,int,int
      +m:setUseHardwareMipMap:boolean
     }
     >c:MipMapTextureData{
      +x:TextureData[]
      +m:consumeCustomData:int
      +m:consumePixmap:
      +m:disposePixmap:
      +m:getFormat:
      +m:getHeight:
      +m:getType:
      +m:getWidth:
      +m:isManaged:
      +m:isPrepared:
      +m:prepare:
      +m:useMipMaps:
     }
     >c:PixmapTextureData{
      +x:Pixmap,Format,boolean,boolean
      +x:Pixmap,Format,boolean,boolean,boolean
      +m:consumeCustomData:int
      +m:consumePixmap:
      +m:disposePixmap:
      +m:getFormat:
      +m:getHeight:
      +m:getType:
      +m:getWidth:
      +m:isManaged:
      +m:isPrepared:
      +m:prepare:
      +m:useMipMaps:
     }
     >c:ShaderProgram{
      +x:String,String
      -x:FileHandle,FileHandle
      +f:BINORMAL_ATTRIBUTE
      +f:BONEWEIGHT_ATTRIBUTE
      +f:COLOR_ATTRIBUTE
      +f:NORMAL_ATTRIBUTE
      +f:POSITION_ATTRIBUTE
      +f:TANGENT_ATTRIBUTE
      +f:TEXCOORD_ATTRIBUTE
      +f:pedantic
      +f:prependFragmentCode
      +f:prependVertexCode
      +m:clearAllShaderPrograms:Application
      +m:getManagedStatus:
      +m:getNumManagedShaderPrograms:
      +m:invalidateAllShaderPrograms:Application
      +m:bind:
      +m:disableVertexAttribute:String
      +m:disableVertexAttribute:int
      +m:dispose:
      +m:enableVertexAttribute:String
      +m:enableVertexAttribute:int
      +m:fetchUniformLocation:String,boolean
      +m:getAttributeLocation:String
      +m:getAttributeSize:String
      +m:getAttributeType:String
      +m:getAttributes:
      +m:getFragmentShaderSource:
      +m:getHandle:
      +m:getLog:
      +m:getUniformLocation:String
      +m:getUniformSize:String
      +m:getUniformType:String
      +m:getUniforms:
      +m:getVertexShaderSource:
      +m:hasAttribute:String
      +m:hasUniform:String
      +m:isCompiled:
      +m:setAttributef:String,float,float,float,float
      +m:setUniform1fv:String,float[],int,int
      +m:setUniform1fv:int,float[],int,int
      +m:setUniform2fv:String,float[],int,int
      +m:setUniform2fv:int,float[],int,int
      +m:setUniform3fv:String,float[],int,int
      +m:setUniform3fv:int,float[],int,int
      +m:setUniform4fv:String,float[],int,int
      +m:setUniform4fv:int,float[],int,int
      +m:setUniformMatrix3fv:String,FloatBuffer,int,boolean
      +m:setUniformMatrix4fv:String,FloatBuffer,int,boolean
      +m:setUniformMatrix4fv:String,float[],int,int
      +m:setUniformMatrix4fv:int,float[],int,int
      +m:setUniformMatrix:String,Matrix3
      +m:setUniformMatrix:String,Matrix3,boolean
      +m:setUniformMatrix:String,Matrix4
      +m:setUniformMatrix:String,Matrix4,boolean
      +m:setUniformMatrix:int,Matrix3
      +m:setUniformMatrix:int,Matrix3,boolean
      +m:setUniformMatrix:int,Matrix4
      +m:setUniformMatrix:int,Matrix4,boolean
      +m:setUniformf:String,Color
      +m:setUniformf:String,Vector2
      +m:setUniformf:String,Vector3
      +m:setUniformf:String,Vector4
      +m:setUniformf:String,float
      +m:setUniformf:String,float,float
      +m:setUniformf:String,float,float,float
      +m:setUniformf:String,float,float,float,float
      +m:setUniformf:int,Color
      +m:setUniformf:int,Vector2
      +m:setUniformf:int,Vector3
      +m:setUniformf:int,Vector4
      +m:setUniformf:int,float
      +m:setUniformf:int,float,float
      +m:setUniformf:int,float,float,float
      +m:setUniformf:int,float,float,float,float
      +m:setUniformi:String,int
      +m:setUniformi:String,int,int
      +m:setUniformi:String,int,int,int
      +m:setUniformi:String,int,int,int,int
      +m:setUniformi:int,int
      +m:setUniformi:int,int,int
      +m:setUniformi:int,int,int,int
      +m:setUniformi:int,int,int,int,int
      +m:setVertexAttribute:String,int,int,boolean,int,Buffer
      +m:setVertexAttribute:String,int,int,boolean,int,int
      +m:setVertexAttribute:int,int,int,boolean,int,Buffer
      +m:setVertexAttribute:int,int,int,boolean,int,int
     }
     >c:ShapeRenderer{
      >c:ShapeType{
       +f:Filled
       +f:Line
       +f:Point
       +m:valueOf:String
       +m:values:
       +m:getGlType:
      }
      +x:
      +x:int
      +x:int,ShaderProgram
      +m:arc:float,float,float,float,float
      +m:arc:float,float,float,float,float,int
      +m:begin:
      +m:begin:ShapeType
      +m:box:float,float,float,float,float,float
      +m:circle:float,float,float
      +m:circle:float,float,float,int
      +m:cone:float,float,float,float,float
      +m:cone:float,float,float,float,float,int
      +m:curve:float,float,float,float,float,float,float,float,int
      +m:dispose:
      +m:ellipse:float,float,float,float
      +m:ellipse:float,float,float,float,float
      +m:ellipse:float,float,float,float,float,int
      +m:ellipse:float,float,float,float,int
      +m:end:
      +m:flush:
      +m:getColor:
      +m:getCurrentType:
      +m:getProjectionMatrix:
      +m:getRenderer:
      +m:getTransformMatrix:
      +m:identity:
      +m:isDrawing:
      +m:line:Vector2,Vector2
      +m:line:Vector3,Vector3
      +m:line:float,float,float,float
      +m:line:float,float,float,float,Color,Color
      +m:line:float,float,float,float,float,float
      +m:line:float,float,float,float,float,float,Color,Color
      +m:point:float,float,float
      +m:polygon:float[]
      +m:polygon:float[],int,int
      +m:polyline:float[]
      +m:polyline:float[],int,int
      +m:rect:float,float,float,float
      +m:rect:float,float,float,float,Color,Color,Color,Color
      +m:rect:float,float,float,float,float,float,float,float,float
      +m:rect:float,float,float,float,float,float,float,float,float,Color,Color,Color,Color
      +m:rectLine:Vector2,Vector2,float
      +m:rectLine:float,float,float,float,float
      +m:rectLine:float,float,float,float,float,Color,Color
      +m:rotate:float,float,float,float
      +m:scale:float,float,float
      +m:set:ShapeType
      +m:setAutoShapeType:boolean
      +m:setColor:Color
      +m:setColor:float,float,float,float
      +m:setProjectionMatrix:Matrix4
      +m:setTransformMatrix:Matrix4
      +m:translate:float,float,float
      +m:triangle:float,float,float,float,float,float
      +m:triangle:float,float,float,float,float,float,Color,Color,Color
      +m:updateMatrices:
      +m:x:Vector2,float
      +m:x:float,float,float
     }
     >c:VertexArray{
      +x:int,VertexAttributes
      +x:int,VertexAttribute[]
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getNumMaxVertices:
      +m:getNumVertices:
      +m:invalidate:
      +m:setVertices:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateVertices:int,float[],int,int
     }
     >c:VertexBufferObject{
      +x:boolean,int,VertexAttributes
      +x:boolean,int,VertexAttribute[]
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getNumMaxVertices:
      +m:getNumVertices:
      +m:invalidate:
      +m:setVertices:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateVertices:int,float[],int,int
     }
     >c:VertexBufferObjectSubData{
      +x:boolean,int,VertexAttributes
      +x:boolean,int,VertexAttribute[]
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getBufferHandle:
      +m:getNumMaxVertices:
      +m:getNumVertices:
      +m:invalidate:
      +m:setVertices:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateVertices:int,float[],int,int
     }
     >c:VertexBufferObjectWithVAO{
      +x:boolean,int,VertexAttributes
      +x:boolean,int,VertexAttribute[]
      +x:boolean,ByteBuffer,VertexAttributes
      +m:bind:ShaderProgram
      +m:bind:ShaderProgram,int[]
      +m:dispose:
      +m:getAttributes:
      +m:getBuffer:boolean
      +m:getNumMaxVertices:
      +m:getNumVertices:
      +m:invalidate:
      +m:setVertices:float[],int,int
      +m:unbind:ShaderProgram
      +m:unbind:ShaderProgram,int[]
      +m:updateVertices:int,float[],int,int
     }
    }
    >p:profiling{
     >c:GLErrorListener{
      +z
      +f:LOGGING_LISTENER
      +f:THROWING_LISTENER
      +m:onError:int
     }
     >c:GL20Interceptor{
      +m:glActiveTexture:int
      +m:glAttachShader:int,int
      +m:glBindAttribLocation:int,int,String
      +m:glBindBuffer:int,int
      +m:glBindFramebuffer:int,int
      +m:glBindRenderbuffer:int,int
      +m:glBindTexture:int,int
      +m:glBlendColor:float,float,float,float
      +m:glBlendEquation:int
      +m:glBlendEquationSeparate:int,int
      +m:glBlendFunc:int,int
      +m:glBlendFuncSeparate:int,int,int,int
      +m:glBufferData:int,int,Buffer,int
      +m:glBufferSubData:int,int,int,Buffer
      +m:glCheckFramebufferStatus:int
      +m:glClear:int
      +m:glClearColor:float,float,float,float
      +m:glClearDepthf:float
      +m:glClearStencil:int
      +m:glColorMask:boolean,boolean,boolean,boolean
      +m:glCompileShader:int
      +m:glCompressedTexImage2D:int,int,int,int,int,int,int,Buffer
      +m:glCompressedTexSubImage2D:int,int,int,int,int,int,int,int,Buffer
      +m:glCopyTexImage2D:int,int,int,int,int,int,int,int
      +m:glCopyTexSubImage2D:int,int,int,int,int,int,int,int
      +m:glCreateProgram:
      +m:glCreateShader:int
      +m:glCullFace:int
      +m:glDeleteBuffer:int
      +m:glDeleteBuffers:int,IntBuffer
      +m:glDeleteFramebuffer:int
      +m:glDeleteFramebuffers:int,IntBuffer
      +m:glDeleteProgram:int
      +m:glDeleteRenderbuffer:int
      +m:glDeleteRenderbuffers:int,IntBuffer
      +m:glDeleteShader:int
      +m:glDeleteTexture:int
      +m:glDeleteTextures:int,IntBuffer
      +m:glDepthFunc:int
      +m:glDepthMask:boolean
      +m:glDepthRangef:float,float
      +m:glDetachShader:int,int
      +m:glDisable:int
      +m:glDisableVertexAttribArray:int
      +m:glDrawArrays:int,int,int
      +m:glDrawElements:int,int,int,Buffer
      +m:glDrawElements:int,int,int,int
      +m:glEnable:int
      +m:glEnableVertexAttribArray:int
      +m:glFinish:
      +m:glFlush:
      +m:glFramebufferRenderbuffer:int,int,int,int
      +m:glFramebufferTexture2D:int,int,int,int,int
      +m:glFrontFace:int
      +m:glGenBuffer:
      +m:glGenBuffers:int,IntBuffer
      +m:glGenFramebuffer:
      +m:glGenFramebuffers:int,IntBuffer
      +m:glGenRenderbuffer:
      +m:glGenRenderbuffers:int,IntBuffer
      +m:glGenTexture:
      +m:glGenTextures:int,IntBuffer
      +m:glGenerateMipmap:int
      +m:glGetActiveAttrib:int,int,IntBuffer,IntBuffer
      +m:glGetActiveUniform:int,int,IntBuffer,IntBuffer
      +m:glGetAttachedShaders:int,int,Buffer,IntBuffer
      +m:glGetAttribLocation:int,String
      +m:glGetBooleanv:int,Buffer
      +m:glGetBufferParameteriv:int,int,IntBuffer
      +m:glGetError:
      +m:glGetFloatv:int,FloatBuffer
      +m:glGetFramebufferAttachmentParameteriv:int,int,int,IntBuffer
      +m:glGetIntegerv:int,IntBuffer
      +m:glGetProgramInfoLog:int
      +m:glGetProgramiv:int,int,IntBuffer
      +m:glGetRenderbufferParameteriv:int,int,IntBuffer
      +m:glGetShaderInfoLog:int
      +m:glGetShaderPrecisionFormat:int,int,IntBuffer,IntBuffer
      +m:glGetShaderiv:int,int,IntBuffer
      +m:glGetString:int
      +m:glGetTexParameterfv:int,int,FloatBuffer
      +m:glGetTexParameteriv:int,int,IntBuffer
      +m:glGetUniformLocation:int,String
      +m:glGetUniformfv:int,int,FloatBuffer
      +m:glGetUniformiv:int,int,IntBuffer
      +m:glGetVertexAttribPointerv:int,int,Buffer
      +m:glGetVertexAttribfv:int,int,FloatBuffer
      +m:glGetVertexAttribiv:int,int,IntBuffer
      +m:glHint:int,int
      +m:glIsBuffer:int
      +m:glIsEnabled:int
      +m:glIsFramebuffer:int
      +m:glIsProgram:int
      +m:glIsRenderbuffer:int
      +m:glIsShader:int
      +m:glIsTexture:int
      +m:glLineWidth:float
      +m:glLinkProgram:int
      +m:glPixelStorei:int,int
      +m:glPolygonOffset:float,float
      +m:glReadPixels:int,int,int,int,int,int,Buffer
      +m:glReleaseShaderCompiler:
      +m:glRenderbufferStorage:int,int,int,int
      +m:glSampleCoverage:float,boolean
      +m:glScissor:int,int,int,int
      +m:glShaderBinary:int,IntBuffer,int,Buffer,int
      +m:glShaderSource:int,String
      +m:glStencilFunc:int,int,int
      +m:glStencilFuncSeparate:int,int,int,int
      +m:glStencilMask:int
      +m:glStencilMaskSeparate:int,int
      +m:glStencilOp:int,int,int
      +m:glStencilOpSeparate:int,int,int,int
      +m:glTexImage2D:int,int,int,int,int,int,int,int,Buffer
      +m:glTexParameterf:int,int,float
      +m:glTexParameterfv:int,int,FloatBuffer
      +m:glTexParameteri:int,int,int
      +m:glTexParameteriv:int,int,IntBuffer
      +m:glTexSubImage2D:int,int,int,int,int,int,int,int,Buffer
      +m:glUniform1f:int,float
      +m:glUniform1fv:int,int,FloatBuffer
      +m:glUniform1fv:int,int,float[],int
      +m:glUniform1i:int,int
      +m:glUniform1iv:int,int,IntBuffer
      +m:glUniform1iv:int,int,int[],int
      +m:glUniform2f:int,float,float
      +m:glUniform2fv:int,int,FloatBuffer
      +m:glUniform2fv:int,int,float[],int
      +m:glUniform2i:int,int,int
      +m:glUniform2iv:int,int,IntBuffer
      +m:glUniform2iv:int,int,int[],int
      +m:glUniform3f:int,float,float,float
      +m:glUniform3fv:int,int,FloatBuffer
      +m:glUniform3fv:int,int,float[],int
      +m:glUniform3i:int,int,int,int
      +m:glUniform3iv:int,int,IntBuffer
      +m:glUniform3iv:int,int,int[],int
      +m:glUniform4f:int,float,float,float,float
      +m:glUniform4fv:int,int,FloatBuffer
      +m:glUniform4fv:int,int,float[],int
      +m:glUniform4i:int,int,int,int,int
      +m:glUniform4iv:int,int,IntBuffer
      +m:glUniform4iv:int,int,int[],int
      +m:glUniformMatrix2fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix2fv:int,int,boolean,float[],int
      +m:glUniformMatrix3fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix3fv:int,int,boolean,float[],int
      +m:glUniformMatrix4fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix4fv:int,int,boolean,float[],int
      +m:glUseProgram:int
      +m:glValidateProgram:int
      +m:glVertexAttrib1f:int,float
      +m:glVertexAttrib1fv:int,FloatBuffer
      +m:glVertexAttrib2f:int,float,float
      +m:glVertexAttrib2fv:int,FloatBuffer
      +m:glVertexAttrib3f:int,float,float,float
      +m:glVertexAttrib3fv:int,FloatBuffer
      +m:glVertexAttrib4f:int,float,float,float,float
      +m:glVertexAttrib4fv:int,FloatBuffer
      +m:glVertexAttribPointer:int,int,int,boolean,int,Buffer
      +m:glVertexAttribPointer:int,int,int,boolean,int,int
      +m:glViewport:int,int,int,int
     }
     >c:GL30Interceptor{
      +m:glActiveTexture:int
      +m:glAttachShader:int,int
      +m:glBeginQuery:int,int
      +m:glBeginTransformFeedback:int
      +m:glBindAttribLocation:int,int,String
      +m:glBindBuffer:int,int
      +m:glBindBufferBase:int,int,int
      +m:glBindBufferRange:int,int,int,int,int
      +m:glBindFramebuffer:int,int
      +m:glBindRenderbuffer:int,int
      +m:glBindSampler:int,int
      +m:glBindTexture:int,int
      +m:glBindTransformFeedback:int,int
      +m:glBindVertexArray:int
      +m:glBlendColor:float,float,float,float
      +m:glBlendEquation:int
      +m:glBlendEquationSeparate:int,int
      +m:glBlendFunc:int,int
      +m:glBlendFuncSeparate:int,int,int,int
      +m:glBlitFramebuffer:int,int,int,int,int,int,int,int,int,int
      +m:glBufferData:int,int,Buffer,int
      +m:glBufferSubData:int,int,int,Buffer
      +m:glCheckFramebufferStatus:int
      +m:glClear:int
      +m:glClearBufferfi:int,int,float,int
      +m:glClearBufferfv:int,int,FloatBuffer
      +m:glClearBufferiv:int,int,IntBuffer
      +m:glClearBufferuiv:int,int,IntBuffer
      +m:glClearColor:float,float,float,float
      +m:glClearDepthf:float
      +m:glClearStencil:int
      +m:glColorMask:boolean,boolean,boolean,boolean
      +m:glCompileShader:int
      +m:glCompressedTexImage2D:int,int,int,int,int,int,int,Buffer
      +m:glCompressedTexSubImage2D:int,int,int,int,int,int,int,int,Buffer
      +m:glCopyBufferSubData:int,int,int,int,int
      +m:glCopyTexImage2D:int,int,int,int,int,int,int,int
      +m:glCopyTexSubImage2D:int,int,int,int,int,int,int,int
      +m:glCopyTexSubImage3D:int,int,int,int,int,int,int,int,int
      +m:glCreateProgram:
      +m:glCreateShader:int
      +m:glCullFace:int
      +m:glDeleteBuffer:int
      +m:glDeleteBuffers:int,IntBuffer
      +m:glDeleteFramebuffer:int
      +m:glDeleteFramebuffers:int,IntBuffer
      +m:glDeleteProgram:int
      +m:glDeleteQueries:int,IntBuffer
      +m:glDeleteQueries:int,int[],int
      +m:glDeleteRenderbuffer:int
      +m:glDeleteRenderbuffers:int,IntBuffer
      +m:glDeleteSamplers:int,IntBuffer
      +m:glDeleteSamplers:int,int[],int
      +m:glDeleteShader:int
      +m:glDeleteTexture:int
      +m:glDeleteTextures:int,IntBuffer
      +m:glDeleteTransformFeedbacks:int,IntBuffer
      +m:glDeleteTransformFeedbacks:int,int[],int
      +m:glDeleteVertexArrays:int,IntBuffer
      +m:glDeleteVertexArrays:int,int[],int
      +m:glDepthFunc:int
      +m:glDepthMask:boolean
      +m:glDepthRangef:float,float
      +m:glDetachShader:int,int
      +m:glDisable:int
      +m:glDisableVertexAttribArray:int
      +m:glDrawArrays:int,int,int
      +m:glDrawArraysInstanced:int,int,int,int
      +m:glDrawBuffers:int,IntBuffer
      +m:glDrawElements:int,int,int,Buffer
      +m:glDrawElements:int,int,int,int
      +m:glDrawElementsInstanced:int,int,int,int,int
      +m:glDrawRangeElements:int,int,int,int,int,Buffer
      +m:glDrawRangeElements:int,int,int,int,int,int
      +m:glEnable:int
      +m:glEnableVertexAttribArray:int
      +m:glEndQuery:int
      +m:glEndTransformFeedback:
      +m:glFinish:
      +m:glFlush:
      +m:glFlushMappedBufferRange:int,int,int
      +m:glFramebufferRenderbuffer:int,int,int,int
      +m:glFramebufferTexture2D:int,int,int,int,int
      +m:glFramebufferTextureLayer:int,int,int,int,int
      +m:glFrontFace:int
      +m:glGenBuffer:
      +m:glGenBuffers:int,IntBuffer
      +m:glGenFramebuffer:
      +m:glGenFramebuffers:int,IntBuffer
      +m:glGenQueries:int,IntBuffer
      +m:glGenQueries:int,int[],int
      +m:glGenRenderbuffer:
      +m:glGenRenderbuffers:int,IntBuffer
      +m:glGenSamplers:int,IntBuffer
      +m:glGenSamplers:int,int[],int
      +m:glGenTexture:
      +m:glGenTextures:int,IntBuffer
      +m:glGenTransformFeedbacks:int,IntBuffer
      +m:glGenTransformFeedbacks:int,int[],int
      +m:glGenVertexArrays:int,IntBuffer
      +m:glGenVertexArrays:int,int[],int
      +m:glGenerateMipmap:int
      +m:glGetActiveAttrib:int,int,IntBuffer,IntBuffer
      +m:glGetActiveUniform:int,int,IntBuffer,IntBuffer
      +m:glGetActiveUniformBlockName:int,int
      +m:glGetActiveUniformBlockName:int,int,Buffer,Buffer
      +m:glGetActiveUniformBlockiv:int,int,int,IntBuffer
      +m:glGetActiveUniformsiv:int,int,IntBuffer,int,IntBuffer
      +m:glGetAttachedShaders:int,int,Buffer,IntBuffer
      +m:glGetAttribLocation:int,String
      +m:glGetBooleanv:int,Buffer
      +m:glGetBufferParameteri64v:int,int,LongBuffer
      +m:glGetBufferParameteriv:int,int,IntBuffer
      +m:glGetBufferPointerv:int,int
      +m:glGetError:
      +m:glGetFloatv:int,FloatBuffer
      +m:glGetFragDataLocation:int,String
      +m:glGetFramebufferAttachmentParameteriv:int,int,int,IntBuffer
      +m:glGetInteger64v:int,LongBuffer
      +m:glGetIntegerv:int,IntBuffer
      +m:glGetProgramInfoLog:int
      +m:glGetProgramiv:int,int,IntBuffer
      +m:glGetQueryObjectuiv:int,int,IntBuffer
      +m:glGetQueryiv:int,int,IntBuffer
      +m:glGetRenderbufferParameteriv:int,int,IntBuffer
      +m:glGetSamplerParameterfv:int,int,FloatBuffer
      +m:glGetSamplerParameteriv:int,int,IntBuffer
      +m:glGetShaderInfoLog:int
      +m:glGetShaderPrecisionFormat:int,int,IntBuffer,IntBuffer
      +m:glGetShaderiv:int,int,IntBuffer
      +m:glGetString:int
      +m:glGetStringi:int,int
      +m:glGetTexParameterfv:int,int,FloatBuffer
      +m:glGetTexParameteriv:int,int,IntBuffer
      +m:glGetUniformBlockIndex:int,String
      +m:glGetUniformIndices:int,String[],IntBuffer
      +m:glGetUniformLocation:int,String
      +m:glGetUniformfv:int,int,FloatBuffer
      +m:glGetUniformiv:int,int,IntBuffer
      +m:glGetUniformuiv:int,int,IntBuffer
      +m:glGetVertexAttribIiv:int,int,IntBuffer
      +m:glGetVertexAttribIuiv:int,int,IntBuffer
      +m:glGetVertexAttribPointerv:int,int,Buffer
      +m:glGetVertexAttribfv:int,int,FloatBuffer
      +m:glGetVertexAttribiv:int,int,IntBuffer
      +m:glHint:int,int
      +m:glInvalidateFramebuffer:int,int,IntBuffer
      +m:glInvalidateSubFramebuffer:int,int,IntBuffer,int,int,int,int
      +m:glIsBuffer:int
      +m:glIsEnabled:int
      +m:glIsFramebuffer:int
      +m:glIsProgram:int
      +m:glIsQuery:int
      +m:glIsRenderbuffer:int
      +m:glIsSampler:int
      +m:glIsShader:int
      +m:glIsTexture:int
      +m:glIsTransformFeedback:int
      +m:glIsVertexArray:int
      +m:glLineWidth:float
      +m:glLinkProgram:int
      +m:glMapBufferRange:int,int,int,int
      +m:glPauseTransformFeedback:
      +m:glPixelStorei:int,int
      +m:glPolygonOffset:float,float
      +m:glProgramParameteri:int,int,int
      +m:glReadBuffer:int
      +m:glReadPixels:int,int,int,int,int,int,Buffer
      +m:glReleaseShaderCompiler:
      +m:glRenderbufferStorage:int,int,int,int
      +m:glRenderbufferStorageMultisample:int,int,int,int,int
      +m:glResumeTransformFeedback:
      +m:glSampleCoverage:float,boolean
      +m:glSamplerParameterf:int,int,float
      +m:glSamplerParameterfv:int,int,FloatBuffer
      +m:glSamplerParameteri:int,int,int
      +m:glSamplerParameteriv:int,int,IntBuffer
      +m:glScissor:int,int,int,int
      +m:glShaderBinary:int,IntBuffer,int,Buffer,int
      +m:glShaderSource:int,String
      +m:glStencilFunc:int,int,int
      +m:glStencilFuncSeparate:int,int,int,int
      +m:glStencilMask:int
      +m:glStencilMaskSeparate:int,int
      +m:glStencilOp:int,int,int
      +m:glStencilOpSeparate:int,int,int,int
      +m:glTexImage2D:int,int,int,int,int,int,int,int,Buffer
      +m:glTexImage2D:int,int,int,int,int,int,int,int,int
      +m:glTexImage3D:int,int,int,int,int,int,int,int,int,Buffer
      +m:glTexImage3D:int,int,int,int,int,int,int,int,int,int
      +m:glTexParameterf:int,int,float
      +m:glTexParameterfv:int,int,FloatBuffer
      +m:glTexParameteri:int,int,int
      +m:glTexParameteriv:int,int,IntBuffer
      +m:glTexSubImage2D:int,int,int,int,int,int,int,int,Buffer
      +m:glTexSubImage2D:int,int,int,int,int,int,int,int,int
      +m:glTexSubImage3D:int,int,int,int,int,int,int,int,int,int,Buffer
      +m:glTexSubImage3D:int,int,int,int,int,int,int,int,int,int,int
      +m:glTransformFeedbackVaryings:int,String[],int
      +m:glUniform1f:int,float
      +m:glUniform1fv:int,int,FloatBuffer
      +m:glUniform1fv:int,int,float[],int
      +m:glUniform1i:int,int
      +m:glUniform1iv:int,int,IntBuffer
      +m:glUniform1iv:int,int,int[],int
      +m:glUniform1uiv:int,int,IntBuffer
      +m:glUniform2f:int,float,float
      +m:glUniform2fv:int,int,FloatBuffer
      +m:glUniform2fv:int,int,float[],int
      +m:glUniform2i:int,int,int
      +m:glUniform2iv:int,int,IntBuffer
      +m:glUniform2iv:int,int,int[],int
      +m:glUniform3f:int,float,float,float
      +m:glUniform3fv:int,int,FloatBuffer
      +m:glUniform3fv:int,int,float[],int
      +m:glUniform3i:int,int,int,int
      +m:glUniform3iv:int,int,IntBuffer
      +m:glUniform3iv:int,int,int[],int
      +m:glUniform3uiv:int,int,IntBuffer
      +m:glUniform4f:int,float,float,float,float
      +m:glUniform4fv:int,int,FloatBuffer
      +m:glUniform4fv:int,int,float[],int
      +m:glUniform4i:int,int,int,int,int
      +m:glUniform4iv:int,int,IntBuffer
      +m:glUniform4iv:int,int,int[],int
      +m:glUniform4uiv:int,int,IntBuffer
      +m:glUniformBlockBinding:int,int,int
      +m:glUniformMatrix2fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix2fv:int,int,boolean,float[],int
      +m:glUniformMatrix2x3fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix2x4fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix3fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix3fv:int,int,boolean,float[],int
      +m:glUniformMatrix3x2fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix3x4fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix4fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix4fv:int,int,boolean,float[],int
      +m:glUniformMatrix4x2fv:int,int,boolean,FloatBuffer
      +m:glUniformMatrix4x3fv:int,int,boolean,FloatBuffer
      +m:glUnmapBuffer:int
      +m:glUseProgram:int
      +m:glValidateProgram:int
      +m:glVertexAttrib1f:int,float
      +m:glVertexAttrib1fv:int,FloatBuffer
      +m:glVertexAttrib2f:int,float,float
      +m:glVertexAttrib2fv:int,FloatBuffer
      +m:glVertexAttrib3f:int,float,float,float
      +m:glVertexAttrib3fv:int,FloatBuffer
      +m:glVertexAttrib4f:int,float,float,float,float
      +m:glVertexAttrib4fv:int,FloatBuffer
      +m:glVertexAttribDivisor:int,int
      +m:glVertexAttribI4i:int,int,int,int,int
      +m:glVertexAttribI4ui:int,int,int,int,int
      +m:glVertexAttribIPointer:int,int,int,int,int
      +m:glVertexAttribPointer:int,int,int,boolean,int,Buffer
      +m:glVertexAttribPointer:int,int,int,boolean,int,int
      +m:glViewport:int,int,int,int
     }
     >c:GL31Interceptor{
      +x:GLProfiler,GL31
      +m:glActiveShaderProgram:int,int
      +m:glBindImageTexture:int,int,int,boolean,int,int,int
      +m:glBindProgramPipeline:int
      +m:glBindVertexBuffer:int,int,long,int
      +m:glCreateShaderProgramv:int,String[]
      +m:glDeleteProgramPipelines:int,IntBuffer
      +m:glDispatchCompute:int,int,int
      +m:glDispatchComputeIndirect:long
      +m:glDrawArraysIndirect:int,long
      +m:glDrawElementsIndirect:int,int,long
      +m:glFramebufferParameteri:int,int,int
      +m:glGenProgramPipelines:int,IntBuffer
      +m:glGetBooleani_v:int,int,IntBuffer
      +m:glGetFramebufferParameteriv:int,int,IntBuffer
      +m:glGetMultisamplefv:int,int,FloatBuffer
      +m:glGetProgramInterfaceiv:int,int,int,IntBuffer
      +m:glGetProgramPipelineInfoLog:int
      +m:glGetProgramPipelineiv:int,int,IntBuffer
      +m:glGetProgramResourceIndex:int,int,String
      +m:glGetProgramResourceLocation:int,int,String
      +m:glGetProgramResourceName:int,int,int
      +m:glGetProgramResourceiv:int,int,int,IntBuffer,IntBuffer,IntBuffer
      +m:glGetTexLevelParameterfv:int,int,int,FloatBuffer
      +m:glGetTexLevelParameteriv:int,int,int,IntBuffer
      +m:glIsProgramPipeline:int
      +m:glMemoryBarrier:int
      +m:glMemoryBarrierByRegion:int
      +m:glProgramUniform1f:int,int,float
      +m:glProgramUniform1fv:int,int,FloatBuffer
      +m:glProgramUniform1i:int,int,int
      +m:glProgramUniform1iv:int,int,IntBuffer
      +m:glProgramUniform1ui:int,int,int
      +m:glProgramUniform1uiv:int,int,IntBuffer
      +m:glProgramUniform2f:int,int,float,float
      +m:glProgramUniform2fv:int,int,FloatBuffer
      +m:glProgramUniform2i:int,int,int,int
      +m:glProgramUniform2iv:int,int,IntBuffer
      +m:glProgramUniform2ui:int,int,int,int
      +m:glProgramUniform2uiv:int,int,IntBuffer
      +m:glProgramUniform3f:int,int,float,float,float
      +m:glProgramUniform3fv:int,int,FloatBuffer
      +m:glProgramUniform3i:int,int,int,int,int
      +m:glProgramUniform3iv:int,int,IntBuffer
      +m:glProgramUniform3ui:int,int,int,int,int
      +m:glProgramUniform3uiv:int,int,IntBuffer
      +m:glProgramUniform4f:int,int,float,float,float,float
      +m:glProgramUniform4fv:int,int,FloatBuffer
      +m:glProgramUniform4i:int,int,int,int,int,int
      +m:glProgramUniform4iv:int,int,IntBuffer
      +m:glProgramUniform4ui:int,int,int,int,int,int
      +m:glProgramUniform4uiv:int,int,IntBuffer
      +m:glProgramUniformMatrix2fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix2x3fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix2x4fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix3fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix3x2fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix3x4fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix4fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix4x2fv:int,int,boolean,FloatBuffer
      +m:glProgramUniformMatrix4x3fv:int,int,boolean,FloatBuffer
      +m:glSampleMaski:int,int
      +m:glTexStorage2DMultisample:int,int,int,int,int,boolean
      +m:glUseProgramStages:int,int,int
      +m:glValidateProgramPipeline:int
      +m:glVertexAttribBinding:int,int
      +m:glVertexAttribFormat:int,int,int,boolean,int
      +m:glVertexAttribIFormat:int,int,int,int
      +m:glVertexBindingDivisor:int,int
     }
     >c:GL32Interceptor{
      +x:GLProfiler,GL32
      +m:glBlendBarrier:
      +m:glBlendEquationSeparatei:int,int,int
      +m:glBlendEquationi:int,int
      +m:glBlendFuncSeparatei:int,int,int,int,int
      +m:glBlendFunci:int,int,int
      +m:glColorMaski:int,boolean,boolean,boolean,boolean
      +m:glCopyImageSubData:int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
      +m:glDebugMessageCallback:DebugProc
      +m:glDebugMessageControl:int,int,int,IntBuffer,boolean
      +m:glDebugMessageInsert:int,int,int,int,String
      +m:glDisablei:int,int
      +m:glDrawElementsBaseVertex:int,int,int,Buffer,int
      +m:glDrawElementsInstancedBaseVertex:int,int,int,Buffer,int,int
      +m:glDrawElementsInstancedBaseVertex:int,int,int,int,int,int
      +m:glDrawRangeElementsBaseVertex:int,int,int,int,int,Buffer,int
      +m:glEnablei:int,int
      +m:glFramebufferTexture:int,int,int,int
      +m:glGetDebugMessageLog:int,IntBuffer,IntBuffer,IntBuffer,IntBuffer,IntBuffer,ByteBuffer
      +m:glGetGraphicsResetStatus:
      +m:glGetObjectLabel:int,int
      +m:glGetPointerv:int
      +m:glGetSamplerParameterIiv:int,int,IntBuffer
      +m:glGetSamplerParameterIuiv:int,int,IntBuffer
      +m:glGetTexParameterIiv:int,int,IntBuffer
      +m:glGetTexParameterIuiv:int,int,IntBuffer
      +m:glGetnUniformfv:int,int,FloatBuffer
      +m:glGetnUniformiv:int,int,IntBuffer
      +m:glGetnUniformuiv:int,int,IntBuffer
      +m:glIsEnabledi:int,int
      +m:glMinSampleShading:float
      +m:glObjectLabel:int,int,String
      +m:glPatchParameteri:int,int
      +m:glPopDebugGroup:
      +m:glPushDebugGroup:int,int,String
      +m:glReadnPixels:int,int,int,int,int,int,int,Buffer
      +m:glSamplerParameterIiv:int,int,IntBuffer
      +m:glSamplerParameterIuiv:int,int,IntBuffer
      +m:glTexBuffer:int,int,int
      +m:glTexBufferRange:int,int,int,int,int
      +m:glTexParameterIiv:int,int,IntBuffer
      +m:glTexParameterIuiv:int,int,IntBuffer
      +m:glTexStorage3DMultisample:int,int,int,int,int,int,boolean
     }
     >c:GLInterceptor{
      +m:resolveErrorNumber:int
      +m:getCalls:
      +m:getDrawCalls:
      +m:getShaderSwitches:
      +m:getTextureBindings:
      +m:getVertexCount:
      +m:reset:
     }
     >c:GLProfiler{
      +x:Graphics
      +m:disable:
      +m:enable:
      +m:getCalls:
      +m:getDrawCalls:
      +m:getListener:
      +m:getShaderSwitches:
      +m:getTextureBindings:
      +m:getVertexCount:
      +m:isEnabled:
      +m:reset:
      +m:setListener:GLErrorListener
     }
    }
    >c:CubemapData{
     +z
     +m:consumeCubemapData:
     +m:getHeight:
     +m:getWidth:
     +m:isManaged:
     +m:isPrepared:
     +m:prepare:
    }
    >c:Cursor{
     >c:SystemCursor{
      +f:AllResize
      +f:Arrow
      +f:Crosshair
      +f:Hand
      +f:HorizontalResize
      +f:Ibeam
      +f:NESWResize
      +f:NWSEResize
      +f:None
      +f:NotAllowed
      +f:VerticalResize
      +m:valueOf:String
      +m:values:
     }
     +z
    }
    >c:GL20{
     +z
     +f:GL_ACTIVE_ATTRIBUTES
     +f:GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
     +f:GL_ACTIVE_TEXTURE
     +f:GL_ACTIVE_UNIFORMS
     +f:GL_ACTIVE_UNIFORM_MAX_LENGTH
     +f:GL_ALIASED_LINE_WIDTH_RANGE
     +f:GL_ALIASED_POINT_SIZE_RANGE
     +f:GL_ALPHA
     +f:GL_ALPHA_BITS
     +f:GL_ALWAYS
     +f:GL_ARRAY_BUFFER
     +f:GL_ARRAY_BUFFER_BINDING
     +f:GL_ATTACHED_SHADERS
     +f:GL_BACK
     +f:GL_BLEND
     +f:GL_BLEND_COLOR
     +f:GL_BLEND_DST_ALPHA
     +f:GL_BLEND_DST_RGB
     +f:GL_BLEND_EQUATION
     +f:GL_BLEND_EQUATION_ALPHA
     +f:GL_BLEND_EQUATION_RGB
     +f:GL_BLEND_SRC_ALPHA
     +f:GL_BLEND_SRC_RGB
     +f:GL_BLUE_BITS
     +f:GL_BOOL
     +f:GL_BOOL_VEC2
     +f:GL_BOOL_VEC3
     +f:GL_BOOL_VEC4
     +f:GL_BUFFER_SIZE
     +f:GL_BUFFER_USAGE
     +f:GL_BYTE
     +f:GL_CCW
     +f:GL_CLAMP_TO_EDGE
     +f:GL_COLOR_ATTACHMENT0
     +f:GL_COLOR_BUFFER_BIT
     +f:GL_COLOR_CLEAR_VALUE
     +f:GL_COLOR_WRITEMASK
     +f:GL_COMPILE_STATUS
     +f:GL_COMPRESSED_TEXTURE_FORMATS
     +f:GL_CONSTANT_ALPHA
     +f:GL_CONSTANT_COLOR
     +f:GL_COVERAGE_BUFFER_BIT_NV
     +f:GL_CULL_FACE
     +f:GL_CULL_FACE_MODE
     +f:GL_CURRENT_PROGRAM
     +f:GL_CURRENT_VERTEX_ATTRIB
     +f:GL_CW
     +f:GL_DECR
     +f:GL_DECR_WRAP
     +f:GL_DELETE_STATUS
     +f:GL_DEPTH_ATTACHMENT
     +f:GL_DEPTH_BITS
     +f:GL_DEPTH_BUFFER_BIT
     +f:GL_DEPTH_CLEAR_VALUE
     +f:GL_DEPTH_COMPONENT16
     +f:GL_DEPTH_COMPONENT
     +f:GL_DEPTH_FUNC
     +f:GL_DEPTH_RANGE
     +f:GL_DEPTH_TEST
     +f:GL_DEPTH_WRITEMASK
     +f:GL_DITHER
     +f:GL_DONT_CARE
     +f:GL_DST_ALPHA
     +f:GL_DST_COLOR
     +f:GL_DYNAMIC_DRAW
     +f:GL_ELEMENT_ARRAY_BUFFER
     +f:GL_ELEMENT_ARRAY_BUFFER_BINDING
     +f:GL_EQUAL
     +f:GL_ES_VERSION_2_0
     +f:GL_EXTENSIONS
     +f:GL_FALSE
     +f:GL_FASTEST
     +f:GL_FIXED
     +f:GL_FLOAT
     +f:GL_FLOAT_MAT2
     +f:GL_FLOAT_MAT3
     +f:GL_FLOAT_MAT4
     +f:GL_FLOAT_VEC2
     +f:GL_FLOAT_VEC3
     +f:GL_FLOAT_VEC4
     +f:GL_FRAGMENT_SHADER
     +f:GL_FRAMEBUFFER
     +f:GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
     +f:GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
     +f:GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
     +f:GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
     +f:GL_FRAMEBUFFER_BINDING
     +f:GL_FRAMEBUFFER_COMPLETE
     +f:GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
     +f:GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
     +f:GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
     +f:GL_FRAMEBUFFER_UNSUPPORTED
     +f:GL_FRONT
     +f:GL_FRONT_AND_BACK
     +f:GL_FRONT_FACE
     +f:GL_FUNC_ADD
     +f:GL_FUNC_REVERSE_SUBTRACT
     +f:GL_FUNC_SUBTRACT
     +f:GL_GENERATE_MIPMAP
     +f:GL_GENERATE_MIPMAP_HINT
     +f:GL_GEQUAL
     +f:GL_GREATER
     +f:GL_GREEN_BITS
     +f:GL_HIGH_FLOAT
     +f:GL_HIGH_INT
     +f:GL_IMPLEMENTATION_COLOR_READ_FORMAT
     +f:GL_IMPLEMENTATION_COLOR_READ_TYPE
     +f:GL_INCR
     +f:GL_INCR_WRAP
     +f:GL_INFO_LOG_LENGTH
     +f:GL_INT
     +f:GL_INT_VEC2
     +f:GL_INT_VEC3
     +f:GL_INT_VEC4
     +f:GL_INVALID_ENUM
     +f:GL_INVALID_FRAMEBUFFER_OPERATION
     +f:GL_INVALID_OPERATION
     +f:GL_INVALID_VALUE
     +f:GL_INVERT
     +f:GL_KEEP
     +f:GL_LEQUAL
     +f:GL_LESS
     +f:GL_LINEAR
     +f:GL_LINEAR_MIPMAP_LINEAR
     +f:GL_LINEAR_MIPMAP_NEAREST
     +f:GL_LINES
     +f:GL_LINE_LOOP
     +f:GL_LINE_STRIP
     +f:GL_LINE_WIDTH
     +f:GL_LINK_STATUS
     +f:GL_LOW_FLOAT
     +f:GL_LOW_INT
     +f:GL_LUMINANCE
     +f:GL_LUMINANCE_ALPHA
     +f:GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_CUBE_MAP_TEXTURE_SIZE
     +f:GL_MAX_FRAGMENT_UNIFORM_VECTORS
     +f:GL_MAX_RENDERBUFFER_SIZE
     +f:GL_MAX_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
     +f:GL_MAX_TEXTURE_SIZE
     +f:GL_MAX_TEXTURE_UNITS
     +f:GL_MAX_VARYING_VECTORS
     +f:GL_MAX_VERTEX_ATTRIBS
     +f:GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_VERTEX_UNIFORM_VECTORS
     +f:GL_MAX_VIEWPORT_DIMS
     +f:GL_MEDIUM_FLOAT
     +f:GL_MEDIUM_INT
     +f:GL_MIRRORED_REPEAT
     +f:GL_NEAREST
     +f:GL_NEAREST_MIPMAP_LINEAR
     +f:GL_NEAREST_MIPMAP_NEAREST
     +f:GL_NEVER
     +f:GL_NICEST
     +f:GL_NONE
     +f:GL_NOTEQUAL
     +f:GL_NO_ERROR
     +f:GL_NUM_COMPRESSED_TEXTURE_FORMATS
     +f:GL_NUM_SHADER_BINARY_FORMATS
     +f:GL_ONE
     +f:GL_ONE_MINUS_CONSTANT_ALPHA
     +f:GL_ONE_MINUS_CONSTANT_COLOR
     +f:GL_ONE_MINUS_DST_ALPHA
     +f:GL_ONE_MINUS_DST_COLOR
     +f:GL_ONE_MINUS_SRC_ALPHA
     +f:GL_ONE_MINUS_SRC_COLOR
     +f:GL_OUT_OF_MEMORY
     +f:GL_PACK_ALIGNMENT
     +f:GL_POINTS
     +f:GL_POLYGON_OFFSET_FACTOR
     +f:GL_POLYGON_OFFSET_FILL
     +f:GL_POLYGON_OFFSET_UNITS
     +f:GL_RED_BITS
     +f:GL_RENDERBUFFER
     +f:GL_RENDERBUFFER_ALPHA_SIZE
     +f:GL_RENDERBUFFER_BINDING
     +f:GL_RENDERBUFFER_BLUE_SIZE
     +f:GL_RENDERBUFFER_DEPTH_SIZE
     +f:GL_RENDERBUFFER_GREEN_SIZE
     +f:GL_RENDERBUFFER_HEIGHT
     +f:GL_RENDERBUFFER_INTERNAL_FORMAT
     +f:GL_RENDERBUFFER_RED_SIZE
     +f:GL_RENDERBUFFER_STENCIL_SIZE
     +f:GL_RENDERBUFFER_WIDTH
     +f:GL_RENDERER
     +f:GL_REPEAT
     +f:GL_REPLACE
     +f:GL_RGB565
     +f:GL_RGB5_A1
     +f:GL_RGB
     +f:GL_RGBA4
     +f:GL_RGBA
     +f:GL_SAMPLER_2D
     +f:GL_SAMPLER_CUBE
     +f:GL_SAMPLES
     +f:GL_SAMPLE_ALPHA_TO_COVERAGE
     +f:GL_SAMPLE_BUFFERS
     +f:GL_SAMPLE_COVERAGE
     +f:GL_SAMPLE_COVERAGE_INVERT
     +f:GL_SAMPLE_COVERAGE_VALUE
     +f:GL_SCISSOR_BOX
     +f:GL_SCISSOR_TEST
     +f:GL_SHADER_BINARY_FORMATS
     +f:GL_SHADER_COMPILER
     +f:GL_SHADER_SOURCE_LENGTH
     +f:GL_SHADER_TYPE
     +f:GL_SHADING_LANGUAGE_VERSION
     +f:GL_SHORT
     +f:GL_SRC_ALPHA
     +f:GL_SRC_ALPHA_SATURATE
     +f:GL_SRC_COLOR
     +f:GL_STATIC_DRAW
     +f:GL_STENCIL_ATTACHMENT
     +f:GL_STENCIL_BACK_FAIL
     +f:GL_STENCIL_BACK_FUNC
     +f:GL_STENCIL_BACK_PASS_DEPTH_FAIL
     +f:GL_STENCIL_BACK_PASS_DEPTH_PASS
     +f:GL_STENCIL_BACK_REF
     +f:GL_STENCIL_BACK_VALUE_MASK
     +f:GL_STENCIL_BACK_WRITEMASK
     +f:GL_STENCIL_BITS
     +f:GL_STENCIL_BUFFER_BIT
     +f:GL_STENCIL_CLEAR_VALUE
     +f:GL_STENCIL_FAIL
     +f:GL_STENCIL_FUNC
     +f:GL_STENCIL_INDEX8
     +f:GL_STENCIL_INDEX
     +f:GL_STENCIL_PASS_DEPTH_FAIL
     +f:GL_STENCIL_PASS_DEPTH_PASS
     +f:GL_STENCIL_REF
     +f:GL_STENCIL_TEST
     +f:GL_STENCIL_VALUE_MASK
     +f:GL_STENCIL_WRITEMASK
     +f:GL_STREAM_DRAW
     +f:GL_SUBPIXEL_BITS
     +f:GL_TEXTURE0
     +f:GL_TEXTURE10
     +f:GL_TEXTURE11
     +f:GL_TEXTURE12
     +f:GL_TEXTURE13
     +f:GL_TEXTURE14
     +f:GL_TEXTURE15
     +f:GL_TEXTURE16
     +f:GL_TEXTURE17
     +f:GL_TEXTURE18
     +f:GL_TEXTURE19
     +f:GL_TEXTURE1
     +f:GL_TEXTURE20
     +f:GL_TEXTURE21
     +f:GL_TEXTURE22
     +f:GL_TEXTURE23
     +f:GL_TEXTURE24
     +f:GL_TEXTURE25
     +f:GL_TEXTURE26
     +f:GL_TEXTURE27
     +f:GL_TEXTURE28
     +f:GL_TEXTURE29
     +f:GL_TEXTURE2
     +f:GL_TEXTURE30
     +f:GL_TEXTURE31
     +f:GL_TEXTURE3
     +f:GL_TEXTURE4
     +f:GL_TEXTURE5
     +f:GL_TEXTURE6
     +f:GL_TEXTURE7
     +f:GL_TEXTURE8
     +f:GL_TEXTURE9
     +f:GL_TEXTURE
     +f:GL_TEXTURE_2D
     +f:GL_TEXTURE_BINDING_2D
     +f:GL_TEXTURE_BINDING_CUBE_MAP
     +f:GL_TEXTURE_CUBE_MAP
     +f:GL_TEXTURE_CUBE_MAP_NEGATIVE_X
     +f:GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
     +f:GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
     +f:GL_TEXTURE_CUBE_MAP_POSITIVE_X
     +f:GL_TEXTURE_CUBE_MAP_POSITIVE_Y
     +f:GL_TEXTURE_CUBE_MAP_POSITIVE_Z
     +f:GL_TEXTURE_MAG_FILTER
     +f:GL_TEXTURE_MAX_ANISOTROPY_EXT
     +f:GL_TEXTURE_MIN_FILTER
     +f:GL_TEXTURE_WRAP_S
     +f:GL_TEXTURE_WRAP_T
     +f:GL_TRIANGLES
     +f:GL_TRIANGLE_FAN
     +f:GL_TRIANGLE_STRIP
     +f:GL_TRUE
     +f:GL_UNPACK_ALIGNMENT
     +f:GL_UNSIGNED_BYTE
     +f:GL_UNSIGNED_INT
     +f:GL_UNSIGNED_SHORT
     +f:GL_UNSIGNED_SHORT_4_4_4_4
     +f:GL_UNSIGNED_SHORT_5_5_5_1
     +f:GL_UNSIGNED_SHORT_5_6_5
     +f:GL_VALIDATE_STATUS
     +f:GL_VENDOR
     +f:GL_VERSION
     +f:GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
     +f:GL_VERTEX_ATTRIB_ARRAY_ENABLED
     +f:GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
     +f:GL_VERTEX_ATTRIB_ARRAY_POINTER
     +f:GL_VERTEX_ATTRIB_ARRAY_SIZE
     +f:GL_VERTEX_ATTRIB_ARRAY_STRIDE
     +f:GL_VERTEX_ATTRIB_ARRAY_TYPE
     +f:GL_VERTEX_PROGRAM_POINT_SIZE
     +f:GL_VERTEX_SHADER
     +f:GL_VIEWPORT
     +f:GL_ZERO
     +m:glActiveTexture:int
     +m:glAttachShader:int,int
     +m:glBindAttribLocation:int,int,String
     +m:glBindBuffer:int,int
     +m:glBindFramebuffer:int,int
     +m:glBindRenderbuffer:int,int
     +m:glBindTexture:int,int
     +m:glBlendColor:float,float,float,float
     +m:glBlendEquation:int
     +m:glBlendEquationSeparate:int,int
     +m:glBlendFunc:int,int
     +m:glBlendFuncSeparate:int,int,int,int
     +m:glBufferData:int,int,Buffer,int
     +m:glBufferSubData:int,int,int,Buffer
     +m:glCheckFramebufferStatus:int
     +m:glClear:int
     +m:glClearColor:float,float,float,float
     +m:glClearDepthf:float
     +m:glClearStencil:int
     +m:glColorMask:boolean,boolean,boolean,boolean
     +m:glCompileShader:int
     +m:glCompressedTexImage2D:int,int,int,int,int,int,int,Buffer
     +m:glCompressedTexSubImage2D:int,int,int,int,int,int,int,int,Buffer
     +m:glCopyTexImage2D:int,int,int,int,int,int,int,int
     +m:glCopyTexSubImage2D:int,int,int,int,int,int,int,int
     +m:glCreateProgram:
     +m:glCreateShader:int
     +m:glCullFace:int
     +m:glDeleteBuffer:int
     +m:glDeleteBuffers:int,IntBuffer
     +m:glDeleteFramebuffer:int
     +m:glDeleteFramebuffers:int,IntBuffer
     +m:glDeleteProgram:int
     +m:glDeleteRenderbuffer:int
     +m:glDeleteRenderbuffers:int,IntBuffer
     +m:glDeleteShader:int
     +m:glDeleteTexture:int
     +m:glDeleteTextures:int,IntBuffer
     +m:glDepthFunc:int
     +m:glDepthMask:boolean
     +m:glDepthRangef:float,float
     +m:glDetachShader:int,int
     +m:glDisable:int
     +m:glDisableVertexAttribArray:int
     +m:glDrawArrays:int,int,int
     +m:glDrawElements:int,int,int,Buffer
     +m:glDrawElements:int,int,int,int
     +m:glEnable:int
     +m:glEnableVertexAttribArray:int
     +m:glFinish:
     +m:glFlush:
     +m:glFramebufferRenderbuffer:int,int,int,int
     +m:glFramebufferTexture2D:int,int,int,int,int
     +m:glFrontFace:int
     +m:glGenBuffer:
     +m:glGenBuffers:int,IntBuffer
     +m:glGenFramebuffer:
     +m:glGenFramebuffers:int,IntBuffer
     +m:glGenRenderbuffer:
     +m:glGenRenderbuffers:int,IntBuffer
     +m:glGenTexture:
     +m:glGenTextures:int,IntBuffer
     +m:glGenerateMipmap:int
     +m:glGetActiveAttrib:int,int,IntBuffer,IntBuffer
     +m:glGetActiveUniform:int,int,IntBuffer,IntBuffer
     +m:glGetAttachedShaders:int,int,Buffer,IntBuffer
     +m:glGetAttribLocation:int,String
     +m:glGetBooleanv:int,Buffer
     +m:glGetBufferParameteriv:int,int,IntBuffer
     +m:glGetError:
     +m:glGetFloatv:int,FloatBuffer
     +m:glGetFramebufferAttachmentParameteriv:int,int,int,IntBuffer
     +m:glGetIntegerv:int,IntBuffer
     +m:glGetProgramInfoLog:int
     +m:glGetProgramiv:int,int,IntBuffer
     +m:glGetRenderbufferParameteriv:int,int,IntBuffer
     +m:glGetShaderInfoLog:int
     +m:glGetShaderPrecisionFormat:int,int,IntBuffer,IntBuffer
     +m:glGetShaderiv:int,int,IntBuffer
     +m:glGetString:int
     +m:glGetTexParameterfv:int,int,FloatBuffer
     +m:glGetTexParameteriv:int,int,IntBuffer
     +m:glGetUniformLocation:int,String
     +m:glGetUniformfv:int,int,FloatBuffer
     +m:glGetUniformiv:int,int,IntBuffer
     +m:glGetVertexAttribPointerv:int,int,Buffer
     +m:glGetVertexAttribfv:int,int,FloatBuffer
     +m:glGetVertexAttribiv:int,int,IntBuffer
     +m:glHint:int,int
     +m:glIsBuffer:int
     +m:glIsEnabled:int
     +m:glIsFramebuffer:int
     +m:glIsProgram:int
     +m:glIsRenderbuffer:int
     +m:glIsShader:int
     +m:glIsTexture:int
     +m:glLineWidth:float
     +m:glLinkProgram:int
     +m:glPixelStorei:int,int
     +m:glPolygonOffset:float,float
     +m:glReadPixels:int,int,int,int,int,int,Buffer
     +m:glReleaseShaderCompiler:
     +m:glRenderbufferStorage:int,int,int,int
     +m:glSampleCoverage:float,boolean
     +m:glScissor:int,int,int,int
     +m:glShaderBinary:int,IntBuffer,int,Buffer,int
     +m:glShaderSource:int,String
     +m:glStencilFunc:int,int,int
     +m:glStencilFuncSeparate:int,int,int,int
     +m:glStencilMask:int
     +m:glStencilMaskSeparate:int,int
     +m:glStencilOp:int,int,int
     +m:glStencilOpSeparate:int,int,int,int
     +m:glTexImage2D:int,int,int,int,int,int,int,int,Buffer
     +m:glTexParameterf:int,int,float
     +m:glTexParameterfv:int,int,FloatBuffer
     +m:glTexParameteri:int,int,int
     +m:glTexParameteriv:int,int,IntBuffer
     +m:glTexSubImage2D:int,int,int,int,int,int,int,int,Buffer
     +m:glUniform1f:int,float
     +m:glUniform1fv:int,int,FloatBuffer
     +m:glUniform1fv:int,int,float[],int
     +m:glUniform1i:int,int
     +m:glUniform1iv:int,int,IntBuffer
     +m:glUniform1iv:int,int,int[],int
     +m:glUniform2f:int,float,float
     +m:glUniform2fv:int,int,FloatBuffer
     +m:glUniform2fv:int,int,float[],int
     +m:glUniform2i:int,int,int
     +m:glUniform2iv:int,int,IntBuffer
     +m:glUniform2iv:int,int,int[],int
     +m:glUniform3f:int,float,float,float
     +m:glUniform3fv:int,int,FloatBuffer
     +m:glUniform3fv:int,int,float[],int
     +m:glUniform3i:int,int,int,int
     +m:glUniform3iv:int,int,IntBuffer
     +m:glUniform3iv:int,int,int[],int
     +m:glUniform4f:int,float,float,float,float
     +m:glUniform4fv:int,int,FloatBuffer
     +m:glUniform4fv:int,int,float[],int
     +m:glUniform4i:int,int,int,int,int
     +m:glUniform4iv:int,int,IntBuffer
     +m:glUniform4iv:int,int,int[],int
     +m:glUniformMatrix2fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix2fv:int,int,boolean,float[],int
     +m:glUniformMatrix3fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix3fv:int,int,boolean,float[],int
     +m:glUniformMatrix4fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix4fv:int,int,boolean,float[],int
     +m:glUseProgram:int
     +m:glValidateProgram:int
     +m:glVertexAttrib1f:int,float
     +m:glVertexAttrib1fv:int,FloatBuffer
     +m:glVertexAttrib2f:int,float,float
     +m:glVertexAttrib2fv:int,FloatBuffer
     +m:glVertexAttrib3f:int,float,float,float
     +m:glVertexAttrib3fv:int,FloatBuffer
     +m:glVertexAttrib4f:int,float,float,float,float
     +m:glVertexAttrib4fv:int,FloatBuffer
     +m:glVertexAttribPointer:int,int,int,boolean,int,Buffer
     +m:glVertexAttribPointer:int,int,int,boolean,int,int
     +m:glViewport:int,int,int,int
    }
    >c:GL30{
     +z
     +f:GL_ACTIVE_UNIFORM_BLOCKS
     +f:GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
     +f:GL_ALREADY_SIGNALED
     +f:GL_ANY_SAMPLES_PASSED
     +f:GL_ANY_SAMPLES_PASSED_CONSERVATIVE
     +f:GL_BLUE
     +f:GL_BUFFER_ACCESS_FLAGS
     +f:GL_BUFFER_MAPPED
     +f:GL_BUFFER_MAP_LENGTH
     +f:GL_BUFFER_MAP_OFFSET
     +f:GL_BUFFER_MAP_POINTER
     +f:GL_COLOR
     +f:GL_COLOR_ATTACHMENT10
     +f:GL_COLOR_ATTACHMENT11
     +f:GL_COLOR_ATTACHMENT12
     +f:GL_COLOR_ATTACHMENT13
     +f:GL_COLOR_ATTACHMENT14
     +f:GL_COLOR_ATTACHMENT15
     +f:GL_COLOR_ATTACHMENT1
     +f:GL_COLOR_ATTACHMENT2
     +f:GL_COLOR_ATTACHMENT3
     +f:GL_COLOR_ATTACHMENT4
     +f:GL_COLOR_ATTACHMENT5
     +f:GL_COLOR_ATTACHMENT6
     +f:GL_COLOR_ATTACHMENT7
     +f:GL_COLOR_ATTACHMENT8
     +f:GL_COLOR_ATTACHMENT9
     +f:GL_COMPARE_REF_TO_TEXTURE
     +f:GL_COMPRESSED_R11_EAC
     +f:GL_COMPRESSED_RG11_EAC
     +f:GL_COMPRESSED_RGB8_ETC2
     +f:GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
     +f:GL_COMPRESSED_RGBA8_ETC2_EAC
     +f:GL_COMPRESSED_SIGNED_R11_EAC
     +f:GL_COMPRESSED_SIGNED_RG11_EAC
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
     +f:GL_COMPRESSED_SRGB8_ETC2
     +f:GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
     +f:GL_CONDITION_SATISFIED
     +f:GL_COPY_READ_BUFFER
     +f:GL_COPY_READ_BUFFER_BINDING
     +f:GL_COPY_WRITE_BUFFER
     +f:GL_COPY_WRITE_BUFFER_BINDING
     +f:GL_CURRENT_QUERY
     +f:GL_DEPTH24_STENCIL8
     +f:GL_DEPTH32F_STENCIL8
     +f:GL_DEPTH
     +f:GL_DEPTH_COMPONENT24
     +f:GL_DEPTH_COMPONENT32F
     +f:GL_DEPTH_STENCIL
     +f:GL_DEPTH_STENCIL_ATTACHMENT
     +f:GL_DRAW_BUFFER0
     +f:GL_DRAW_BUFFER10
     +f:GL_DRAW_BUFFER11
     +f:GL_DRAW_BUFFER12
     +f:GL_DRAW_BUFFER13
     +f:GL_DRAW_BUFFER14
     +f:GL_DRAW_BUFFER15
     +f:GL_DRAW_BUFFER1
     +f:GL_DRAW_BUFFER2
     +f:GL_DRAW_BUFFER3
     +f:GL_DRAW_BUFFER4
     +f:GL_DRAW_BUFFER5
     +f:GL_DRAW_BUFFER6
     +f:GL_DRAW_BUFFER7
     +f:GL_DRAW_BUFFER8
     +f:GL_DRAW_BUFFER9
     +f:GL_DRAW_FRAMEBUFFER
     +f:GL_DRAW_FRAMEBUFFER_BINDING
     +f:GL_DYNAMIC_COPY
     +f:GL_DYNAMIC_READ
     +f:GL_FLOAT_32_UNSIGNED_INT_24_8_REV
     +f:GL_FLOAT_MAT2x3
     +f:GL_FLOAT_MAT2x4
     +f:GL_FLOAT_MAT3x2
     +f:GL_FLOAT_MAT3x4
     +f:GL_FLOAT_MAT4x2
     +f:GL_FLOAT_MAT4x3
     +f:GL_FRAGMENT_SHADER_DERIVATIVE_HINT
     +f:GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
     +f:GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
     +f:GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
     +f:GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
     +f:GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
     +f:GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
     +f:GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
     +f:GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
     +f:GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
     +f:GL_FRAMEBUFFER_DEFAULT
     +f:GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
     +f:GL_FRAMEBUFFER_UNDEFINED
     +f:GL_GREEN
     +f:GL_HALF_FLOAT
     +f:GL_INTERLEAVED_ATTRIBS
     +f:GL_INT_2_10_10_10_REV
     +f:GL_INT_SAMPLER_2D
     +f:GL_INT_SAMPLER_2D_ARRAY
     +f:GL_INT_SAMPLER_3D
     +f:GL_INT_SAMPLER_CUBE
     +f:GL_INVALID_INDEX
     +f:GL_MAJOR_VERSION
     +f:GL_MAP_FLUSH_EXPLICIT_BIT
     +f:GL_MAP_INVALIDATE_BUFFER_BIT
     +f:GL_MAP_INVALIDATE_RANGE_BIT
     +f:GL_MAP_READ_BIT
     +f:GL_MAP_UNSYNCHRONIZED_BIT
     +f:GL_MAP_WRITE_BIT
     +f:GL_MAX
     +f:GL_MAX_3D_TEXTURE_SIZE
     +f:GL_MAX_ARRAY_TEXTURE_LAYERS
     +f:GL_MAX_COLOR_ATTACHMENTS
     +f:GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
     +f:GL_MAX_COMBINED_UNIFORM_BLOCKS
     +f:GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
     +f:GL_MAX_DRAW_BUFFERS
     +f:GL_MAX_ELEMENTS_INDICES
     +f:GL_MAX_ELEMENTS_VERTICES
     +f:GL_MAX_ELEMENT_INDEX
     +f:GL_MAX_FRAGMENT_INPUT_COMPONENTS
     +f:GL_MAX_FRAGMENT_UNIFORM_BLOCKS
     +f:GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
     +f:GL_MAX_PROGRAM_TEXEL_OFFSET
     +f:GL_MAX_SAMPLES
     +f:GL_MAX_SERVER_WAIT_TIMEOUT
     +f:GL_MAX_TEXTURE_LOD_BIAS
     +f:GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
     +f:GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
     +f:GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
     +f:GL_MAX_UNIFORM_BLOCK_SIZE
     +f:GL_MAX_UNIFORM_BUFFER_BINDINGS
     +f:GL_MAX_VARYING_COMPONENTS
     +f:GL_MAX_VERTEX_OUTPUT_COMPONENTS
     +f:GL_MAX_VERTEX_UNIFORM_BLOCKS
     +f:GL_MAX_VERTEX_UNIFORM_COMPONENTS
     +f:GL_MIN
     +f:GL_MINOR_VERSION
     +f:GL_MIN_PROGRAM_TEXEL_OFFSET
     +f:GL_NUM_EXTENSIONS
     +f:GL_NUM_PROGRAM_BINARY_FORMATS
     +f:GL_NUM_SAMPLE_COUNTS
     +f:GL_OBJECT_TYPE
     +f:GL_PACK_ROW_LENGTH
     +f:GL_PACK_SKIP_PIXELS
     +f:GL_PACK_SKIP_ROWS
     +f:GL_PIXEL_PACK_BUFFER
     +f:GL_PIXEL_PACK_BUFFER_BINDING
     +f:GL_PIXEL_UNPACK_BUFFER
     +f:GL_PIXEL_UNPACK_BUFFER_BINDING
     +f:GL_PRIMITIVE_RESTART_FIXED_INDEX
     +f:GL_PROGRAM_BINARY_FORMATS
     +f:GL_PROGRAM_BINARY_LENGTH
     +f:GL_PROGRAM_BINARY_RETRIEVABLE_HINT
     +f:GL_QUERY_RESULT
     +f:GL_QUERY_RESULT_AVAILABLE
     +f:GL_R11F_G11F_B10F
     +f:GL_R16F
     +f:GL_R16I
     +f:GL_R16UI
     +f:GL_R32F
     +f:GL_R32I
     +f:GL_R32UI
     +f:GL_R8
     +f:GL_R8I
     +f:GL_R8UI
     +f:GL_R8_SNORM
     +f:GL_RASTERIZER_DISCARD
     +f:GL_READ_BUFFER
     +f:GL_READ_FRAMEBUFFER
     +f:GL_READ_FRAMEBUFFER_BINDING
     +f:GL_RED
     +f:GL_RED_INTEGER
     +f:GL_RENDERBUFFER_SAMPLES
     +f:GL_RG16F
     +f:GL_RG16I
     +f:GL_RG16UI
     +f:GL_RG32F
     +f:GL_RG32I
     +f:GL_RG32UI
     +f:GL_RG8
     +f:GL_RG8I
     +f:GL_RG8UI
     +f:GL_RG8_SNORM
     +f:GL_RG
     +f:GL_RGB10_A2
     +f:GL_RGB10_A2UI
     +f:GL_RGB16F
     +f:GL_RGB16I
     +f:GL_RGB16UI
     +f:GL_RGB32F
     +f:GL_RGB32I
     +f:GL_RGB32UI
     +f:GL_RGB8
     +f:GL_RGB8I
     +f:GL_RGB8UI
     +f:GL_RGB8_SNORM
     +f:GL_RGB9_E5
     +f:GL_RGBA16F
     +f:GL_RGBA16I
     +f:GL_RGBA16UI
     +f:GL_RGBA32F
     +f:GL_RGBA32I
     +f:GL_RGBA32UI
     +f:GL_RGBA8
     +f:GL_RGBA8I
     +f:GL_RGBA8UI
     +f:GL_RGBA8_SNORM
     +f:GL_RGBA_INTEGER
     +f:GL_RGB_INTEGER
     +f:GL_RG_INTEGER
     +f:GL_SAMPLER_2D_ARRAY
     +f:GL_SAMPLER_2D_ARRAY_SHADOW
     +f:GL_SAMPLER_2D_SHADOW
     +f:GL_SAMPLER_3D
     +f:GL_SAMPLER_BINDING
     +f:GL_SAMPLER_CUBE_SHADOW
     +f:GL_SEPARATE_ATTRIBS
     +f:GL_SIGNALED
     +f:GL_SIGNED_NORMALIZED
     +f:GL_SRGB8
     +f:GL_SRGB8_ALPHA8
     +f:GL_SRGB
     +f:GL_STATIC_COPY
     +f:GL_STATIC_READ
     +f:GL_STENCIL
     +f:GL_STREAM_COPY
     +f:GL_STREAM_READ
     +f:GL_SYNC_CONDITION
     +f:GL_SYNC_FENCE
     +f:GL_SYNC_FLAGS
     +f:GL_SYNC_FLUSH_COMMANDS_BIT
     +f:GL_SYNC_GPU_COMMANDS_COMPLETE
     +f:GL_SYNC_STATUS
     +f:GL_TEXTURE_2D_ARRAY
     +f:GL_TEXTURE_3D
     +f:GL_TEXTURE_BASE_LEVEL
     +f:GL_TEXTURE_BINDING_2D_ARRAY
     +f:GL_TEXTURE_BINDING_3D
     +f:GL_TEXTURE_COMPARE_FUNC
     +f:GL_TEXTURE_COMPARE_MODE
     +f:GL_TEXTURE_IMMUTABLE_FORMAT
     +f:GL_TEXTURE_IMMUTABLE_LEVELS
     +f:GL_TEXTURE_MAX_LEVEL
     +f:GL_TEXTURE_MAX_LOD
     +f:GL_TEXTURE_MIN_LOD
     +f:GL_TEXTURE_SWIZZLE_A
     +f:GL_TEXTURE_SWIZZLE_B
     +f:GL_TEXTURE_SWIZZLE_G
     +f:GL_TEXTURE_SWIZZLE_R
     +f:GL_TEXTURE_WRAP_R
     +f:GL_TIMEOUT_EXPIRED
     +f:GL_TIMEOUT_IGNORED
     +f:GL_TRANSFORM_FEEDBACK
     +f:GL_TRANSFORM_FEEDBACK_ACTIVE
     +f:GL_TRANSFORM_FEEDBACK_BINDING
     +f:GL_TRANSFORM_FEEDBACK_BUFFER
     +f:GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
     +f:GL_TRANSFORM_FEEDBACK_BUFFER_MODE
     +f:GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
     +f:GL_TRANSFORM_FEEDBACK_BUFFER_START
     +f:GL_TRANSFORM_FEEDBACK_PAUSED
     +f:GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
     +f:GL_TRANSFORM_FEEDBACK_VARYINGS
     +f:GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
     +f:GL_UNIFORM_ARRAY_STRIDE
     +f:GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
     +f:GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
     +f:GL_UNIFORM_BLOCK_BINDING
     +f:GL_UNIFORM_BLOCK_DATA_SIZE
     +f:GL_UNIFORM_BLOCK_INDEX
     +f:GL_UNIFORM_BLOCK_NAME_LENGTH
     +f:GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
     +f:GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
     +f:GL_UNIFORM_BUFFER
     +f:GL_UNIFORM_BUFFER_BINDING
     +f:GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
     +f:GL_UNIFORM_BUFFER_SIZE
     +f:GL_UNIFORM_BUFFER_START
     +f:GL_UNIFORM_IS_ROW_MAJOR
     +f:GL_UNIFORM_MATRIX_STRIDE
     +f:GL_UNIFORM_NAME_LENGTH
     +f:GL_UNIFORM_OFFSET
     +f:GL_UNIFORM_SIZE
     +f:GL_UNIFORM_TYPE
     +f:GL_UNPACK_IMAGE_HEIGHT
     +f:GL_UNPACK_ROW_LENGTH
     +f:GL_UNPACK_SKIP_IMAGES
     +f:GL_UNPACK_SKIP_PIXELS
     +f:GL_UNPACK_SKIP_ROWS
     +f:GL_UNSIGNALED
     +f:GL_UNSIGNED_INT_10F_11F_11F_REV
     +f:GL_UNSIGNED_INT_24_8
     +f:GL_UNSIGNED_INT_2_10_10_10_REV
     +f:GL_UNSIGNED_INT_5_9_9_9_REV
     +f:GL_UNSIGNED_INT_SAMPLER_2D
     +f:GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
     +f:GL_UNSIGNED_INT_SAMPLER_3D
     +f:GL_UNSIGNED_INT_SAMPLER_CUBE
     +f:GL_UNSIGNED_INT_VEC2
     +f:GL_UNSIGNED_INT_VEC3
     +f:GL_UNSIGNED_INT_VEC4
     +f:GL_UNSIGNED_NORMALIZED
     +f:GL_VERTEX_ARRAY_BINDING
     +f:GL_VERTEX_ATTRIB_ARRAY_DIVISOR
     +f:GL_VERTEX_ATTRIB_ARRAY_INTEGER
     +f:GL_WAIT_FAILED
     +m:glBeginQuery:int,int
     +m:glBeginTransformFeedback:int
     +m:glBindBufferBase:int,int,int
     +m:glBindBufferRange:int,int,int,int,int
     +m:glBindSampler:int,int
     +m:glBindTransformFeedback:int,int
     +m:glBindVertexArray:int
     +m:glBlitFramebuffer:int,int,int,int,int,int,int,int,int,int
     +m:glClearBufferfi:int,int,float,int
     +m:glClearBufferfv:int,int,FloatBuffer
     +m:glClearBufferiv:int,int,IntBuffer
     +m:glClearBufferuiv:int,int,IntBuffer
     +m:glCopyBufferSubData:int,int,int,int,int
     +m:glCopyTexSubImage3D:int,int,int,int,int,int,int,int,int
     +m:glDeleteQueries:int,IntBuffer
     +m:glDeleteQueries:int,int[],int
     +m:glDeleteSamplers:int,IntBuffer
     +m:glDeleteSamplers:int,int[],int
     +m:glDeleteTransformFeedbacks:int,IntBuffer
     +m:glDeleteTransformFeedbacks:int,int[],int
     +m:glDeleteVertexArrays:int,IntBuffer
     +m:glDeleteVertexArrays:int,int[],int
     +m:glDrawArraysInstanced:int,int,int,int
     +m:glDrawBuffers:int,IntBuffer
     +m:glDrawElementsInstanced:int,int,int,int,int
     +m:glDrawRangeElements:int,int,int,int,int,Buffer
     +m:glDrawRangeElements:int,int,int,int,int,int
     +m:glEndQuery:int
     +m:glEndTransformFeedback:
     +m:glFlushMappedBufferRange:int,int,int
     +m:glFramebufferTextureLayer:int,int,int,int,int
     +m:glGenQueries:int,IntBuffer
     +m:glGenQueries:int,int[],int
     +m:glGenSamplers:int,IntBuffer
     +m:glGenSamplers:int,int[],int
     +m:glGenTransformFeedbacks:int,IntBuffer
     +m:glGenTransformFeedbacks:int,int[],int
     +m:glGenVertexArrays:int,IntBuffer
     +m:glGenVertexArrays:int,int[],int
     +m:glGetActiveUniformBlockName:int,int
     +m:glGetActiveUniformBlockName:int,int,Buffer,Buffer
     +m:glGetActiveUniformBlockiv:int,int,int,IntBuffer
     +m:glGetActiveUniformsiv:int,int,IntBuffer,int,IntBuffer
     +m:glGetBufferParameteri64v:int,int,LongBuffer
     +m:glGetBufferPointerv:int,int
     +m:glGetFragDataLocation:int,String
     +m:glGetInteger64v:int,LongBuffer
     +m:glGetQueryObjectuiv:int,int,IntBuffer
     +m:glGetQueryiv:int,int,IntBuffer
     +m:glGetSamplerParameterfv:int,int,FloatBuffer
     +m:glGetSamplerParameteriv:int,int,IntBuffer
     +m:glGetStringi:int,int
     +m:glGetUniformBlockIndex:int,String
     +m:glGetUniformIndices:int,String[],IntBuffer
     +m:glGetUniformuiv:int,int,IntBuffer
     +m:glGetVertexAttribIiv:int,int,IntBuffer
     +m:glGetVertexAttribIuiv:int,int,IntBuffer
     +m:glInvalidateFramebuffer:int,int,IntBuffer
     +m:glInvalidateSubFramebuffer:int,int,IntBuffer,int,int,int,int
     +m:glIsQuery:int
     +m:glIsSampler:int
     +m:glIsTransformFeedback:int
     +m:glIsVertexArray:int
     +m:glMapBufferRange:int,int,int,int
     +m:glPauseTransformFeedback:
     +m:glProgramParameteri:int,int,int
     +m:glReadBuffer:int
     +m:glRenderbufferStorageMultisample:int,int,int,int,int
     +m:glResumeTransformFeedback:
     +m:glSamplerParameterf:int,int,float
     +m:glSamplerParameterfv:int,int,FloatBuffer
     +m:glSamplerParameteri:int,int,int
     +m:glSamplerParameteriv:int,int,IntBuffer
     +m:glTexImage2D:int,int,int,int,int,int,int,int,int
     +m:glTexImage3D:int,int,int,int,int,int,int,int,int,Buffer
     +m:glTexImage3D:int,int,int,int,int,int,int,int,int,int
     +m:glTexSubImage2D:int,int,int,int,int,int,int,int,int
     +m:glTexSubImage3D:int,int,int,int,int,int,int,int,int,int,Buffer
     +m:glTexSubImage3D:int,int,int,int,int,int,int,int,int,int,int
     +m:glTransformFeedbackVaryings:int,String[],int
     +m:glUniform1uiv:int,int,IntBuffer
     +m:glUniform3uiv:int,int,IntBuffer
     +m:glUniform4uiv:int,int,IntBuffer
     +m:glUniformBlockBinding:int,int,int
     +m:glUniformMatrix2x3fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix2x4fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix3x2fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix3x4fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix4x2fv:int,int,boolean,FloatBuffer
     +m:glUniformMatrix4x3fv:int,int,boolean,FloatBuffer
     +m:glUnmapBuffer:int
     +m:glVertexAttribDivisor:int,int
     +m:glVertexAttribI4i:int,int,int,int,int
     +m:glVertexAttribI4ui:int,int,int,int,int
     +m:glVertexAttribIPointer:int,int,int,int,int
    }
    >c:GL31{
     +z
     +f:GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
     +f:GL_ACTIVE_PROGRAM
     +f:GL_ACTIVE_RESOURCES
     +f:GL_ACTIVE_VARIABLES
     +f:GL_ALL_BARRIER_BITS
     +f:GL_ALL_SHADER_BITS
     +f:GL_ARRAY_SIZE
     +f:GL_ARRAY_STRIDE
     +f:GL_ATOMIC_COUNTER_BARRIER_BIT
     +f:GL_ATOMIC_COUNTER_BUFFER
     +f:GL_ATOMIC_COUNTER_BUFFER_BINDING
     +f:GL_ATOMIC_COUNTER_BUFFER_INDEX
     +f:GL_ATOMIC_COUNTER_BUFFER_SIZE
     +f:GL_ATOMIC_COUNTER_BUFFER_START
     +f:GL_BLOCK_INDEX
     +f:GL_BUFFER_BINDING
     +f:GL_BUFFER_DATA_SIZE
     +f:GL_BUFFER_UPDATE_BARRIER_BIT
     +f:GL_BUFFER_VARIABLE
     +f:GL_COMMAND_BARRIER_BIT
     +f:GL_COMPUTE_SHADER
     +f:GL_COMPUTE_SHADER_BIT
     +f:GL_COMPUTE_WORK_GROUP_SIZE
     +f:GL_DEPTH_STENCIL_TEXTURE_MODE
     +f:GL_DISPATCH_INDIRECT_BUFFER
     +f:GL_DISPATCH_INDIRECT_BUFFER_BINDING
     +f:GL_DRAW_INDIRECT_BUFFER
     +f:GL_DRAW_INDIRECT_BUFFER_BINDING
     +f:GL_ELEMENT_ARRAY_BARRIER_BIT
     +f:GL_FRAGMENT_SHADER_BIT
     +f:GL_FRAMEBUFFER_BARRIER_BIT
     +f:GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
     +f:GL_FRAMEBUFFER_DEFAULT_HEIGHT
     +f:GL_FRAMEBUFFER_DEFAULT_SAMPLES
     +f:GL_FRAMEBUFFER_DEFAULT_WIDTH
     +f:GL_IMAGE_2D
     +f:GL_IMAGE_2D_ARRAY
     +f:GL_IMAGE_3D
     +f:GL_IMAGE_BINDING_ACCESS
     +f:GL_IMAGE_BINDING_FORMAT
     +f:GL_IMAGE_BINDING_LAYER
     +f:GL_IMAGE_BINDING_LAYERED
     +f:GL_IMAGE_BINDING_LEVEL
     +f:GL_IMAGE_BINDING_NAME
     +f:GL_IMAGE_CUBE
     +f:GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
     +f:GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
     +f:GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
     +f:GL_INT_IMAGE_2D
     +f:GL_INT_IMAGE_2D_ARRAY
     +f:GL_INT_IMAGE_3D
     +f:GL_INT_IMAGE_CUBE
     +f:GL_INT_SAMPLER_2D_MULTISAMPLE
     +f:GL_IS_ROW_MAJOR
     +f:GL_LOCATION
     +f:GL_MATRIX_STRIDE
     +f:GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
     +f:GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
     +f:GL_MAX_COLOR_TEXTURE_SAMPLES
     +f:GL_MAX_COMBINED_ATOMIC_COUNTERS
     +f:GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
     +f:GL_MAX_COMBINED_IMAGE_UNIFORMS
     +f:GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
     +f:GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
     +f:GL_MAX_COMPUTE_ATOMIC_COUNTERS
     +f:GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_COMPUTE_IMAGE_UNIFORMS
     +f:GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
     +f:GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
     +f:GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_COMPUTE_UNIFORM_BLOCKS
     +f:GL_MAX_COMPUTE_UNIFORM_COMPONENTS
     +f:GL_MAX_COMPUTE_WORK_GROUP_COUNT
     +f:GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
     +f:GL_MAX_COMPUTE_WORK_GROUP_SIZE
     +f:GL_MAX_DEPTH_TEXTURE_SAMPLES
     +f:GL_MAX_FRAGMENT_ATOMIC_COUNTERS
     +f:GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_FRAGMENT_IMAGE_UNIFORMS
     +f:GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
     +f:GL_MAX_FRAMEBUFFER_HEIGHT
     +f:GL_MAX_FRAMEBUFFER_SAMPLES
     +f:GL_MAX_FRAMEBUFFER_WIDTH
     +f:GL_MAX_IMAGE_UNITS
     +f:GL_MAX_INTEGER_SAMPLES
     +f:GL_MAX_NAME_LENGTH
     +f:GL_MAX_NUM_ACTIVE_VARIABLES
     +f:GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
     +f:GL_MAX_SAMPLE_MASK_WORDS
     +f:GL_MAX_SHADER_STORAGE_BLOCK_SIZE
     +f:GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
     +f:GL_MAX_UNIFORM_LOCATIONS
     +f:GL_MAX_VERTEX_ATOMIC_COUNTERS
     +f:GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_VERTEX_ATTRIB_BINDINGS
     +f:GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
     +f:GL_MAX_VERTEX_ATTRIB_STRIDE
     +f:GL_MAX_VERTEX_IMAGE_UNIFORMS
     +f:GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
     +f:GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
     +f:GL_NAME_LENGTH
     +f:GL_NUM_ACTIVE_VARIABLES
     +f:GL_OFFSET
     +f:GL_PIXEL_BUFFER_BARRIER_BIT
     +f:GL_PROGRAM_INPUT
     +f:GL_PROGRAM_OUTPUT
     +f:GL_PROGRAM_PIPELINE_BINDING
     +f:GL_PROGRAM_SEPARABLE
     +f:GL_READ_ONLY
     +f:GL_READ_WRITE
     +f:GL_REFERENCED_BY_COMPUTE_SHADER
     +f:GL_REFERENCED_BY_FRAGMENT_SHADER
     +f:GL_REFERENCED_BY_VERTEX_SHADER
     +f:GL_SAMPLER_2D_MULTISAMPLE
     +f:GL_SAMPLE_MASK
     +f:GL_SAMPLE_MASK_VALUE
     +f:GL_SAMPLE_POSITION
     +f:GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
     +f:GL_SHADER_STORAGE_BARRIER_BIT
     +f:GL_SHADER_STORAGE_BLOCK
     +f:GL_SHADER_STORAGE_BUFFER
     +f:GL_SHADER_STORAGE_BUFFER_BINDING
     +f:GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
     +f:GL_SHADER_STORAGE_BUFFER_SIZE
     +f:GL_SHADER_STORAGE_BUFFER_START
     +f:GL_STENCIL_INDEX
     +f:GL_TEXTURE_2D_MULTISAMPLE
     +f:GL_TEXTURE_ALPHA_SIZE
     +f:GL_TEXTURE_ALPHA_TYPE
     +f:GL_TEXTURE_BINDING_2D_MULTISAMPLE
     +f:GL_TEXTURE_BLUE_SIZE
     +f:GL_TEXTURE_BLUE_TYPE
     +f:GL_TEXTURE_COMPRESSED
     +f:GL_TEXTURE_DEPTH
     +f:GL_TEXTURE_DEPTH_SIZE
     +f:GL_TEXTURE_DEPTH_TYPE
     +f:GL_TEXTURE_FETCH_BARRIER_BIT
     +f:GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
     +f:GL_TEXTURE_GREEN_SIZE
     +f:GL_TEXTURE_GREEN_TYPE
     +f:GL_TEXTURE_HEIGHT
     +f:GL_TEXTURE_INTERNAL_FORMAT
     +f:GL_TEXTURE_RED_SIZE
     +f:GL_TEXTURE_RED_TYPE
     +f:GL_TEXTURE_SAMPLES
     +f:GL_TEXTURE_SHARED_SIZE
     +f:GL_TEXTURE_STENCIL_SIZE
     +f:GL_TEXTURE_UPDATE_BARRIER_BIT
     +f:GL_TEXTURE_WIDTH
     +f:GL_TOP_LEVEL_ARRAY_SIZE
     +f:GL_TOP_LEVEL_ARRAY_STRIDE
     +f:GL_TRANSFORM_FEEDBACK_BARRIER_BIT
     +f:GL_TRANSFORM_FEEDBACK_VARYING
     +f:GL_TYPE
     +f:GL_UNIFORM
     +f:GL_UNIFORM_BARRIER_BIT
     +f:GL_UNIFORM_BLOCK
     +f:GL_UNSIGNED_INT_ATOMIC_COUNTER
     +f:GL_UNSIGNED_INT_IMAGE_2D
     +f:GL_UNSIGNED_INT_IMAGE_2D_ARRAY
     +f:GL_UNSIGNED_INT_IMAGE_3D
     +f:GL_UNSIGNED_INT_IMAGE_CUBE
     +f:GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
     +f:GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
     +f:GL_VERTEX_ATTRIB_BINDING
     +f:GL_VERTEX_ATTRIB_RELATIVE_OFFSET
     +f:GL_VERTEX_BINDING_BUFFER
     +f:GL_VERTEX_BINDING_DIVISOR
     +f:GL_VERTEX_BINDING_OFFSET
     +f:GL_VERTEX_BINDING_STRIDE
     +f:GL_VERTEX_SHADER_BIT
     +f:GL_WRITE_ONLY
     +m:glActiveShaderProgram:int,int
     +m:glBindImageTexture:int,int,int,boolean,int,int,int
     +m:glBindProgramPipeline:int
     +m:glBindVertexBuffer:int,int,long,int
     +m:glCreateShaderProgramv:int,String[]
     +m:glDeleteProgramPipelines:int,IntBuffer
     +m:glDispatchCompute:int,int,int
     +m:glDispatchComputeIndirect:long
     +m:glDrawArraysIndirect:int,long
     +m:glDrawElementsIndirect:int,int,long
     +m:glFramebufferParameteri:int,int,int
     +m:glGenProgramPipelines:int,IntBuffer
     +m:glGetBooleani_v:int,int,IntBuffer
     +m:glGetFramebufferParameteriv:int,int,IntBuffer
     +m:glGetMultisamplefv:int,int,FloatBuffer
     +m:glGetProgramInterfaceiv:int,int,int,IntBuffer
     +m:glGetProgramPipelineInfoLog:int
     +m:glGetProgramPipelineiv:int,int,IntBuffer
     +m:glGetProgramResourceIndex:int,int,String
     +m:glGetProgramResourceLocation:int,int,String
     +m:glGetProgramResourceName:int,int,int
     +m:glGetProgramResourceiv:int,int,int,IntBuffer,IntBuffer,IntBuffer
     +m:glGetTexLevelParameterfv:int,int,int,FloatBuffer
     +m:glGetTexLevelParameteriv:int,int,int,IntBuffer
     +m:glIsProgramPipeline:int
     +m:glMemoryBarrier:int
     +m:glMemoryBarrierByRegion:int
     +m:glProgramUniform1f:int,int,float
     +m:glProgramUniform1fv:int,int,FloatBuffer
     +m:glProgramUniform1i:int,int,int
     +m:glProgramUniform1iv:int,int,IntBuffer
     +m:glProgramUniform1ui:int,int,int
     +m:glProgramUniform1uiv:int,int,IntBuffer
     +m:glProgramUniform2f:int,int,float,float
     +m:glProgramUniform2fv:int,int,FloatBuffer
     +m:glProgramUniform2i:int,int,int,int
     +m:glProgramUniform2iv:int,int,IntBuffer
     +m:glProgramUniform2ui:int,int,int,int
     +m:glProgramUniform2uiv:int,int,IntBuffer
     +m:glProgramUniform3f:int,int,float,float,float
     +m:glProgramUniform3fv:int,int,FloatBuffer
     +m:glProgramUniform3i:int,int,int,int,int
     +m:glProgramUniform3iv:int,int,IntBuffer
     +m:glProgramUniform3ui:int,int,int,int,int
     +m:glProgramUniform3uiv:int,int,IntBuffer
     +m:glProgramUniform4f:int,int,float,float,float,float
     +m:glProgramUniform4fv:int,int,FloatBuffer
     +m:glProgramUniform4i:int,int,int,int,int,int
     +m:glProgramUniform4iv:int,int,IntBuffer
     +m:glProgramUniform4ui:int,int,int,int,int,int
     +m:glProgramUniform4uiv:int,int,IntBuffer
     +m:glProgramUniformMatrix2fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix2x3fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix2x4fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix3fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix3x2fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix3x4fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix4fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix4x2fv:int,int,boolean,FloatBuffer
     +m:glProgramUniformMatrix4x3fv:int,int,boolean,FloatBuffer
     +m:glSampleMaski:int,int
     +m:glTexStorage2DMultisample:int,int,int,int,int,boolean
     +m:glUseProgramStages:int,int,int
     +m:glValidateProgramPipeline:int
     +m:glVertexAttribBinding:int,int
     +m:glVertexAttribFormat:int,int,int,boolean,int
     +m:glVertexAttribIFormat:int,int,int,int
     +m:glVertexBindingDivisor:int,int
    }
    >c:GL32{
     >c:DebugProc{
      +z
      +m:onMessage:int,int,int,int,String
     }
     +z
     +f:GL_BUFFER
     +f:GL_CLAMP_TO_BORDER
     +f:GL_COLORBURN
     +f:GL_COLORDODGE
     +f:GL_COMPRESSED_RGBA_ASTC_10x10
     +f:GL_COMPRESSED_RGBA_ASTC_10x5
     +f:GL_COMPRESSED_RGBA_ASTC_10x6
     +f:GL_COMPRESSED_RGBA_ASTC_10x8
     +f:GL_COMPRESSED_RGBA_ASTC_12x10
     +f:GL_COMPRESSED_RGBA_ASTC_12x12
     +f:GL_COMPRESSED_RGBA_ASTC_4x4
     +f:GL_COMPRESSED_RGBA_ASTC_5x4
     +f:GL_COMPRESSED_RGBA_ASTC_5x5
     +f:GL_COMPRESSED_RGBA_ASTC_6x5
     +f:GL_COMPRESSED_RGBA_ASTC_6x6
     +f:GL_COMPRESSED_RGBA_ASTC_8x5
     +f:GL_COMPRESSED_RGBA_ASTC_8x6
     +f:GL_COMPRESSED_RGBA_ASTC_8x8
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6
     +f:GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8
     +f:GL_CONTEXT_FLAGS
     +f:GL_CONTEXT_FLAG_DEBUG_BIT
     +f:GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
     +f:GL_CONTEXT_LOST
     +f:GL_DARKEN
     +f:GL_DEBUG_CALLBACK_FUNCTION
     +f:GL_DEBUG_CALLBACK_USER_PARAM
     +f:GL_DEBUG_GROUP_STACK_DEPTH
     +f:GL_DEBUG_LOGGED_MESSAGES
     +f:GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
     +f:GL_DEBUG_OUTPUT
     +f:GL_DEBUG_OUTPUT_SYNCHRONOUS
     +f:GL_DEBUG_SEVERITY_HIGH
     +f:GL_DEBUG_SEVERITY_LOW
     +f:GL_DEBUG_SEVERITY_MEDIUM
     +f:GL_DEBUG_SEVERITY_NOTIFICATION
     +f:GL_DEBUG_SOURCE_API
     +f:GL_DEBUG_SOURCE_APPLICATION
     +f:GL_DEBUG_SOURCE_OTHER
     +f:GL_DEBUG_SOURCE_SHADER_COMPILER
     +f:GL_DEBUG_SOURCE_THIRD_PARTY
     +f:GL_DEBUG_SOURCE_WINDOW_SYSTEM
     +f:GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
     +f:GL_DEBUG_TYPE_ERROR
     +f:GL_DEBUG_TYPE_MARKER
     +f:GL_DEBUG_TYPE_OTHER
     +f:GL_DEBUG_TYPE_PERFORMANCE
     +f:GL_DEBUG_TYPE_POP_GROUP
     +f:GL_DEBUG_TYPE_PORTABILITY
     +f:GL_DEBUG_TYPE_PUSH_GROUP
     +f:GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
     +f:GL_DIFFERENCE
     +f:GL_EXCLUSION
     +f:GL_FIRST_VERTEX_CONVENTION
     +f:GL_FRACTIONAL_EVEN
     +f:GL_FRACTIONAL_ODD
     +f:GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
     +f:GL_FRAMEBUFFER_ATTACHMENT_LAYERED
     +f:GL_FRAMEBUFFER_DEFAULT_LAYERS
     +f:GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
     +f:GL_GEOMETRY_INPUT_TYPE
     +f:GL_GEOMETRY_OUTPUT_TYPE
     +f:GL_GEOMETRY_SHADER
     +f:GL_GEOMETRY_SHADER_BIT
     +f:GL_GEOMETRY_SHADER_INVOCATIONS
     +f:GL_GEOMETRY_VERTICES_OUT
     +f:GL_GUILTY_CONTEXT_RESET
     +f:GL_HARDLIGHT
     +f:GL_HSL_COLOR
     +f:GL_HSL_HUE
     +f:GL_HSL_LUMINOSITY
     +f:GL_HSL_SATURATION
     +f:GL_IMAGE_BUFFER
     +f:GL_IMAGE_CUBE_MAP_ARRAY
     +f:GL_INNOCENT_CONTEXT_RESET
     +f:GL_INT_IMAGE_BUFFER
     +f:GL_INT_IMAGE_CUBE_MAP_ARRAY
     +f:GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
     +f:GL_INT_SAMPLER_BUFFER
     +f:GL_INT_SAMPLER_CUBE_MAP_ARRAY
     +f:GL_ISOLINES
     +f:GL_IS_PER_PATCH
     +f:GL_LAST_VERTEX_CONVENTION
     +f:GL_LAYER_PROVOKING_VERTEX
     +f:GL_LIGHTEN
     +f:GL_LINES_ADJACENCY
     +f:GL_LINE_STRIP_ADJACENCY
     +f:GL_LOSE_CONTEXT_ON_RESET
     +f:GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
     +f:GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
     +f:GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
     +f:GL_MAX_DEBUG_GROUP_STACK_DEPTH
     +f:GL_MAX_DEBUG_LOGGED_MESSAGES
     +f:GL_MAX_DEBUG_MESSAGE_LENGTH
     +f:GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
     +f:GL_MAX_FRAMEBUFFER_LAYERS
     +f:GL_MAX_GEOMETRY_ATOMIC_COUNTERS
     +f:GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_GEOMETRY_IMAGE_UNIFORMS
     +f:GL_MAX_GEOMETRY_INPUT_COMPONENTS
     +f:GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
     +f:GL_MAX_GEOMETRY_OUTPUT_VERTICES
     +f:GL_MAX_GEOMETRY_SHADER_INVOCATIONS
     +f:GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
     +f:GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
     +f:GL_MAX_GEOMETRY_UNIFORM_BLOCKS
     +f:GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
     +f:GL_MAX_LABEL_LENGTH
     +f:GL_MAX_PATCH_VERTICES
     +f:GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
     +f:GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
     +f:GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
     +f:GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
     +f:GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
     +f:GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
     +f:GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
     +f:GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
     +f:GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
     +f:GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
     +f:GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
     +f:GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
     +f:GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
     +f:GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
     +f:GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
     +f:GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
     +f:GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
     +f:GL_MAX_TESS_GEN_LEVEL
     +f:GL_MAX_TESS_PATCH_COMPONENTS
     +f:GL_MAX_TEXTURE_BUFFER_SIZE
     +f:GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
     +f:GL_MIN_SAMPLE_SHADING_VALUE
     +f:GL_MULTIPLY
     +f:GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY
     +f:GL_MULTISAMPLE_LINE_WIDTH_RANGE
     +f:GL_NO_RESET_NOTIFICATION
     +f:GL_OVERLAY
     +f:GL_PATCHES
     +f:GL_PATCH_VERTICES
     +f:GL_PRIMITIVES_GENERATED
     +f:GL_PRIMITIVE_BOUNDING_BOX
     +f:GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
     +f:GL_PROGRAM
     +f:GL_PROGRAM_PIPELINE
     +f:GL_QUADS
     +f:GL_QUERY
     +f:GL_REFERENCED_BY_GEOMETRY_SHADER
     +f:GL_REFERENCED_BY_TESS_CONTROL_SHADER
     +f:GL_REFERENCED_BY_TESS_EVALUATION_SHADER
     +f:GL_RESET_NOTIFICATION_STRATEGY
     +f:GL_SAMPLER
     +f:GL_SAMPLER_2D_MULTISAMPLE_ARRAY
     +f:GL_SAMPLER_BUFFER
     +f:GL_SAMPLER_CUBE_MAP_ARRAY
     +f:GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
     +f:GL_SAMPLE_SHADING
     +f:GL_SCREEN
     +f:GL_SHADER
     +f:GL_SOFTLIGHT
     +f:GL_STACK_OVERFLOW
     +f:GL_STACK_UNDERFLOW
     +f:GL_TESS_CONTROL_OUTPUT_VERTICES
     +f:GL_TESS_CONTROL_SHADER
     +f:GL_TESS_CONTROL_SHADER_BIT
     +f:GL_TESS_EVALUATION_SHADER
     +f:GL_TESS_EVALUATION_SHADER_BIT
     +f:GL_TESS_GEN_MODE
     +f:GL_TESS_GEN_POINT_MODE
     +f:GL_TESS_GEN_SPACING
     +f:GL_TESS_GEN_VERTEX_ORDER
     +f:GL_TEXTURE_2D_MULTISAMPLE_ARRAY
     +f:GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
     +f:GL_TEXTURE_BINDING_BUFFER
     +f:GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
     +f:GL_TEXTURE_BORDER_COLOR
     +f:GL_TEXTURE_BUFFER
     +f:GL_TEXTURE_BUFFER_BINDING
     +f:GL_TEXTURE_BUFFER_DATA_STORE_BINDING
     +f:GL_TEXTURE_BUFFER_OFFSET
     +f:GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
     +f:GL_TEXTURE_BUFFER_SIZE
     +f:GL_TEXTURE_CUBE_MAP_ARRAY
     +f:GL_TRIANGLES_ADJACENCY
     +f:GL_TRIANGLE_STRIP_ADJACENCY
     +f:GL_UNDEFINED_VERTEX
     +f:GL_UNKNOWN_CONTEXT_RESET
     +f:GL_UNSIGNED_INT_IMAGE_BUFFER
     +f:GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
     +f:GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
     +f:GL_UNSIGNED_INT_SAMPLER_BUFFER
     +f:GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
     +f:GL_VERTEX_ARRAY
     +m:glBlendBarrier:
     +m:glBlendEquationSeparatei:int,int,int
     +m:glBlendEquationi:int,int
     +m:glBlendFuncSeparatei:int,int,int,int,int
     +m:glBlendFunci:int,int,int
     +m:glColorMaski:int,boolean,boolean,boolean,boolean
     +m:glCopyImageSubData:int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
     +m:glDebugMessageCallback:DebugProc
     +m:glDebugMessageControl:int,int,int,IntBuffer,boolean
     +m:glDebugMessageInsert:int,int,int,int,String
     +m:glDisablei:int,int
     +m:glDrawElementsBaseVertex:int,int,int,Buffer,int
     +m:glDrawElementsInstancedBaseVertex:int,int,int,Buffer,int,int
     +m:glDrawElementsInstancedBaseVertex:int,int,int,int,int,int
     +m:glDrawRangeElementsBaseVertex:int,int,int,int,int,Buffer,int
     +m:glEnablei:int,int
     +m:glFramebufferTexture:int,int,int,int
     +m:glGetDebugMessageLog:int,IntBuffer,IntBuffer,IntBuffer,IntBuffer,IntBuffer,ByteBuffer
     +m:glGetGraphicsResetStatus:
     +m:glGetObjectLabel:int,int
     +m:glGetPointerv:int
     +m:glGetSamplerParameterIiv:int,int,IntBuffer
     +m:glGetSamplerParameterIuiv:int,int,IntBuffer
     +m:glGetTexParameterIiv:int,int,IntBuffer
     +m:glGetTexParameterIuiv:int,int,IntBuffer
     +m:glGetnUniformfv:int,int,FloatBuffer
     +m:glGetnUniformiv:int,int,IntBuffer
     +m:glGetnUniformuiv:int,int,IntBuffer
     +m:glIsEnabledi:int,int
     +m:glMinSampleShading:float
     +m:glObjectLabel:int,int,String
     +m:glPatchParameteri:int,int
     +m:glPopDebugGroup:
     +m:glPushDebugGroup:int,int,String
     +m:glReadnPixels:int,int,int,int,int,int,int,Buffer
     +m:glSamplerParameterIiv:int,int,IntBuffer
     +m:glSamplerParameterIuiv:int,int,IntBuffer
     +m:glTexBuffer:int,int,int
     +m:glTexBufferRange:int,int,int,int,int
     +m:glTexParameterIiv:int,int,IntBuffer
     +m:glTexParameterIuiv:int,int,IntBuffer
     +m:glTexStorage3DMultisample:int,int,int,int,int,int,boolean
    }
    >c:Texture3DData{
     +z
     +m:consume3DData:
     +m:getDepth:
     +m:getGLType:
     +m:getHeight:
     +m:getInternalFormat:
     +m:getWidth:
     +m:isManaged:
     +m:isPrepared:
     +m:prepare:
     +m:useMipMaps:
    }
    >c:TextureArrayData{
     >c:Factory{
      -x:
      -m:loadFromFiles:Format,boolean,FileHandle[]
     }
     +z
     +m:consumeTextureArrayData:
     +m:getDepth:
     +m:getGLType:
     +m:getHeight:
     +m:getInternalFormat:
     +m:getWidth:
     +m:isManaged:
     +m:isPrepared:
     +m:prepare:
    }
    >c:TextureData{
     -c:Factory
     >c:TextureDataType{
      +f:Custom
      +f:Pixmap
      +m:valueOf:String
      +m:values:
     }
     +z
     +m:consumeCustomData:int
     +m:consumePixmap:
     +m:disposePixmap:
     +m:getFormat:
     +m:getHeight:
     +m:getType:
     +m:getWidth:
     +m:isManaged:
     +m:isPrepared:
     +m:prepare:
     +m:useMipMaps:
    }
    >c:Camera{
     +f:combined
     +f:direction
     +f:far
     +f:frustum
     +f:invProjectionView
     +f:near
     +f:position
     +f:projection
     +f:up
     +f:view
     +f:viewportHeight
     +f:viewportWidth
     +m:getPickRay:float,float
     +m:getPickRay:float,float,float,float,float,float
     +m:lookAt:Vector3
     +m:lookAt:float,float,float
     +m:normalizeUp:
     +m:project:Vector3
     +m:project:Vector3,float,float,float,float
     +m:rotate:Matrix4
     +m:rotate:Quaternion
     +m:rotate:Vector3,float
     +m:rotate:float,float,float,float
     +m:rotateAround:Vector3,Vector3,float
     +m:transform:Matrix4
     +m:translate:Vector3
     +m:translate:float,float,float
     +m:unproject:Vector3
     +m:unproject:Vector3,float,float,float,float
     +m:update:
     +m:update:boolean
    }
    >c:Color{
     +x:
     +x:int
     +x:Color
     +x:float,float,float,float
     +f:BLACK
     +f:BLUE
     +f:BROWN
     +f:CHARTREUSE
     +f:CLEAR
     +f:CLEAR_WHITE
     +f:CORAL
     +f:CYAN
     +f:DARK_GRAY
     +f:FIREBRICK
     +f:FOREST
     +f:GOLD
     +f:GOLDENROD
     +f:GRAY
     +f:GREEN
     +f:LIGHT_GRAY
     +f:LIME
     +f:MAGENTA
     +f:MAROON
     +f:NAVY
     +f:OLIVE
     +f:ORANGE
     +f:PINK
     +f:PURPLE
     +f:RED
     +f:ROYAL
     +f:SALMON
     +f:SCARLET
     +f:SKY
     +f:SLATE
     +f:TAN
     +f:TEAL
     +f:VIOLET
     +f:WHITE
     +f:WHITE_FLOAT_BITS
     +f:YELLOW
     +f:a
     +f:b
     +f:g
     +f:r
     +m:abgr8888ToColor:Color,float
     +m:abgr8888ToColor:Color,int
     +m:alpha:float
     +m:argb8888:Color
     +m:argb8888:float,float,float,float
     +m:argb8888ToColor:Color,int
     +m:luminanceAlpha:float,float
     +m:rgb565:Color
     +m:rgb565:float,float,float
     +m:rgb565ToColor:Color,int
     +m:rgb888:Color
     +m:rgb888:float,float,float
     +m:rgb888ToColor:Color,int
     +m:rgba4444:Color
     +m:rgba4444:float,float,float,float
     +m:rgba4444ToColor:Color,int
     +m:rgba8888:Color
     +m:rgba8888:float,float,float,float
     +m:rgba8888ToColor:Color,int
     +m:toFloatBits:float,float,float,float
     +m:toFloatBits:int,int,int,int
     +m:toIntBits:int,int,int,int
     +m:valueOf:String
     +m:valueOf:String,Color
     +m:add:Color
     +m:add:float,float,float,float
     +m:clamp:
     +m:cpy:
     +m:equals:Object
     +m:fromHsv:float,float,float
     +m:fromHsv:float[]
     +m:hashCode:
     +m:lerp:Color,float
     +m:lerp:float,float,float,float,float
     +m:mul:Color
     +m:mul:float
     +m:mul:float,float,float,float
     +m:premultiplyAlpha:
     +m:set:Color
     +m:set:Color,float
     +m:set:float,float,float,float
     +m:set:int
     +m:sub:Color
     +m:sub:float,float,float,float
     +m:toFloatBits:
     +m:toHsv:float[]
     +m:toIntBits:
     +m:toString:
    }
    >c:Colors{
     +m:get:String
     +m:getColors:
     +m:put:String,Color
     +m:reset:
    }
    >c:Cubemap{
     >c:CubemapSide{
      +f:NegativeX
      +f:NegativeY
      +f:NegativeZ
      +f:PositiveX
      +f:PositiveY
      +f:PositiveZ
      +f:direction
      +f:glEnum
      +f:index
      +f:up
      +m:valueOf:String
      +m:values:
      +m:getDirection:Vector3
      +m:getGLEnum:
      +m:getUp:Vector3
     }
     +x:CubemapData
     +x:int,int,int,Format
     +x:Pixmap,Pixmap,Pixmap,Pixmap,Pixmap,Pixmap
     -x:FileHandle,FileHandle,FileHandle,FileHandle,FileHandle,FileHandle
     +x:TextureData,TextureData,TextureData,TextureData,TextureData,TextureData
     +x:Pixmap,Pixmap,Pixmap,Pixmap,Pixmap,Pixmap,boolean
     -x:FileHandle,FileHandle,FileHandle,FileHandle,FileHandle,FileHandle,boolean
     +m:clearAllCubemaps:Application
     +m:getManagedStatus:
     +m:getNumManagedCubemaps:
     +m:invalidateAllCubemaps:Application
     -m:setAssetManager:AssetManager
     +m:dispose:
     +m:getCubemapData:
     +m:getDepth:
     +m:getHeight:
     +m:getWidth:
     +m:isManaged:
     +m:load:CubemapData
    }
    >c:FPSLogger{
     +x:
     +x:int
     +m:log:
    }
    >c:GLTexture{
     +f:glTarget
     +m:getMaxAnisotropicFilterLevel:
     +m:uploadImageData:int,TextureData,int
     +m:bind:
     +m:bind:int
     +m:dispose:
     +m:getAnisotropicFilter:
     +m:getDepth:
     +m:getHeight:
     +m:getMagFilter:
     +m:getMinFilter:
     +m:getTextureObjectHandle:
     +m:getUWrap:
     +m:getVWrap:
     +m:getWidth:
     +m:isManaged:
     +m:setAnisotropicFilter:float
     +m:setFilter:TextureFilter,TextureFilter
     +m:setWrap:TextureWrap,TextureWrap
     +m:unsafeSetAnisotropicFilter:float
     +m:unsafeSetAnisotropicFilter:float,boolean
     +m:unsafeSetFilter:TextureFilter,TextureFilter
     +m:unsafeSetFilter:TextureFilter,TextureFilter,boolean
     +m:unsafeSetWrap:TextureWrap,TextureWrap
     +m:unsafeSetWrap:TextureWrap,TextureWrap,boolean
    }
    >c:Mesh{
     >c:VertexDataType{
      +f:VertexArray
      +f:VertexBufferObject
      +f:VertexBufferObjectSubData
      +f:VertexBufferObjectWithVAO
      +m:valueOf:String
      +m:values:
     }
     +x:boolean,int,int,VertexAttributes
     +x:boolean,int,int,VertexAttribute[]
     +x:boolean,boolean,int,int,VertexAttributes
     +x:VertexDataType,boolean,int,int,VertexAttributes
     +x:VertexDataType,boolean,int,int,VertexAttribute[]
     +m:clearAllMeshes:Application
     +m:getManagedStatus:
     +m:invalidateAllMeshes:Application
     +m:transform:Matrix4,float[],int,int,int,int,int
     +m:transformUV:Matrix3,float[],int,int,int,int
     +m:bind:ShaderProgram
     +m:bind:ShaderProgram,int[],int[]
     +m:calculateBoundingBox:
     +m:calculateBoundingBox:BoundingBox
     +m:calculateBoundingBox:BoundingBox,int,int
     +m:calculateBoundingBox:BoundingBox,int,int,Matrix4
     +m:calculateRadius:Vector3
     +m:calculateRadius:Vector3,int,int
     +m:calculateRadius:Vector3,int,int,Matrix4
     +m:calculateRadius:float,float,float
     +m:calculateRadius:float,float,float,int,int
     +m:calculateRadius:float,float,float,int,int,Matrix4
     +m:calculateRadiusSquared:float,float,float,int,int,Matrix4
     +m:copy:boolean
     +m:copy:boolean,boolean,int[]
     +m:disableInstancedRendering:
     +m:dispose:
     +m:enableInstancedRendering:boolean,int,VertexAttribute[]
     +m:extendBoundingBox:BoundingBox,int,int
     +m:extendBoundingBox:BoundingBox,int,int,Matrix4
     +m:getIndices:int,int,short[],int
     +m:getIndices:int,short[],int
     +m:getIndices:short[]
     +m:getIndices:short[],int
     +m:getIndicesBuffer:boolean
     +m:getInstancedAttributes:
     +m:getMaxIndices:
     +m:getMaxVertices:
     +m:getNumIndices:
     +m:getNumVertices:
     +m:getVertexAttribute:int
     +m:getVertexAttributes:
     +m:getVertexSize:
     +m:getVertices:float[]
     +m:getVertices:int,float[]
     +m:getVertices:int,int,float[]
     +m:getVertices:int,int,float[],int
     +m:getVerticesBuffer:boolean
     +m:isInstanced:
     +m:render:ShaderProgram,int
     +m:render:ShaderProgram,int,int,int
     +m:render:ShaderProgram,int,int,int,boolean
     +m:scale:float,float,float
     +m:setAutoBind:boolean
     +m:setIndices:short[]
     +m:setIndices:short[],int,int
     +m:setInstanceData:FloatBuffer
     +m:setInstanceData:FloatBuffer,int
     +m:setInstanceData:float[]
     +m:setInstanceData:float[],int,int
     +m:setVertices:float[]
     +m:setVertices:float[],int,int
     +m:transform:Matrix4
     +m:transform:Matrix4,int,int
     +m:transformUV:Matrix3
     +m:unbind:ShaderProgram
     +m:unbind:ShaderProgram,int[],int[]
     +m:updateInstanceData:int,FloatBuffer
     +m:updateInstanceData:int,FloatBuffer,int,int
     +m:updateInstanceData:int,float[]
     +m:updateInstanceData:int,float[],int,int
     +m:updateVertices:int,float[]
     +m:updateVertices:int,float[],int,int
    }
    >c:OrthographicCamera{
     +x:
     +x:float,float
     +f:zoom
     +m:rotate:float
     +m:setToOrtho:boolean
     +m:setToOrtho:boolean,float,float
     +m:translate:Vector2
     +m:translate:float,float
     +m:update:
     +m:update:boolean
    }
    >c:PerspectiveCamera{
     +x:
     +x:float,float,float
     +f:fieldOfView
     +m:update:
     +m:update:boolean
    }
    >c:Pixmap{
     -c:DownloadPixmapResponseListener
     >c:Blending{
      +f:None
      +f:SourceOver
      +m:valueOf:String
      +m:values:
     }
     >c:Filter{
      +f:BiLinear
      +f:NearestNeighbour
      +m:valueOf:String
      +m:values:
     }
     >c:Format{
      +f:Alpha
      +f:Intensity
      +f:LuminanceAlpha
      +f:RGB565
      +f:RGB888
      +f:RGBA4444
      +f:RGBA8888
      +m:fromGdx2DPixmapFormat:int
      +m:toGdx2DPixmapFormat:Format
      +m:toGlFormat:Format
      +m:toGlType:Format
      +m:valueOf:String
      +m:values:
     }
     +x:ByteBuffer
     -x:FileHandle
     +x:Gdx2DPixmap
     +x:int,int,Format
     +x:byte[],int,int
     +x:ByteBuffer,int,int
     +m:createFromFrameBuffer:int,int,int,int
     -m:downloadFromUrl:String,DownloadPixmapResponseListener
     +m:dispose:
     +m:drawCircle:int,int,int
     +m:drawLine:int,int,int,int
     +m:drawPixel:int,int
     +m:drawPixel:int,int,int
     +m:drawPixmap:Pixmap,int,int
     +m:drawPixmap:Pixmap,int,int,int,int,int,int
     +m:drawPixmap:Pixmap,int,int,int,int,int,int,int,int
     +m:drawRectangle:int,int,int,int
     +m:fill:
     +m:fillCircle:int,int,int
     +m:fillRectangle:int,int,int,int
     +m:fillTriangle:int,int,int,int,int,int
     +m:getBlending:
     +m:getFilter:
     +m:getFormat:
     +m:getGLFormat:
     +m:getGLInternalFormat:
     +m:getGLType:
     +m:getHeight:
     +m:getPixel:int,int
     +m:getPixels:
     +m:getWidth:
     +m:isDisposed:
     +m:setBlending:Blending
     +m:setColor:Color
     +m:setColor:float,float,float,float
     +m:setColor:int
     +m:setFilter:Filter
     +m:setPixels:ByteBuffer
    }
    -c:PixmapIO
    >c:Texture{
     >c:TextureFilter{
      +f:Linear
      +f:MipMap
      +f:MipMapLinearLinear
      +f:MipMapLinearNearest
      +f:MipMapNearestLinear
      +f:MipMapNearestNearest
      +f:Nearest
      +m:valueOf:String
      +m:values:
      +m:getGLEnum:
      +m:isMipMap:
     }
     >c:TextureWrap{
      +f:ClampToEdge
      +f:MirroredRepeat
      +f:Repeat
      +m:valueOf:String
      +m:values:
      +m:getGLEnum:
     }
     +x:Pixmap
     +x:String
     -x:FileHandle
     +x:TextureData
     +x:Pixmap,boolean
     -x:FileHandle,boolean
     +x:int,int,Format
     +x:Pixmap,Format,boolean
     -x:FileHandle,Format,boolean
     +m:clearAllTextures:Application
     +m:getManagedStatus:
     +m:getNumManagedTextures:
     +m:invalidateAllTextures:Application
     -m:setAssetManager:AssetManager
     +m:dispose:
     +m:draw:Pixmap,int,int
     +m:getDepth:
     +m:getHeight:
     +m:getTextureData:
     +m:getWidth:
     +m:isManaged:
     +m:load:TextureData
     +m:toString:
    }
    >c:Texture3D{
     +x:Texture3DData
     +x:int,int,int,int,int,int
     +m:clearAllTextureArrays:Application
     +m:getManagedStatus:
     +m:getNumManagedTextures3D:
     +m:invalidateAllTextureArrays:Application
     +m:getData:
     +m:getDepth:
     +m:getHeight:
     +m:getWidth:
     +m:isManaged:
     +m:setWrap:TextureWrap,TextureWrap,TextureWrap
     +m:unsafeSetWrap:TextureWrap,TextureWrap,TextureWrap
     +m:unsafeSetWrap:TextureWrap,TextureWrap,TextureWrap,boolean
     +m:upload:
    }
    >c:TextureArray{
     +x:String[]
     -x:FileHandle[]
     +x:TextureArrayData
     -x:boolean,FileHandle[]
     -x:boolean,Format,FileHandle[]
     +m:clearAllTextureArrays:Application
     +m:getManagedStatus:
     +m:getNumManagedTextureArrays:
     +m:invalidateAllTextureArrays:Application
     +m:getDepth:
     +m:getHeight:
     +m:getWidth:
     +m:isManaged:
    }
    >c:VertexAttribute{
     +x:int,int,String
     +x:int,int,String,int
     +x:int,int,int,boolean,String
     +x:int,int,int,boolean,String,int
     +f:alias
     +f:normalized
     +f:numComponents
     +f:offset
     +f:type
     +f:unit
     +f:usage
     +m:Binormal:
     +m:BoneWeight:int
     +m:ColorPacked:
     +m:ColorUnpacked:
     +m:Normal:
     +m:Position:
     +m:Tangent:
     +m:TexCoords:int
     +m:copy:
     +m:equals:Object
     +m:equals:VertexAttribute
     +m:getKey:
     +m:getSizeInBytes:
     +m:hashCode:
    }
    >c:VertexAttributes{
     >c:Usage{
      +x:
      +f:BiNormal
      +f:BoneWeight
      +f:ColorPacked
      +f:ColorUnpacked
      +f:Generic
      +f:Normal
      +f:Position
      +f:Tangent
      +f:TextureCoordinates
     }
     +x:VertexAttribute[]
     +f:vertexSize
     +m:compareTo:Object
     +m:compareTo:VertexAttributes
     +m:equals:Object
     +m:findByUsage:int
     +m:get:int
     +m:getBoneWeights:
     +m:getMask:
     +m:getMaskWithSizePacked:
     +m:getOffset:int
     +m:getOffset:int,int
     +m:getTextureCoordinates:
     +m:hashCode:
     +m:iterator:
     +m:size:
     +m:toString:
    }
   }
   >p:input{
    >c:TextInputWrapper{
     +z
     +m:getSelectionEnd:
     +m:getSelectionStart:
     +m:getText:
     +m:setPosition:int
     +m:setText:String
     +m:shouldClose:
    }
    >c:GestureDetector{
     >c:GestureListener{
      +z
      +m:fling:float,float,int
      +m:longPress:float,float
      +m:pan:float,float,float,float
      +m:panStop:float,float,int,int
      +m:pinch:Vector2,Vector2,Vector2,Vector2
      +m:pinchStop:
      +m:tap:float,float,int,int
      +m:touchDown:float,float,int,int
      +m:zoom:float,float
     }
     >c:GestureAdapter{
      +x:
      +m:fling:float,float,int
      +m:longPress:float,float
      +m:pan:float,float,float,float
      +m:panStop:float,float,int,int
      +m:pinch:Vector2,Vector2,Vector2,Vector2
      +m:pinchStop:
      +m:tap:float,float,int,int
      +m:touchDown:float,float,int,int
      +m:zoom:float,float
     }
     +x:GestureListener
     +x:float,float,float,float,GestureListener
     +x:float,float,float,float,float,GestureListener
     +m:cancel:
     +m:invalidateTapSquare:
     +m:isLongPressed:
     +m:isLongPressed:float
     +m:isPanning:
     +m:reset:
     +m:setLongPressSeconds:float
     +m:setMaxFlingDelay:long
     +m:setTapCountInterval:float
     +m:setTapRectangleSize:float,float
     +m:setTapSquareSize:float
     +m:touchCancelled:int,int,int,int
     +m:touchDown:float,float,int,int
     +m:touchDown:int,int,int,int
     +m:touchDragged:float,float,int
     +m:touchDragged:int,int,int
     +m:touchUp:float,float,int,int
     +m:touchUp:int,int,int,int
    }
    >c:NativeInputConfiguration{
     +x:
     +m:getAutoComplete:
     +m:getMaxLength:
     +m:getPlaceholder:
     +m:getTextInputWrapper:
     +m:getType:
     +m:getValidator:
     +m:isMultiLine:
     +m:isPreventCorrection:
     +m:isShowPasswordButton:
     +m:setAutoComplete:String[]
     +m:setMaxLength:Integer
     +m:setMultiLine:boolean
     +m:setPlaceholder:String
     +m:setPreventCorrection:boolean
     +m:setShowPasswordButton:boolean
     +m:setTextInputWrapper:TextInputWrapper
     +m:setType:OnscreenKeyboardType
     +m:setValidator:InputStringValidator
     +m:validate:
    }
    -c:RemoteInput
    -c:RemoteSender
   }
   >p:maps{
    >p:objects{
     >c:CircleMapObject{
      +x:
      +x:float,float,float
      +m:getCircle:
     }
     >c:EllipseMapObject{
      +x:
      +x:float,float,float,float
      +m:getEllipse:
     }
     >c:PolygonMapObject{
      +x:
      +x:Polygon
      +x:float[]
      +m:getPolygon:
      +m:setPolygon:Polygon
     }
     >c:PolylineMapObject{
      +x:
      +x:float[]
      +x:Polyline
      +m:getPolyline:
      +m:setPolyline:Polyline
     }
     >c:RectangleMapObject{
      +x:
      +x:float,float,float,float
      +m:getRectangle:
     }
     >c:TextureMapObject{
      +x:
      +x:TextureRegion
      +m:getOriginX:
      +m:getOriginY:
      +m:getRotation:
      +m:getScaleX:
      +m:getScaleY:
      +m:getTextureRegion:
      +m:getX:
      +m:getY:
      +m:setOriginX:float
      +m:setOriginY:float
      +m:setRotation:float
      +m:setScaleX:float
      +m:setScaleY:float
      +m:setTextureRegion:TextureRegion
      +m:setX:float
      +m:setY:float
     }
    }
    -p:tiled
    -c:ImageResolver
    >c:MapRenderer{
     +z
     +m:render:
     +m:render:int[]
     +m:setView:Matrix4,float,float,float,float
     +m:setView:OrthographicCamera
    }
    >c:Map{
     +x:
     +m:dispose:
     +m:getLayers:
     +m:getProperties:
    }
    >c:MapGroupLayer{
     +x:
     +m:getLayers:
     +m:invalidateRenderOffset:
    }
    >c:MapLayer{
     +x:
     +m:getName:
     +m:getObjects:
     +m:getOffsetX:
     +m:getOffsetY:
     +m:getOpacity:
     +m:getParallaxX:
     +m:getParallaxY:
     +m:getParent:
     +m:getProperties:
     +m:getRenderOffsetX:
     +m:getRenderOffsetY:
     +m:invalidateRenderOffset:
     +m:isVisible:
     +m:setName:String
     +m:setOffsetX:float
     +m:setOffsetY:float
     +m:setOpacity:float
     +m:setParallaxX:float
     +m:setParallaxY:float
     +m:setParent:MapLayer
     +m:setVisible:boolean
    }
    >c:MapLayers{
     +x:
     +m:add:MapLayer
     +m:get:String
     +m:get:int
     +m:getByType:Class
     +m:getByType:Class,Array
     +m:getCount:
     +m:getIndex:MapLayer
     +m:getIndex:String
     +m:iterator:
     +m:remove:MapLayer
     +m:remove:int
     +m:size:
    }
    >c:MapObject{
     +x:
     +m:getColor:
     +m:getName:
     +m:getOpacity:
     +m:getProperties:
     +m:isVisible:
     +m:setColor:Color
     +m:setName:String
     +m:setOpacity:float
     +m:setVisible:boolean
    }
    >c:MapObjects{
     +x:
     +m:add:MapObject
     +m:get:String
     +m:get:int
     +m:getByType:Class
     +m:getByType:Class,Array
     +m:getCount:
     +m:getIndex:MapObject
     +m:getIndex:String
     +m:iterator:
     +m:remove:MapObject
     +m:remove:int
    }
    >c:MapProperties{
     +x:
     +m:clear:
     +m:containsKey:String
     +m:get:String
     +m:get:String,Class
     +m:get:String,Object,Class
     +m:getKeys:
     +m:getValues:
     +m:put:String,Object
     +m:putAll:MapProperties
     +m:remove:String
    }
   }
   >p:math{
    >p:collision{
     >c:BoundingBox{
      +x:
      +x:BoundingBox
      +x:Vector3,Vector3
      +f:max
      +f:min
      +m:clr:
      +m:contains:BoundingBox
      +m:contains:OrientedBoundingBox
      +m:contains:Vector3
      +m:ext:BoundingBox
      +m:ext:BoundingBox,Matrix4
      +m:ext:Vector3
      +m:ext:Vector3,float
      +m:ext:float,float,float
      +m:getCenter:Vector3
      +m:getCenterX:
      +m:getCenterY:
      +m:getCenterZ:
      +m:getCorner000:Vector3
      +m:getCorner001:Vector3
      +m:getCorner010:Vector3
      +m:getCorner011:Vector3
      +m:getCorner100:Vector3
      +m:getCorner101:Vector3
      +m:getCorner110:Vector3
      +m:getCorner111:Vector3
      +m:getDepth:
      +m:getDimensions:Vector3
      +m:getHeight:
      +m:getMax:Vector3
      +m:getMin:Vector3
      +m:getWidth:
      +m:inf:
      +m:intersects:BoundingBox
      +m:isValid:
      +m:mul:Matrix4
      +m:set:BoundingBox
      +m:set:List
      +m:set:Vector3,Vector3
      +m:set:Vector3[]
      +m:toString:
      +m:update:
     }
     >c:OrientedBoundingBox{
      +x:
      +x:BoundingBox
      +x:BoundingBox,Matrix4
      +f:transform
      +m:contains:BoundingBox
      +m:contains:OrientedBoundingBox
      +m:contains:Vector3
      +m:getBounds:
      +m:getCorner000:Vector3
      +m:getCorner001:Vector3
      +m:getCorner010:Vector3
      +m:getCorner011:Vector3
      +m:getCorner100:Vector3
      +m:getCorner101:Vector3
      +m:getCorner110:Vector3
      +m:getCorner111:Vector3
      +m:getTransform:
      +m:getVertices:
      +m:intersects:BoundingBox
      +m:intersects:OrientedBoundingBox
      +m:mul:Matrix4
      +m:set:BoundingBox,Matrix4
      +m:setBounds:BoundingBox
      +m:setTransform:Matrix4
     }
     >c:Ray{
      +x:
      +x:Vector3,Vector3
      +f:direction
      +f:origin
      +m:cpy:
      +m:equals:Object
      +m:getEndPoint:Vector3,float
      +m:hashCode:
      +m:mul:Matrix4
      +m:set:Ray
      +m:set:Vector3,Vector3
      +m:set:float,float,float,float,float,float
      +m:toString:
     }
     >c:Segment{
      +x:Vector3,Vector3
      +x:float,float,float,float,float,float
      +f:a
      +f:b
      +m:equals:Object
      +m:hashCode:
      +m:len2:
      +m:len:
     }
     >c:Sphere{
      +x:Vector3,float
      +f:center
      +f:radius
      +m:equals:Object
      +m:hashCode:
      +m:overlaps:Sphere
      +m:surfaceArea:
      +m:volume:
     }
    }
    >c:Path{
     +z
     +m:approxLength:int
     +m:approximate:Object
     +m:derivativeAt:Object,float
     +m:locate:Object
     +m:valueAt:Object,float
    }
    >c:Shape2D{
     +z
     +m:contains:Vector2
     +m:contains:float,float
    }
    >c:Vector{
     +z
     +m:add:Vector
     +m:clamp:float,float
     +m:cpy:
     +m:dot:Vector
     +m:dst2:Vector
     +m:dst:Vector
     +m:epsilonEquals:Vector,float
     +m:hasOppositeDirection:Vector
     +m:hasSameDirection:Vector
     +m:interpolate:Vector,float,Interpolation
     +m:isCollinear:Vector
     +m:isCollinear:Vector,float
     +m:isCollinearOpposite:Vector
     +m:isCollinearOpposite:Vector,float
     +m:isOnLine:Vector
     +m:isOnLine:Vector,float
     +m:isPerpendicular:Vector
     +m:isPerpendicular:Vector,float
     +m:isUnit:
     +m:isUnit:float
     +m:isZero:
     +m:isZero:float
     +m:len2:
     +m:len:
     +m:lerp:Vector,float
     +m:limit2:float
     +m:limit:float
     +m:mulAdd:Vector,Vector
     +m:mulAdd:Vector,float
     +m:nor:
     +m:scl:Vector
     +m:scl:float
     +m:set:Vector
     +m:setLength2:float
     +m:setLength:float
     +m:setToRandomDirection:
     +m:setZero:
     +m:sub:Vector
    }
    >c:Affine2{
     +x:
     +x:Affine2
     +f:m00
     +f:m01
     +f:m02
     +f:m10
     +f:m11
     +f:m12
     +m:applyTo:Vector2
     +m:det:
     +m:getTranslation:Vector2
     +m:idt:
     +m:inv:
     +m:isIdt:
     +m:isTranslation:
     +m:mul:Affine2
     +m:preMul:Affine2
     +m:preRotate:float
     +m:preRotateRad:float
     +m:preScale:Vector2
     +m:preScale:float,float
     +m:preShear:Vector2
     +m:preShear:float,float
     +m:preTranslate:Vector2
     +m:preTranslate:float,float
     +m:rotate:float
     +m:rotateRad:float
     +m:scale:Vector2
     +m:scale:float,float
     +m:set:Affine2
     +m:set:Matrix3
     +m:set:Matrix4
     +m:setToProduct:Affine2,Affine2
     +m:setToRotation:float
     +m:setToRotation:float,float
     +m:setToRotationRad:float
     +m:setToScaling:Vector2
     +m:setToScaling:float,float
     +m:setToShearing:Vector2
     +m:setToShearing:float,float
     +m:setToTranslation:Vector2
     +m:setToTranslation:float,float
     +m:setToTrnRotRadScl:Vector2,float,Vector2
     +m:setToTrnRotRadScl:float,float,float,float,float
     +m:setToTrnRotScl:Vector2,float,Vector2
     +m:setToTrnRotScl:float,float,float,float,float
     +m:setToTrnScl:Vector2,Vector2
     +m:setToTrnScl:float,float,float,float
     +m:shear:Vector2
     +m:shear:float,float
     +m:toString:
     +m:translate:Vector2
     +m:translate:float,float
    }
    >c:BSpline{
     +x:
     +x:Vector[],int,boolean
     +f:continuous
     +f:controlPoints
     +f:degree
     +f:knots
     +f:spanCount
     +m:calculate:Vector,float,Vector[],int,boolean,Vector
     +m:calculate:Vector,int,float,Vector[],int,boolean,Vector
     +m:cubic:Vector,float,Vector[],boolean,Vector
     +m:cubic:Vector,int,float,Vector[],boolean,Vector
     +m:cubic_derivative:Vector,float,Vector[],boolean,Vector
     +m:cubic_derivative:Vector,int,float,Vector[],boolean,Vector
     +m:derivative:Vector,float,Vector[],int,boolean,Vector
     +m:derivative:Vector,int,float,Vector[],int,boolean,Vector
     +m:approxLength:int
     +m:approximate:Object
     +m:approximate:Vector
     +m:approximate:Vector,int
     +m:approximate:Vector,int,int
     +m:derivativeAt:Object,float
     +m:derivativeAt:Vector,float
     +m:derivativeAt:Vector,int,float
     +m:locate:Object
     +m:locate:Vector
     +m:nearest:Vector
     +m:nearest:Vector,int,int
     +m:set:Vector[],int,boolean
     +m:valueAt:Object,float
     +m:valueAt:Vector,float
     +m:valueAt:Vector,int,float
    }
    >c:Bezier{
     +x:
     +x:Vector[]
     +x:Array,int,int
     +x:Vector[],int,int
     +f:points
     +m:cubic:Vector,float,Vector,Vector,Vector,Vector,Vector
     +m:cubic_derivative:Vector,float,Vector,Vector,Vector,Vector,Vector
     +m:linear:Vector,float,Vector,Vector,Vector
     +m:linear_derivative:Vector,float,Vector,Vector,Vector
     +m:quadratic:Vector,float,Vector,Vector,Vector,Vector
     +m:quadratic_derivative:Vector,float,Vector,Vector,Vector,Vector
     +m:approxLength:int
     +m:approximate:Object
     +m:approximate:Vector
     +m:derivativeAt:Object,float
     +m:derivativeAt:Vector,float
     +m:locate:Object
     +m:locate:Vector
     +m:set:Array,int,int
     +m:set:Vector[]
     +m:set:Vector[],int,int
     +m:valueAt:Object,float
     +m:valueAt:Vector,float
    }
    >c:Bresenham2{
     +x:
     +m:line:GridPoint2,GridPoint2
     +m:line:int,int,int,int
     +m:line:int,int,int,int,Pool,Array
    }
    >c:CatmullRomSpline{
     +x:
     +x:Vector[],boolean
     +f:continuous
     +f:controlPoints
     +f:spanCount
     +m:calculate:Vector,float,Vector[],boolean,Vector
     +m:calculate:Vector,int,float,Vector[],boolean,Vector
     +m:derivative:Vector,float,Vector[],boolean,Vector
     +m:derivative:Vector,int,float,Vector[],boolean,Vector
     +m:approxLength:int
     +m:approximate:Object
     +m:approximate:Vector
     +m:approximate:Vector,int
     +m:approximate:Vector,int,int
     +m:derivativeAt:Object,float
     +m:derivativeAt:Vector,float
     +m:derivativeAt:Vector,int,float
     +m:locate:Object
     +m:locate:Vector
     +m:nearest:Vector
     +m:nearest:Vector,int,int
     +m:set:Vector[],boolean
     +m:valueAt:Object,float
     +m:valueAt:Vector,float
     +m:valueAt:Vector,int,float
    }
    >c:Circle{
     +x:
     +x:Circle
     +x:Vector2,float
     +x:Vector2,Vector2
     +x:float,float,float
     +f:radius
     +f:x
     +f:y
     +m:area:
     +m:circumference:
     +m:contains:Circle
     +m:contains:Vector2
     +m:contains:float,float
     +m:equals:Object
     +m:hashCode:
     +m:overlaps:Circle
     +m:set:Circle
     +m:set:Vector2,Vector2
     +m:set:Vector2,float
     +m:set:float,float,float
     +m:setPosition:Vector2
     +m:setPosition:float,float
     +m:setRadius:float
     +m:setX:float
     +m:setY:float
     +m:toString:
    }
    >c:ConvexHull{
     +x:
     +m:computeIndices:FloatArray,boolean,boolean
     +m:computeIndices:float[],boolean,boolean
     +m:computeIndices:float[],int,int,boolean,boolean
     +m:computePolygon:FloatArray,boolean
     +m:computePolygon:float[],boolean
     +m:computePolygon:float[],int,int,boolean
    }
    >c:CumulativeDistribution{
     >c:CumulativeValue{
      +f:frequency
      +f:interval
      +f:value
     }
     +x:
     +m:add:Object
     +m:add:Object,float
     +m:clear:
     +m:generate:
     +m:generateNormalized:
     +m:generateUniform:
     +m:getInterval:int
     +m:getValue:int
     +m:setInterval:Object,float
     +m:setInterval:int,float
     +m:size:
     +m:value:
     +m:value:float
    }
    >c:DelaunayTriangulator{
     +x:
     +m:computeTriangles:FloatArray,boolean
     +m:computeTriangles:float[],boolean
     +m:computeTriangles:float[],int,int,boolean
     +m:trim:ShortArray,float[],float[],int,int
    }
    >c:EarClippingTriangulator{
     +x:
     +m:computeTriangles:FloatArray
     +m:computeTriangles:float[]
     +m:computeTriangles:float[],int,int
    }
    >c:Ellipse{
     +x:
     +x:Circle
     +x:Ellipse
     +x:Vector2,Vector2
     +x:Vector2,float,float
     +x:float,float,float,float
     +f:height
     +f:width
     +f:x
     +f:y
     +m:area:
     +m:circumference:
     +m:contains:Vector2
     +m:contains:float,float
     +m:equals:Object
     +m:hashCode:
     +m:set:Circle
     +m:set:Ellipse
     +m:set:Vector2,Vector2
     +m:set:float,float,float,float
     +m:setPosition:Vector2
     +m:setPosition:float,float
     +m:setSize:float,float
    }
    >c:FloatCounter{
     +x:int
     +f:average
     +f:count
     +f:latest
     +f:max
     +f:mean
     +f:min
     +f:total
     +f:value
     +m:put:float
     +m:reset:
     +m:toString:
    }
    >c:Frustum{
     +x:
     +f:planePoints
     +f:planes
     +m:boundsInFrustum:BoundingBox
     +m:boundsInFrustum:OrientedBoundingBox
     +m:boundsInFrustum:Vector3,Vector3
     +m:boundsInFrustum:float,float,float,float,float,float
     +m:pointInFrustum:Vector3
     +m:pointInFrustum:float,float,float
     +m:sphereInFrustum:Vector3,float
     +m:sphereInFrustum:float,float,float,float
     +m:sphereInFrustumWithoutNearFar:Vector3,float
     +m:sphereInFrustumWithoutNearFar:float,float,float,float
     +m:update:Matrix4
    }
    >c:GeometryUtils{
     +m:barycoordInsideTriangle:Vector2
     +m:colinear:float,float,float,float,float,float
     +m:ensureCCW:float[]
     +m:ensureCCW:float[],int,int
     +m:ensureClockwise:float[]
     +m:ensureClockwise:float[],int,int
     +m:fromBarycoord:Vector2,Vector2,Vector2,Vector2,Vector2
     +m:fromBarycoord:Vector2,float,float,float
     +m:isCCW:float[],int,int
     +m:isClockwise:float[],int,int
     +m:lowestPositiveRoot:float,float,float
     +m:polygonArea:float[],int,int
     +m:polygonCentroid:float[],int,int,Vector2
     +m:quadrilateralCentroid:float,float,float,float,float,float,float,float,Vector2
     +m:reverseVertices:float[],int,int
     +m:toBarycoord:Vector2,Vector2,Vector2,Vector2,Vector2
     +m:triangleArea:float,float,float,float,float,float
     +m:triangleCentroid:float,float,float,float,float,float,Vector2
     +m:triangleCircumcenter:float,float,float,float,float,float,Vector2
     +m:triangleCircumradius:float,float,float,float,float,float
     +m:triangleQuality:float,float,float,float,float,float
    }
    >c:GridPoint2{
     +x:
     +x:GridPoint2
     +x:int,int
     +f:x
     +f:y
     +m:add:GridPoint2
     +m:add:int,int
     +m:cpy:
     +m:dst2:GridPoint2
     +m:dst2:int,int
     +m:dst:GridPoint2
     +m:dst:int,int
     +m:equals:Object
     +m:hashCode:
     +m:set:GridPoint2
     +m:set:int,int
     +m:sub:GridPoint2
     +m:sub:int,int
     +m:toString:
    }
    >c:GridPoint3{
     +x:
     +x:GridPoint3
     +x:int,int,int
     +f:x
     +f:y
     +f:z
     +m:add:GridPoint3
     +m:add:int,int,int
     +m:cpy:
     +m:dst2:GridPoint3
     +m:dst2:int,int,int
     +m:dst:GridPoint3
     +m:dst:int,int,int
     +m:equals:Object
     +m:hashCode:
     +m:set:GridPoint3
     +m:set:int,int,int
     +m:sub:GridPoint3
     +m:sub:int,int,int
     +m:toString:
    }
    >c:Interpolation{
     >c:Bounce{
      +x:int
      +x:float[],float[]
      +m:apply:float
     }
     >c:BounceIn{
      +x:int
      +x:float[],float[]
      +m:apply:float
     }
     >c:BounceOut{
      +x:int
      +x:float[],float[]
      +m:apply:float
     }
     >c:Elastic{
      +x:float,float,int,float
      +m:apply:float
     }
     >c:ElasticIn{
      +x:float,float,int,float
      +m:apply:float
     }
     >c:ElasticOut{
      +x:float,float,int,float
      +m:apply:float
     }
     >c:Exp{
      +x:float,float
      +m:apply:float
     }
     >c:ExpIn{
      +x:float,float
      +m:apply:float
     }
     >c:ExpOut{
      +x:float,float
      +m:apply:float
     }
     >c:Pow{
      +x:int
      +m:apply:float
     }
     >c:PowIn{
      +x:int
      +m:apply:float
     }
     >c:PowOut{
      +x:int
      +m:apply:float
     }
     >c:Swing{
      +x:float
      +m:apply:float
     }
     >c:SwingIn{
      +x:float
      +m:apply:float
     }
     >c:SwingOut{
      +x:float
      +m:apply:float
     }
     +f:bounce
     +f:bounceIn
     +f:bounceOut
     +f:circle
     +f:circleIn
     +f:circleOut
     +f:elastic
     +f:elasticIn
     +f:elasticOut
     +f:exp10
     +f:exp10In
     +f:exp10Out
     +f:exp5
     +f:exp5In
     +f:exp5Out
     +f:fade
     +f:fastSlow
     +f:linear
     +f:pow2
     +f:pow2In
     +f:pow2InInverse
     +f:pow2Out
     +f:pow2OutInverse
     +f:pow3
     +f:pow3In
     +f:pow3InInverse
     +f:pow3Out
     +f:pow3OutInverse
     +f:pow4
     +f:pow4In
     +f:pow4Out
     +f:pow5
     +f:pow5In
     +f:pow5Out
     +f:sine
     +f:sineIn
     +f:sineOut
     +f:slowFast
     +f:smooth2
     +f:smooth
     +f:smoother
     +f:swing
     +f:swingIn
     +f:swingOut
     +m:apply:float
     +m:apply:float,float,float
    }
    >c:Intersector{
     >c:MinimumTranslationVector{
      +x:
      +f:depth
      +f:normal
     }
     >c:SplitTriangle{
      +x:int
      +f:back
      +f:front
      +f:numBack
      +f:numFront
      +f:total
      +m:toString:
     }
     +m:distanceLinePoint:float,float,float,float,float,float
     +m:distanceSegmentPoint:Vector2,Vector2,Vector2
     +m:distanceSegmentPoint:float,float,float,float,float,float
     +m:hasOverlap:Vector3[],Vector3[],Vector3[]
     +m:intersectBoundsPlaneFast:BoundingBox,Plane
     +m:intersectBoundsPlaneFast:Vector3,Vector3,Vector3,float
     +m:intersectFrustumBounds:Frustum,BoundingBox
     +m:intersectFrustumBounds:Frustum,OrientedBoundingBox
     +m:intersectLinePlane:float,float,float,float,float,float,Plane,Vector3
     +m:intersectLinePolygon:Vector2,Vector2,Polygon
     +m:intersectLines:Vector2,Vector2,Vector2,Vector2,Vector2
     +m:intersectLines:float,float,float,float,float,float,float,float,Vector2
     +m:intersectPlanes:Plane,Plane,Plane,Vector3
     +m:intersectPolygonEdges:FloatArray,FloatArray
     +m:intersectPolygons:FloatArray,FloatArray
     +m:intersectPolygons:Polygon,Polygon,Polygon
     +m:intersectRayBounds:Ray,BoundingBox,Vector3
     +m:intersectRayBoundsFast:Ray,BoundingBox
     +m:intersectRayBoundsFast:Ray,Vector3,Vector3
     +m:intersectRayOrientedBounds:Ray,BoundingBox,Matrix4,Vector3
     +m:intersectRayOrientedBounds:Ray,OrientedBoundingBox,Vector3
     +m:intersectRayOrientedBoundsFast:Ray,BoundingBox,Matrix4
     +m:intersectRayOrientedBoundsFast:Ray,OrientedBoundingBox
     +m:intersectRayPlane:Ray,Plane,Vector3
     +m:intersectRayRay:Vector2,Vector2,Vector2,Vector2
     +m:intersectRaySphere:Ray,Vector3,float,Vector3
     +m:intersectRayTriangle:Ray,Vector3,Vector3,Vector3,Vector3
     +m:intersectRayTriangles:Ray,List,Vector3
     +m:intersectRayTriangles:Ray,float[],Vector3
     +m:intersectRayTriangles:Ray,float[],short[],int,Vector3
     +m:intersectRectangles:Rectangle,Rectangle,Rectangle
     +m:intersectSegmentCircle:Vector2,Vector2,Circle,MinimumTranslationVector
     +m:intersectSegmentCircle:Vector2,Vector2,Vector2,float
     +m:intersectSegmentPlane:Vector3,Vector3,Plane,Vector3
     +m:intersectSegmentPolygon:Vector2,Vector2,Polygon
     +m:intersectSegmentRectangle:Vector2,Vector2,Rectangle
     +m:intersectSegmentRectangle:float,float,float,float,Rectangle
     +m:intersectSegments:Vector2,Vector2,Vector2,Vector2,Vector2
     +m:intersectSegments:float,float,float,float,float,float,float,float,Vector2
     +m:isPointInPolygon:Array,Vector2
     +m:isPointInPolygon:float[],int,int,float,float
     +m:isPointInTriangle:Vector2,Vector2,Vector2,Vector2
     +m:isPointInTriangle:Vector3,Vector3,Vector3,Vector3
     +m:isPointInTriangle:float,float,float,float,float,float,float,float
     +m:nearestSegmentPoint:Vector2,Vector2,Vector2,Vector2
     +m:nearestSegmentPoint:float,float,float,float,float,float,Vector2
     +m:overlapConvexPolygons:Polygon,Polygon
     +m:overlapConvexPolygons:Polygon,Polygon,MinimumTranslationVector
     +m:overlapConvexPolygons:float[],float[],MinimumTranslationVector
     +m:overlapConvexPolygons:float[],int,int,float[],int,int,MinimumTranslationVector
     +m:overlaps:Circle,Circle
     +m:overlaps:Circle,Rectangle
     +m:overlaps:Rectangle,Rectangle
     +m:pointLineSide:Vector2,Vector2,Vector2
     +m:pointLineSide:float,float,float,float,float,float
     +m:splitTriangle:float[],Plane,SplitTriangle
    }
    >c:MathUtils{
     +f:E
     +f:FLOAT_ROUNDING_ERROR
     +f:HALF_PI
     +f:PI2
     +f:PI
     +f:degRad
     +f:degreesToRadians
     +f:nanoToSec
     +f:radDeg
     +f:radiansToDegrees
     +f:random
     +m:acos:float
     +m:acosDeg:float
     +m:asin:float
     +m:asinDeg:float
     +m:atan2:float,float
     +m:atan2Deg360:float,float
     +m:atan2Deg:float,float
     +m:atan:float
     +m:atanDeg:float
     +m:atanUnchecked:double
     +m:atanUncheckedDeg:double
     +m:ceil:float
     +m:ceilPositive:float
     +m:clamp:double,double,double
     +m:clamp:float,float,float
     +m:clamp:int,int,int
     +m:clamp:long,long,long
     +m:clamp:short,short,short
     +m:cos:float
     +m:cosDeg:float
     +m:floor:float
     +m:floorPositive:float
     +m:isEqual:float,float
     +m:isEqual:float,float,float
     +m:isPowerOfTwo:int
     +m:isZero:float
     +m:isZero:float,float
     +m:lerp:float,float,float
     +m:lerpAngle:float,float,float
     +m:lerpAngleDeg:float,float,float
     +m:log2:float
     +m:log:float,float
     +m:map:float,float,float,float,float
     +m:nextPowerOfTwo:int
     +m:norm:float,float,float
     +m:random:
     +m:random:float
     +m:random:float,float
     +m:random:int
     +m:random:int,int
     +m:random:long
     +m:random:long,long
     +m:randomBoolean:
     +m:randomBoolean:float
     +m:randomSign:
     +m:randomTriangular:
     +m:randomTriangular:float
     +m:randomTriangular:float,float
     +m:randomTriangular:float,float,float
     +m:round:float
     +m:roundPositive:float
     +m:sin:float
     +m:sinDeg:float
     +m:tan:float
     +m:tanDeg:float
    }
    >c:Matrix3{
     +x:
     +x:Matrix3
     +x:float[]
     +f:M00
     +f:M01
     +f:M02
     +f:M10
     +f:M11
     +f:M12
     +f:M20
     +f:M21
     +f:M22
     +f:val
     +m:det:
     +m:getRotation:
     +m:getRotationRad:
     +m:getScale:Vector2
     +m:getTranslation:Vector2
     +m:getValues:
     +m:idt:
     +m:inv:
     +m:mul:Matrix3
     +m:mulLeft:Matrix3
     +m:rotate:float
     +m:rotateRad:float
     +m:scale:Vector2
     +m:scale:float,float
     +m:scl:Vector2
     +m:scl:Vector3
     +m:scl:float
     +m:set:Affine2
     +m:set:Matrix3
     +m:set:Matrix4
     +m:set:float[]
     +m:setToRotation:Vector3,float
     +m:setToRotation:Vector3,float,float
     +m:setToRotation:float
     +m:setToRotationRad:float
     +m:setToScaling:Vector2
     +m:setToScaling:float,float
     +m:setToTranslation:Vector2
     +m:setToTranslation:float,float
     +m:toString:
     +m:translate:Vector2
     +m:translate:float,float
     +m:transpose:
     +m:trn:Vector2
     +m:trn:Vector3
     +m:trn:float,float
    }
    >c:Matrix4{
     +x:
     +x:Matrix4
     +x:float[]
     +x:Quaternion
     +x:Vector3,Quaternion,Vector3
     +f:M00
     +f:M01
     +f:M02
     +f:M03
     +f:M10
     +f:M11
     +f:M12
     +f:M13
     +f:M20
     +f:M21
     +f:M22
     +f:M23
     +f:M30
     +f:M31
     +f:M32
     +f:M33
     +f:val
     +m:det:float[]
     +m:inv:float[]
     +m:mul:float[],float[]
     +m:mulVec:float[],float[]
     +m:mulVec:float[],float[],int,int,int
     +m:prj:float[],float[]
     +m:prj:float[],float[],int,int,int
     +m:rot:float[],float[]
     +m:rot:float[],float[],int,int,int
     +m:avg:Matrix4,float
     +m:avg:Matrix4[]
     +m:avg:Matrix4[],float[]
     +m:cpy:
     +m:det3x3:
     +m:det:
     +m:extract4x3Matrix:float[]
     +m:getRotation:Quaternion
     +m:getRotation:Quaternion,boolean
     +m:getScale:Vector3
     +m:getScaleX:
     +m:getScaleXSquared:
     +m:getScaleY:
     +m:getScaleYSquared:
     +m:getScaleZ:
     +m:getScaleZSquared:
     +m:getTranslation:Vector3
     +m:getValues:
     +m:hasRotationOrScaling:
     +m:idt:
     +m:inv:
     +m:lerp:Matrix4,float
     +m:mul:Matrix4
     +m:mulLeft:Matrix4
     +m:rotate:Quaternion
     +m:rotate:Vector3,Vector3
     +m:rotate:Vector3,float
     +m:rotate:float,float,float,float
     +m:rotateRad:Vector3,float
     +m:rotateRad:float,float,float,float
     +m:rotateTowardDirection:Vector3,Vector3
     +m:rotateTowardTarget:Vector3,Vector3
     +m:scale:float,float,float
     +m:scl:Vector3
     +m:scl:float
     +m:scl:float,float,float
     +m:set:Affine2
     +m:set:Matrix3
     +m:set:Matrix4
     +m:set:Quaternion
     +m:set:Vector3,Quaternion
     +m:set:Vector3,Quaternion,Vector3
     +m:set:Vector3,Vector3,Vector3,Vector3
     +m:set:float,float,float,float
     +m:set:float,float,float,float,float,float,float
     +m:set:float,float,float,float,float,float,float,float,float,float
     +m:set:float[]
     +m:setAsAffine:Affine2
     +m:setAsAffine:Matrix4
     +m:setFromEulerAngles:float,float,float
     +m:setFromEulerAnglesRad:float,float,float
     +m:setToLookAt:Vector3,Vector3
     +m:setToLookAt:Vector3,Vector3,Vector3
     +m:setToOrtho2D:float,float,float,float
     +m:setToOrtho2D:float,float,float,float,float,float
     +m:setToOrtho:float,float,float,float,float,float
     +m:setToProjection:float,float,float,float
     +m:setToProjection:float,float,float,float,float,float
     +m:setToRotation:Vector3,Vector3
     +m:setToRotation:Vector3,float
     +m:setToRotation:float,float,float,float
     +m:setToRotation:float,float,float,float,float,float
     +m:setToRotationRad:Vector3,float
     +m:setToRotationRad:float,float,float,float
     +m:setToScaling:Vector3
     +m:setToScaling:float,float,float
     +m:setToTranslation:Vector3
     +m:setToTranslation:float,float,float
     +m:setToTranslationAndScaling:Vector3,Vector3
     +m:setToTranslationAndScaling:float,float,float,float,float,float
     +m:setToWorld:Vector3,Vector3,Vector3
     +m:setTranslation:Vector3
     +m:setTranslation:float,float,float
     +m:toNormalMatrix:
     +m:toString:
     +m:tra:
     +m:translate:Vector3
     +m:translate:float,float,float
     +m:trn:Vector3
     +m:trn:float,float,float
    }
    >c:Octree{
     >c:Collider{
      +z
      +m:intersects:BoundingBox,Object
      +m:intersects:Frustum,Object
      +m:intersects:Ray,Object
     }
     >c:RayCastResult{
      +x:
     }
     +x:Vector3,Vector3,int,int,Collider
     +m:add:Object
     +m:getAll:ObjectSet
     +m:getNodesBoxes:ObjectSet
     +m:query:BoundingBox,ObjectSet
     +m:query:Frustum,ObjectSet
     +m:rayCast:Ray,RayCastResult
     +m:remove:Object
     +m:update:Object
    }
    >c:Plane{
     >c:PlaneSide{
      +f:Back
      +f:Front
      +f:OnPlane
      +m:valueOf:String
      +m:values:
     }
     +x:
     +x:Vector3,float
     +x:Vector3,Vector3
     +x:Vector3,Vector3,Vector3
     +f:d
     +f:normal
     +m:distance:Vector3
     +m:getD:
     +m:getNormal:
     +m:isFrontFacing:Vector3
     +m:set:Plane
     +m:set:Vector3,Vector3
     +m:set:Vector3,Vector3,Vector3
     +m:set:float,float,float,float
     +m:set:float,float,float,float,float,float
     +m:testPoint:Vector3
     +m:testPoint:float,float,float
     +m:toString:
    }
    >c:Polygon{
     +x:
     +x:float[]
     +m:area:
     +m:contains:Vector2
     +m:contains:float,float
     +m:dirty:
     +m:getBoundingRectangle:
     +m:getCentroid:Vector2
     +m:getOriginX:
     +m:getOriginY:
     +m:getRotation:
     +m:getScaleX:
     +m:getScaleY:
     +m:getTransformedVertices:
     +m:getVertex:int,Vector2
     +m:getVertexCount:
     +m:getVertices:
     +m:getX:
     +m:getY:
     +m:rotate:float
     +m:scale:float
     +m:setOrigin:float,float
     +m:setPosition:float,float
     +m:setRotation:float
     +m:setScale:float,float
     +m:setVertex:int,float,float
     +m:setVertices:float[]
     +m:translate:float,float
    }
    >c:Polyline{
     +x:
     +x:float[]
     +m:calculateLength:
     +m:calculateScaledLength:
     +m:contains:Vector2
     +m:contains:float,float
     +m:dirty:
     +m:getBoundingRectangle:
     +m:getLength:
     +m:getOriginX:
     +m:getOriginY:
     +m:getRotation:
     +m:getScaleX:
     +m:getScaleY:
     +m:getScaledLength:
     +m:getTransformedVertices:
     +m:getVertices:
     +m:getX:
     +m:getY:
     +m:rotate:float
     +m:scale:float
     +m:setOrigin:float,float
     +m:setPosition:float,float
     +m:setRotation:float
     +m:setScale:float,float
     +m:setVertices:float[]
     +m:translate:float,float
    }
    >c:Quaternion{
     +x:
     +x:Quaternion
     +x:Vector3,float
     +x:float,float,float,float
     +f:w
     +f:x
     +f:y
     +f:z
     +m:dot:float,float,float,float,float,float,float,float
     +m:len2:float,float,float,float
     +m:len:float,float,float,float
     +m:add:Quaternion
     +m:add:float,float,float,float
     +m:conjugate:
     +m:cpy:
     +m:dot:Quaternion
     +m:dot:float,float,float,float
     +m:equals:Object
     +m:exp:float
     +m:getAngle:
     +m:getAngleAround:Vector3
     +m:getAngleAround:float,float,float
     +m:getAngleAroundRad:Vector3
     +m:getAngleAroundRad:float,float,float
     +m:getAngleRad:
     +m:getAxisAngle:Vector3
     +m:getAxisAngleRad:Vector3
     +m:getGimbalPole:
     +m:getPitch:
     +m:getPitchRad:
     +m:getRoll:
     +m:getRollRad:
     +m:getSwingTwist:Vector3,Quaternion,Quaternion
     +m:getSwingTwist:float,float,float,Quaternion,Quaternion
     +m:getYaw:
     +m:getYawRad:
     +m:hashCode:
     +m:idt:
     +m:isIdentity:
     +m:isIdentity:float
     +m:len2:
     +m:len:
     +m:mul:Quaternion
     +m:mul:float
     +m:mul:float,float,float,float
     +m:mulLeft:Quaternion
     +m:mulLeft:float,float,float,float
     +m:nor:
     +m:set:Quaternion
     +m:set:Vector3,float
     +m:set:float,float,float,float
     +m:setEulerAngles:float,float,float
     +m:setEulerAnglesRad:float,float,float
     +m:setFromAxes:boolean,float,float,float,float,float,float,float,float,float
     +m:setFromAxes:float,float,float,float,float,float,float,float,float
     +m:setFromAxis:Vector3,float
     +m:setFromAxis:float,float,float,float
     +m:setFromAxisRad:Vector3,float
     +m:setFromAxisRad:float,float,float,float
     +m:setFromCross:Vector3,Vector3
     +m:setFromCross:float,float,float,float,float,float
     +m:setFromMatrix:Matrix3
     +m:setFromMatrix:Matrix4
     +m:setFromMatrix:boolean,Matrix3
     +m:setFromMatrix:boolean,Matrix4
     +m:slerp:Quaternion,float
     +m:slerp:Quaternion[]
     +m:slerp:Quaternion[],float[]
     +m:toMatrix:float[]
     +m:toString:
     +m:transform:Vector3
    }
    >c:RandomXS128{
     +x:
     +x:long
     +x:long,long
     +m:getState:int
     +m:nextBoolean:
     +m:nextBytes:byte[]
     +m:nextDouble:
     +m:nextFloat:
     +m:nextInt:
     +m:nextInt:int
     +m:nextLong:
     +m:nextLong:long
     +m:setSeed:long
     +m:setState:long,long
    }
    >c:Rectangle{
     +x:
     +x:Rectangle
     +x:float,float,float,float
     +f:tmp2
     +f:tmp
     +f:height
     +f:width
     +f:x
     +f:y
     +m:area:
     +m:contains:Circle
     +m:contains:Rectangle
     +m:contains:Vector2
     +m:contains:float,float
     +m:equals:Object
     +m:fitInside:Rectangle
     +m:fitOutside:Rectangle
     +m:fromString:String
     +m:getAspectRatio:
     +m:getCenter:Vector2
     +m:getHeight:
     +m:getPosition:Vector2
     +m:getSize:Vector2
     +m:getWidth:
     +m:getX:
     +m:getY:
     +m:hashCode:
     +m:merge:Rectangle
     +m:merge:Vector2
     +m:merge:Vector2[]
     +m:merge:float,float
     +m:overlaps:Rectangle
     +m:perimeter:
     +m:set:Rectangle
     +m:set:float,float,float,float
     +m:setCenter:Vector2
     +m:setCenter:float,float
     +m:setHeight:float
     +m:setPosition:Vector2
     +m:setPosition:float,float
     +m:setSize:float
     +m:setSize:float,float
     +m:setWidth:float
     +m:setX:float
     +m:setY:float
     +m:toString:
    }
    >c:Vector2{
     +x:
     +x:Vector2
     +x:float,float
     +f:X
     +f:Y
     +f:Zero
     +f:x
     +f:y
     +m:angleDeg:float,float
     +m:angleRad:float,float
     +m:dot:float,float,float,float
     +m:dst2:float,float,float,float
     +m:dst:float,float,float,float
     +m:len2:float,float
     +m:len:float,float
     +m:add:Vector
     +m:add:Vector2
     +m:add:float,float
     +m:angleDeg:
     +m:angleDeg:Vector2
     +m:angleRad:
     +m:angleRad:Vector2
     +m:clamp:float,float
     +m:cpy:
     +m:crs:Vector2
     +m:crs:float,float
     +m:dot:Vector
     +m:dot:Vector2
     +m:dot:float,float
     +m:dst2:Vector
     +m:dst2:Vector2
     +m:dst2:float,float
     +m:dst:Vector
     +m:dst:Vector2
     +m:dst:float,float
     +m:epsilonEquals:Vector,float
     +m:epsilonEquals:Vector2
     +m:epsilonEquals:Vector2,float
     +m:epsilonEquals:float,float
     +m:epsilonEquals:float,float,float
     +m:equals:Object
     +m:fromString:String
     +m:hasOppositeDirection:Vector
     +m:hasOppositeDirection:Vector2
     +m:hasSameDirection:Vector
     +m:hasSameDirection:Vector2
     +m:hashCode:
     +m:idt:Vector2
     +m:interpolate:Vector,float,Interpolation
     +m:interpolate:Vector2,float,Interpolation
     +m:isCollinear:Vector
     +m:isCollinear:Vector,float
     +m:isCollinear:Vector2
     +m:isCollinear:Vector2,float
     +m:isCollinearOpposite:Vector
     +m:isCollinearOpposite:Vector,float
     +m:isCollinearOpposite:Vector2
     +m:isCollinearOpposite:Vector2,float
     +m:isOnLine:Vector
     +m:isOnLine:Vector,float
     +m:isOnLine:Vector2
     +m:isOnLine:Vector2,float
     +m:isPerpendicular:Vector
     +m:isPerpendicular:Vector,float
     +m:isPerpendicular:Vector2
     +m:isPerpendicular:Vector2,float
     +m:isUnit:
     +m:isUnit:float
     +m:isZero:
     +m:isZero:float
     +m:len2:
     +m:len:
     +m:lerp:Vector,float
     +m:lerp:Vector2,float
     +m:limit2:float
     +m:limit:float
     +m:mul:Matrix3
     +m:mulAdd:Vector,Vector
     +m:mulAdd:Vector,float
     +m:mulAdd:Vector2,Vector2
     +m:mulAdd:Vector2,float
     +m:nor:
     +m:rotate90:int
     +m:rotateAroundDeg:Vector2,float
     +m:rotateAroundRad:Vector2,float
     +m:rotateDeg:float
     +m:rotateRad:float
     +m:scl:Vector
     +m:scl:Vector2
     +m:scl:float
     +m:scl:float,float
     +m:set:Vector
     +m:set:Vector2
     +m:set:float,float
     +m:setAngleDeg:float
     +m:setAngleRad:float
     +m:setLength2:float
     +m:setLength:float
     +m:setToRandomDirection:
     +m:setZero:
     +m:sub:Vector
     +m:sub:Vector2
     +m:sub:float,float
     +m:toString:
    }
    >c:Vector3{
     +x:
     +x:Vector3
     +x:float[]
     +x:Vector2,float
     +x:float,float,float
     +f:X
     +f:Y
     +f:Z
     +f:Zero
     +f:x
     +f:y
     +f:z
     +m:dot:float,float,float,float,float,float
     +m:dst2:float,float,float,float,float,float
     +m:dst:float,float,float,float,float,float
     +m:len2:float,float,float
     +m:len:float,float,float
     +m:add:Vector
     +m:add:Vector3
     +m:add:float
     +m:add:float,float,float
     +m:clamp:float,float
     +m:cpy:
     +m:crs:Vector3
     +m:crs:float,float,float
     +m:dot:Vector
     +m:dot:Vector3
     +m:dot:float,float,float
     +m:dst2:Vector
     +m:dst2:Vector3
     +m:dst2:float,float,float
     +m:dst:Vector
     +m:dst:Vector3
     +m:dst:float,float,float
     +m:epsilonEquals:Vector,float
     +m:epsilonEquals:Vector3
     +m:epsilonEquals:Vector3,float
     +m:epsilonEquals:float,float,float
     +m:epsilonEquals:float,float,float,float
     +m:equals:Object
     +m:fromString:String
     +m:hasOppositeDirection:Vector
     +m:hasOppositeDirection:Vector3
     +m:hasSameDirection:Vector
     +m:hasSameDirection:Vector3
     +m:hashCode:
     +m:idt:Vector3
     +m:interpolate:Vector,float,Interpolation
     +m:interpolate:Vector3,float,Interpolation
     +m:isCollinear:Vector
     +m:isCollinear:Vector,float
     +m:isCollinear:Vector3
     +m:isCollinear:Vector3,float
     +m:isCollinearOpposite:Vector
     +m:isCollinearOpposite:Vector,float
     +m:isCollinearOpposite:Vector3
     +m:isCollinearOpposite:Vector3,float
     +m:isOnLine:Vector
     +m:isOnLine:Vector,float
     +m:isOnLine:Vector3
     +m:isOnLine:Vector3,float
     +m:isPerpendicular:Vector
     +m:isPerpendicular:Vector,float
     +m:isPerpendicular:Vector3
     +m:isPerpendicular:Vector3,float
     +m:isUnit:
     +m:isUnit:float
     +m:isZero:
     +m:isZero:float
     +m:len2:
     +m:len:
     +m:lerp:Vector,float
     +m:lerp:Vector3,float
     +m:limit2:float
     +m:limit:float
     +m:mul4x3:float[]
     +m:mul:Matrix3
     +m:mul:Matrix4
     +m:mul:Quaternion
     +m:mulAdd:Vector,Vector
     +m:mulAdd:Vector,float
     +m:mulAdd:Vector3,Vector3
     +m:mulAdd:Vector3,float
     +m:nor:
     +m:prj:Matrix4
     +m:rot:Matrix4
     +m:rotate:Vector3,float
     +m:rotate:float,float,float,float
     +m:rotateRad:Vector3,float
     +m:rotateRad:float,float,float,float
     +m:scl:Vector
     +m:scl:Vector3
     +m:scl:float
     +m:scl:float,float,float
     +m:set:Vector
     +m:set:Vector2,float
     +m:set:Vector3
     +m:set:float,float,float
     +m:set:float[]
     +m:setFromSpherical:float,float
     +m:setLength2:float
     +m:setLength:float
     +m:setToRandomDirection:
     +m:setZero:
     +m:slerp:Vector3,float
     +m:sub:Vector
     +m:sub:Vector3
     +m:sub:float
     +m:sub:float,float,float
     +m:toString:
     +m:traMul:Matrix3
     +m:traMul:Matrix4
     +m:unrotate:Matrix4
     +m:untransform:Matrix4
    }
    >c:Vector4{
     +x:
     +x:Vector4
     +x:float[]
     +x:Vector3,float
     +x:Vector2,float,float
     +x:float,float,float,float
     +f:W
     +f:X
     +f:Y
     +f:Z
     +f:Zero
     +f:w
     +f:x
     +f:y
     +f:z
     +m:dot:float,float,float,float,float,float,float,float
     +m:dst2:float,float,float,float,float,float,float,float
     +m:dst:float,float,float,float,float,float,float,float
     +m:len2:float,float,float,float
     +m:len:float,float,float,float
     +m:add:Vector
     +m:add:Vector4
     +m:add:float
     +m:add:float,float,float,float
     +m:clamp:float,float
     +m:cpy:
     +m:dot:Vector
     +m:dot:Vector4
     +m:dot:float,float,float,float
     +m:dst2:Vector
     +m:dst2:Vector4
     +m:dst2:float,float,float,float
     +m:dst:Vector
     +m:dst:Vector4
     +m:dst:float,float,float,float
     +m:epsilonEquals:Vector,float
     +m:epsilonEquals:Vector4
     +m:epsilonEquals:Vector4,float
     +m:epsilonEquals:float,float,float,float
     +m:epsilonEquals:float,float,float,float,float
     +m:equals:Object
     +m:fromString:String
     +m:hasOppositeDirection:Vector
     +m:hasOppositeDirection:Vector4
     +m:hasSameDirection:Vector
     +m:hasSameDirection:Vector4
     +m:hashCode:
     +m:idt:Vector4
     +m:interpolate:Vector,float,Interpolation
     +m:interpolate:Vector4,float,Interpolation
     +m:isCollinear:Vector
     +m:isCollinear:Vector,float
     +m:isCollinear:Vector4
     +m:isCollinear:Vector4,float
     +m:isCollinearOpposite:Vector
     +m:isCollinearOpposite:Vector,float
     +m:isCollinearOpposite:Vector4
     +m:isCollinearOpposite:Vector4,float
     +m:isOnLine:Vector
     +m:isOnLine:Vector,float
     +m:isOnLine:Vector4
     +m:isOnLine:Vector4,float
     +m:isPerpendicular:Vector
     +m:isPerpendicular:Vector,float
     +m:isPerpendicular:Vector4
     +m:isPerpendicular:Vector4,float
     +m:isUnit:
     +m:isUnit:float
     +m:isZero:
     +m:isZero:float
     +m:len2:
     +m:len:
     +m:lerp:Vector,float
     +m:lerp:Vector4,float
     +m:limit2:float
     +m:limit:float
     +m:mulAdd:Vector,Vector
     +m:mulAdd:Vector,float
     +m:mulAdd:Vector4,Vector4
     +m:mulAdd:Vector4,float
     +m:nor:
     +m:scl:Vector
     +m:scl:Vector4
     +m:scl:float
     +m:scl:float,float,float,float
     +m:set:Vector
     +m:set:Vector2,float,float
     +m:set:Vector3,float
     +m:set:Vector4
     +m:set:float,float,float,float
     +m:set:float[]
     +m:setLength2:float
     +m:setLength:float
     +m:setToRandomDirection:
     +m:setZero:
     +m:sub:Vector
     +m:sub:Vector4
     +m:sub:float
     +m:sub:float,float,float,float
     +m:toString:
    }
    >c:WindowedMean{
     +x:int
     +m:addValue:float
     +m:clear:
     +m:getHighest:
     +m:getLatest:
     +m:getLowest:
     +m:getMean:
     +m:getOldest:
     +m:getValueCount:
     +m:getWindowSize:
     +m:getWindowValues:
     +m:hasEnoughData:
     +m:standardDeviation:
    }
   }
   -p:net
   -p:pay
   -p:scenes
   >p:utils{
    -p:async
    >p:compression{
     -p:lz
     -p:lzma
     -p:rangecoder
     >c:ICodeProgress{
      +z
      +m:SetProgress:long,long
     }
     >c:CRC{
      +x:
      +f:Table
      +m:GetDigest:
      +m:Init:
      +m:Update:byte[]
      +m:Update:byte[],int,int
      +m:UpdateByte:int
     }
     >c:Lzma{
      +x:
      +m:compress:InputStream,OutputStream
      +m:decompress:InputStream,OutputStream
     }
    }
    -p:reflect
    >p:viewport{
     >c:ExtendViewport{
      +x:float,float
      +x:float,float,Camera
      +x:float,float,float,float
      +x:float,float,float,float,Camera
      +m:getMaxWorldHeight:
      +m:getMaxWorldWidth:
      +m:getMinWorldHeight:
      +m:getMinWorldWidth:
      +m:setMaxWorldHeight:float
      +m:setMaxWorldWidth:float
      +m:setMinWorldHeight:float
      +m:setMinWorldWidth:float
      +m:setScaling:Scaling
      +m:update:int,int,boolean
     }
     >c:FillViewport{
      +x:float,float
      +x:float,float,Camera
     }
     >c:FitViewport{
      +x:float,float
      +x:float,float,Camera
     }
     >c:ScalingViewport{
      +x:Scaling,float,float
      +x:Scaling,float,float,Camera
      +m:getScaling:
      +m:setScaling:Scaling
      +m:update:int,int,boolean
     }
     >c:ScreenViewport{
      +x:
      +x:Camera
      +m:getUnitsPerPixel:
      +m:setUnitsPerPixel:float
      +m:update:int,int,boolean
     }
     >c:StretchViewport{
      +x:float,float
      +x:float,float,Camera
     }
     >c:Viewport{
      +m:apply:
      +m:apply:boolean
      +m:calculateScissors:Matrix4,Rectangle,Rectangle
      +m:getBottomGutterHeight:
      +m:getCamera:
      +m:getLeftGutterWidth:
      +m:getPickRay:float,float
      +m:getRightGutterWidth:
      +m:getRightGutterX:
      +m:getScreenHeight:
      +m:getScreenWidth:
      +m:getScreenX:
      +m:getScreenY:
      +m:getTopGutterHeight:
      +m:getTopGutterY:
      +m:getWorldHeight:
      +m:getWorldWidth:
      +m:project:Vector2
      +m:project:Vector3
      +m:setCamera:Camera
      +m:setScreenBounds:int,int,int,int
      +m:setScreenHeight:int
      +m:setScreenPosition:int,int
      +m:setScreenSize:int,int
      +m:setScreenWidth:int
      +m:setScreenX:int
      +m:setScreenY:int
      +m:setWorldHeight:float
      +m:setWorldSize:float,float
      +m:setWorldWidth:float
      +m:toScreenCoordinates:Vector2,Matrix4
      +m:unproject:Vector2
      +m:unproject:Vector3
      +m:update:int,int
      +m:update:int,int,boolean
     }
    }
    >c:BaseJsonReader{
     -z
     -m:parse:FileHandle
     +m:parse:InputStream
    }
    >c:Clipboard{
     -z
     -m:getContents:
     -m:hasContents:
     +m:setContents:String
    }
    >c:Disposable{
     +z
     +m:dispose:
    }
    >c:Null{
     -z
    }
    >c:Predicate{
     >c:PredicateIterable{
      +x:Iterable,Predicate
      +f:iterable
      +f:iterator
      +f:predicate
      +m:iterator:
      +m:set:Iterable,Predicate
     }
     >c:PredicateIterator{
      +x:Iterable,Predicate
      +x:Iterator,Predicate
      +f:end
      +f:iterator
      +f:next
      +f:peeked
      +f:predicate
      +m:hasNext:
      +m:next:
      +m:remove:
      +m:set:Iterable,Predicate
      +m:set:Iterator,Predicate
     }
     +z
     +m:evaluate:Object
    }
    >c:Align{
     -x:
     +f:bottom
     +f:bottomLeft
     +f:bottomRight
     +f:center
     +f:left
     +f:right
     +f:top
     +f:topLeft
     +f:topRight
     +m:isBottom:int
     +m:isCenterHorizontal:int
     +m:isCenterVertical:int
     +m:isLeft:int
     +m:isRight:int
     +m:isTop:int
     +m:toString:int
    }
    >c:Architecture{
     >c:Bitness{
      +f:_128
      +f:_32
      +f:_64
      +m:valueOf:String
      +m:values:
      +m:toSuffix:
     }
     +f:ARM
     +f:LOONGARCH
     +f:RISCV
     +f:x86
     +m:valueOf:String
     +m:values:
     +m:toSuffix:
    }
    >c:Array{
     >c:ArrayIterable{
      +x:Array
      +x:Array,boolean
      +m:iterator:
     }
     >c:ArrayIterator{
      +x:Array
      +x:Array,boolean
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     +x:
     +x:int
     +x:Array
     +x:Class
     +x:Object[]
     +x:boolean,int
     +x:boolean,int,Class
     +x:boolean,Object[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:of:Class
     +m:of:boolean,int,Class
     +m:with:Object[]
     +m:add:Object
     +m:add:Object,Object
     +m:add:Object,Object,Object
     +m:add:Object,Object,Object,Object
     +m:addAll:Array
     +m:addAll:Array,int,int
     +m:addAll:Object[]
     +m:addAll:Object[],int,int
     +m:clear:
     +m:contains:Object,boolean
     +m:containsAll:Array,boolean
     +m:containsAny:Array,boolean
     +m:ensureCapacity:int
     +m:equals:Object
     +m:equalsIdentity:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:indexOf:Object,boolean
     +m:insert:int,Object
     +m:insertRange:int,int
     +m:isEmpty:
     +m:iterator:
     +m:lastIndexOf:Object,boolean
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:Array,boolean
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:Object,boolean
     +m:reverse:
     +m:select:Predicate
     +m:selectRanked:Comparator,int
     +m:selectRankedIndex:Comparator,int
     +m:set:int,Object
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:sort:Comparator
     +m:swap:int,int
     +m:toArray:
     +m:toArray:Class
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:ArrayMap{
     >c:Entries{
      +x:ArrayMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Keys{
      +x:ArrayMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     >c:Values{
      +x:ArrayMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     +x:
     +x:int
     +x:ArrayMap
     +x:Class,Class
     +x:boolean,int
     +x:boolean,int,Class,Class
     +f:keys
     +f:ordered
     +f:size
     +f:values
     +m:clear:
     +m:clear:int
     +m:containsKey:Object
     +m:containsValue:Object,boolean
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:equalsIdentity:Object
     +m:firstKey:
     +m:firstValue:
     +m:get:Object
     +m:get:Object,Object
     +m:getKey:Object,boolean
     +m:getKeyAt:int
     +m:getValueAt:int
     +m:hashCode:
     +m:indexOfKey:Object
     +m:indexOfValue:Object,boolean
     +m:insert:int,Object,Object
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:peekKey:
     +m:peekValue:
     +m:put:Object,Object
     +m:put:Object,Object,int
     +m:putAll:ArrayMap
     +m:putAll:ArrayMap,int,int
     +m:removeIndex:int
     +m:removeKey:Object
     +m:removeValue:Object,boolean
     +m:reverse:
     +m:setKey:int,Object
     +m:setValue:int,Object
     +m:shrink:
     +m:shuffle:
     +m:toString:
     +m:truncate:int
     +m:values:
    }
    >c:AtomicQueue{
     +x:int
     +m:poll:
     +m:put:Object
    }
    -c:Base64Coder
    >c:BinaryHeap{
     >c:Node{
      +x:float
      +m:getValue:
      +m:toString:
     }
     +x:
     +x:int,boolean
     +f:size
     +m:add:Node
     +m:add:Node,float
     +m:clear:
     +m:contains:Node,boolean
     +m:equals:Object
     +m:hashCode:
     +m:isEmpty:
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:remove:Node
     +m:setValue:Node,float
     +m:toString:
    }
    >c:Bits{
     +x:
     +x:int
     +x:Bits
     +m:and:Bits
     +m:andNot:Bits
     +m:clear:
     +m:clear:int
     +m:containsAll:Bits
     +m:equals:Object
     +m:flip:int
     +m:get:int
     +m:getAndClear:int
     +m:getAndSet:int
     +m:hashCode:
     +m:intersects:Bits
     +m:isEmpty:
     +m:length:
     +m:nextClearBit:int
     +m:nextSetBit:int
     +m:notEmpty:
     +m:numBits:
     +m:or:Bits
     +m:set:int
     +m:xor:Bits
    }
    >c:BooleanArray{
     +x:
     +x:int
     +x:boolean[]
     +x:BooleanArray
     +x:boolean,int
     +x:boolean,boolean[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:boolean[]
     +m:add:boolean
     +m:add:boolean,boolean
     +m:add:boolean,boolean,boolean
     +m:add:boolean,boolean,boolean,boolean
     +m:addAll:BooleanArray
     +m:addAll:BooleanArray,int,int
     +m:addAll:boolean[]
     +m:addAll:boolean[],int,int
     +m:clear:
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:insert:int,boolean
     +m:insertRange:int,int
     +m:isEmpty:
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:BooleanArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:reverse:
     +m:set:int,boolean
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:BufferUtils{
     +m:clear:ByteBuffer,int
     +m:copy:Buffer,Buffer,int
     +m:copy:byte[],int,Buffer,int
     +m:copy:char[],int,Buffer,int
     +m:copy:char[],int,int,Buffer
     +m:copy:double[],int,Buffer,int
     +m:copy:double[],int,int,Buffer
     +m:copy:float[],Buffer,int,int
     +m:copy:float[],int,Buffer,int
     +m:copy:float[],int,int,Buffer
     +m:copy:int[],int,Buffer,int
     +m:copy:int[],int,int,Buffer
     +m:copy:long[],int,Buffer,int
     +m:copy:long[],int,int,Buffer
     +m:copy:short[],int,Buffer,int
     +m:disposeUnsafeByteBuffer:ByteBuffer
     +m:findFloats:Buffer,int,Buffer,int
     +m:findFloats:Buffer,int,Buffer,int,float
     +m:findFloats:Buffer,int,float[],int
     +m:findFloats:Buffer,int,float[],int,float
     +m:findFloats:float[],int,Buffer,int
     +m:findFloats:float[],int,Buffer,int,float
     +m:findFloats:float[],int,float[],int
     +m:findFloats:float[],int,float[],int,float
     +m:getAllocatedBytesUnsafe:
     +m:getUnsafeBufferAddress:Buffer
     +m:isUnsafeByteBuffer:ByteBuffer
     +m:newByteBuffer:int
     +m:newCharBuffer:int
     +m:newDoubleBuffer:int
     +m:newFloatBuffer:int
     +m:newIntBuffer:int
     +m:newLongBuffer:int
     +m:newShortBuffer:int
     +m:newUnsafeByteBuffer:ByteBuffer
     +m:newUnsafeByteBuffer:int
     +m:transform:Buffer,int,int,int,Matrix3
     +m:transform:Buffer,int,int,int,Matrix3,int
     +m:transform:Buffer,int,int,int,Matrix4
     +m:transform:Buffer,int,int,int,Matrix4,int
     +m:transform:float[],int,int,int,Matrix3
     +m:transform:float[],int,int,int,Matrix3,int
     +m:transform:float[],int,int,int,Matrix4
     +m:transform:float[],int,int,int,Matrix4,int
    }
    >c:ByteArray{
     +x:
     +x:int
     +x:byte[]
     +x:ByteArray
     +x:boolean,int
     +x:boolean,byte[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:byte[]
     +m:add:byte
     +m:add:byte,byte
     +m:add:byte,byte,byte
     +m:add:byte,byte,byte,byte
     +m:addAll:ByteArray
     +m:addAll:ByteArray,int,int
     +m:addAll:byte[]
     +m:addAll:byte[],int,int
     +m:clear:
     +m:contains:byte
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:incr:byte
     +m:incr:int,byte
     +m:indexOf:byte
     +m:insert:int,byte
     +m:insertRange:int,int
     +m:isEmpty:
     +m:lastIndexOf:byte
     +m:mul:byte
     +m:mul:int,byte
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:ByteArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:byte
     +m:reverse:
     +m:set:int,byte
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:CharArray{
     +x:
     +x:int
     +x:char[]
     +x:CharArray
     +x:boolean,int
     +x:boolean,char[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:char[]
     +m:add:char
     +m:add:char,char
     +m:add:char,char,char
     +m:add:char,char,char,char
     +m:addAll:CharArray
     +m:addAll:CharArray,int,int
     +m:addAll:char[]
     +m:addAll:char[],int,int
     +m:clear:
     +m:contains:char
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:incr:char
     +m:incr:int,char
     +m:indexOf:char
     +m:insert:int,char
     +m:insertRange:int,int
     +m:isEmpty:
     +m:lastIndexOf:char
     +m:mul:char
     +m:mul:int,char
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:CharArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:char
     +m:reverse:
     +m:set:int,char
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:Collections{
     +x:
     +f:allocateIterators
    }
    >c:DataBuffer{
     +x:
     +x:int
     +m:getBuffer:
     +m:toArray:
    }
    >c:DataInput{
     +x:InputStream
     +m:readInt:boolean
     +m:readString:
    }
    >c:DataOutput{
     +x:OutputStream
     +m:writeInt:int,boolean
     +m:writeString:String
    }
    >c:DelayedRemovalArray{
     +x:
     +x:int
     +x:Array
     +x:Class
     +x:Object[]
     +x:boolean,int
     +x:boolean,int,Class
     +x:boolean,Object[],int,int
     +m:with:Object[]
     +m:begin:
     +m:clear:
     +m:end:
     +m:insert:int,Object
     +m:insertRange:int,int
     +m:pop:
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:Object,boolean
     +m:reverse:
     +m:set:int,Object
     +m:setSize:int
     +m:shuffle:
     +m:sort:
     +m:sort:Comparator
     +m:swap:int,int
     +m:truncate:int
    }
    >c:FloatArray{
     +x:
     +x:int
     +x:float[]
     +x:FloatArray
     +x:boolean,int
     +x:boolean,float[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:float[]
     +m:add:float
     +m:add:float,float
     +m:add:float,float,float
     +m:add:float,float,float,float
     +m:addAll:FloatArray
     +m:addAll:FloatArray,int,int
     +m:addAll:float[]
     +m:addAll:float[],int,int
     +m:clear:
     +m:contains:float
     +m:ensureCapacity:int
     +m:equals:Object
     +m:equals:Object,float
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:incr:float
     +m:incr:int,float
     +m:indexOf:float
     +m:insert:int,float
     +m:insertRange:int,int
     +m:isEmpty:
     +m:lastIndexOf:float
     +m:mul:float
     +m:mul:int,float
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:FloatArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:float
     +m:reverse:
     +m:set:int,float
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:FlushablePool{
     +m:flush:
     +m:free:Object
     +m:freeAll:Array
     +m:obtain:
    }
    -c:GdxNativesLoader
    -c:GdxRuntimeException
    >c:I18NBundle{
     -x:
     -m:createBundle:FileHandle
     -m:createBundle:FileHandle,Locale
     -m:createBundle:FileHandle,Locale,String
     -m:createBundle:FileHandle,String
     -m:getExceptionOnMissingKey:
     -m:getSimpleFormatter:
     -m:setExceptionOnMissingKey:boolean
     -m:setSimpleFormatter:boolean
     +m:debug:String
     +m:format:String,Object[]
     +m:get:String
     +m:getLocale:
     +m:keys:
    }
    >c:IdentityMap{
     +x:
     +x:int
     +x:IdentityMap
     +x:int,float
     +m:hashCode:
    }
    >c:IntArray{
     +x:
     +x:int
     +x:int[]
     +x:IntArray
     +x:boolean,int
     +x:boolean,int[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:int[]
     +m:add:int
     +m:add:int,int
     +m:add:int,int,int
     +m:add:int,int,int,int
     +m:addAll:IntArray
     +m:addAll:IntArray,int,int
     +m:addAll:int[]
     +m:addAll:int[],int,int
     +m:clear:
     +m:contains:int
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:incr:int
     +m:incr:int,int
     +m:indexOf:int
     +m:insert:int,int
     +m:insertRange:int,int
     +m:isEmpty:
     +m:lastIndexOf:int
     +m:mul:int
     +m:mul:int,int
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:IntArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:int
     +m:reverse:
     +m:set:int,int
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:IntFloatMap{
     >c:Entries{
      +x:IntFloatMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:IntFloatMap
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:IntArray
     }
     >c:Values{
      +x:IntFloatMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:FloatArray
     }
     +x:
     +x:int
     +x:IntFloatMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:int
     +m:containsValue:float
     +m:containsValue:float,float
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:findKey:float,float,int
     +m:findKey:float,int
     +m:get:int,float
     +m:getAndIncrement:int,float,float
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:int,float
     +m:put:int,float,float
     +m:putAll:IntFloatMap
     +m:remove:int,float
     +m:shrink:int
     +m:toString:
     +m:values:
    }
    >c:IntIntMap{
     >c:Entries{
      +x:IntIntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:IntIntMap
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:IntArray
     }
     >c:Values{
      +x:IntIntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:IntArray
     }
     +x:
     +x:int
     +x:IntIntMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:int
     +m:containsValue:int
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:findKey:int,int
     +m:get:int,int
     +m:getAndIncrement:int,int,int
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:int,int
     +m:put:int,int,int
     +m:putAll:IntIntMap
     +m:remove:int,int
     +m:shrink:int
     +m:toString:
     +m:values:
    }
    >c:IntMap{
     >c:Entries{
      +x:IntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:IntMap
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:IntArray
     }
     >c:Values{
      +x:IntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
     }
     +x:
     +x:int
     +x:IntMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:int
     +m:containsValue:Object,boolean
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:equalsIdentity:Object
     +m:findKey:Object,boolean,int
     +m:get:int
     +m:get:int,Object
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:int,Object
     +m:putAll:IntMap
     +m:remove:int
     +m:shrink:int
     +m:toString:
     +m:values:
    }
    >c:IntSet{
     >c:IntSetIterator{
      +x:IntSet
      +f:hasNext
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
     }
     +x:
     +x:int
     +x:IntSet
     +x:int,float
     +f:size
     +m:with:int[]
     +m:add:int
     +m:addAll:IntArray
     +m:addAll:IntArray,int,int
     +m:addAll:IntSet
     +m:addAll:int[]
     +m:addAll:int[],int,int
     +m:clear:
     +m:clear:int
     +m:contains:int
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:notEmpty:
     +m:remove:int
     +m:shrink:int
     +m:toString:
    }
    >c:Json{
     -c:Serializable
     -c:Serializer
     -c:ReadOnlySerializer
     +x:
     +x:OutputType
     -m:addClassTag:String,Class
     +m:copyFields:Object,Object
     -m:fromJson:Class,Class,FileHandle
     -m:fromJson:Class,Class,InputStream
     -m:fromJson:Class,Class,Reader
     -m:fromJson:Class,Class,String
     -m:fromJson:Class,Class,char[],int,int
     -m:fromJson:Class,FileHandle
     -m:fromJson:Class,InputStream
     -m:fromJson:Class,Reader
     -m:fromJson:Class,String
     -m:fromJson:Class,char[],int,int
     -m:getClass:String
     +m:getIgnoreUnknownFields:
     -m:getSerializer:Class
     -m:getTag:Class
     +m:getWriter:
     -m:prettyPrint:Object
     -m:prettyPrint:Object,PrettyPrintSettings
     -m:prettyPrint:Object,int
     +m:prettyPrint:String
     +m:prettyPrint:String,PrettyPrintSettings
     +m:prettyPrint:String,int
     -m:readField:Object,Field,String,Class,JsonValue
     -m:readField:Object,String,Class,JsonValue
     +m:readField:Object,String,JsonValue
     -m:readField:Object,String,String,Class,JsonValue
     +m:readField:Object,String,String,JsonValue
     +m:readFields:Object,JsonValue
     -m:readValue:Class,Class,JsonValue
     -m:readValue:Class,Class,Object,JsonValue
     -m:readValue:Class,JsonValue
     -m:readValue:String,Class,Class,JsonValue
     -m:readValue:String,Class,Class,Object,JsonValue
     -m:readValue:String,Class,JsonValue
     -m:readValue:String,Class,Object,JsonValue
     -m:setDefaultSerializer:Serializer
     -m:setDeprecated:Class,String,boolean
     -m:setElementType:Class,String,Class
     +m:setEnumNames:boolean
     +m:setIgnoreDeprecated:boolean
     +m:setIgnoreUnknownFields:boolean
     +m:setOutputType:OutputType
     +m:setQuoteLongValues:boolean
     +m:setReadDeprecated:boolean
     -m:setSerializer:Class,Serializer
     +m:setSortFields:boolean
     +m:setTypeName:String
     +m:setUsePrototypes:boolean
     +m:setWriter:Writer
     -m:toJson:Object
     -m:toJson:Object,Class
     -m:toJson:Object,Class,Class
     -m:toJson:Object,Class,Class,FileHandle
     -m:toJson:Object,Class,Class,Writer
     -m:toJson:Object,Class,FileHandle
     -m:toJson:Object,Class,Writer
     -m:toJson:Object,FileHandle
     -m:toJson:Object,Writer
     +m:writeArrayEnd:
     +m:writeArrayStart:
     +m:writeArrayStart:String
     +m:writeField:Object,String
     -m:writeField:Object,String,Class
     -m:writeField:Object,String,String
     -m:writeField:Object,String,String,Class
     +m:writeFields:Object
     +m:writeObjectEnd:
     +m:writeObjectStart:
     -m:writeObjectStart:Class,Class
     +m:writeObjectStart:String
     -m:writeObjectStart:String,Class,Class
     -m:writeType:Class
     +m:writeValue:Object
     -m:writeValue:Object,Class
     -m:writeValue:Object,Class,Class
     +m:writeValue:String,Object
     -m:writeValue:String,Object,Class
     -m:writeValue:String,Object,Class,Class
    }
    >c:JsonReader{
     +x:
     +m:isStopped:
     -m:parse:FileHandle
     -m:parse:InputStream
     +m:parse:Reader
     +m:parse:String
     +m:parse:char[],int,int
     +m:stop:
    }
    -c:JsonSkimmer
    >c:JsonString{
     +x:
     +m:array:
     +m:array:String
     +m:close:
     +m:getBuffer:
     +m:json:String
     +m:json:String,String
     +m:name:String
     +m:object:
     +m:object:String
     +m:pop:
     +m:reset:
     +m:set:String,Object
     +m:setOutputType:OutputType
     +m:setQuoteLongValues:boolean
     +m:toString:
     +m:value:Object
    }
    >c:JsonValue{
     >c:JsonIterator{
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
     }
     >c:PrettyPrintSettings{
      +x:
      +f:outputType
      +f:singleLineColumns
      +f:wrapNumericArrays
     }
     >c:ValueType{
      +f:array
      +f:booleanValue
      +f:doubleValue
      +f:longValue
      +f:nullValue
      +f:object
      +f:stringValue
      +m:valueOf:String
      +m:values:
     }
     +x:long
     +x:String
     +x:double
     +x:boolean
     +x:ValueType
     +x:long,String
     +x:double,String
     +f:child
     +f:name
     +f:next
     +f:parent
     +f:prev
     +f:size
     +m:addChild:JsonValue
     +m:addChild:String,JsonValue
     +m:asBoolean:
     +m:asBooleanArray:
     +m:asByte:
     +m:asByteArray:
     +m:asChar:
     +m:asCharArray:
     +m:asDouble:
     +m:asDoubleArray:
     +m:asFloat:
     +m:asFloatArray:
     +m:asInt:
     +m:asIntArray:
     +m:asLong:
     +m:asLongArray:
     +m:asShort:
     +m:asShortArray:
     +m:asString:
     +m:asStringArray:
     +m:child:
     +m:get:String
     +m:get:int
     +m:getBoolean:String
     +m:getBoolean:String,boolean
     +m:getBoolean:int
     +m:getByte:String
     +m:getByte:String,byte
     +m:getByte:int
     +m:getChar:String
     +m:getChar:String,char
     +m:getChar:int
     +m:getChild:String
     +m:getDouble:String
     +m:getDouble:String,double
     +m:getDouble:int
     +m:getFloat:String
     +m:getFloat:String,float
     +m:getFloat:int
     +m:getInt:String
     +m:getInt:String,int
     +m:getInt:int
     +m:getLong:String
     +m:getLong:String,long
     +m:getLong:int
     +m:getShort:String
     +m:getShort:String,short
     +m:getShort:int
     +m:getString:String
     +m:getString:String,String
     +m:getString:int
     +m:has:String
     +m:hasChild:String
     +m:isArray:
     +m:isBoolean:
     +m:isDouble:
     +m:isEmpty:
     +m:isLong:
     +m:isNull:
     +m:isNumber:
     +m:isObject:
     +m:isString:
     +m:isValue:
     +m:iterator:
     +m:iterator:String
     +m:name:
     +m:next:
     +m:notEmpty:
     +m:parent:
     +m:prettyPrint:OutputType,Writer
     +m:prettyPrint:OutputType,int
     +m:prettyPrint:PrettyPrintSettings
     +m:prev:
     +m:remove:
     +m:remove:String
     +m:remove:int
     +m:require:String
     +m:require:int
     +m:set:String
     +m:set:boolean
     +m:set:double,String
     +m:set:long,String
     +m:setName:String
     +m:setNext:JsonValue
     +m:setPrev:JsonValue
     +m:setType:ValueType
     +m:toJson:OutputType
     +m:toString:
     +m:trace:
     +m:type:
    }
    >c:JsonWriter{
     >c:OutputType{
      +f:javascript
      +f:json
      +f:minimal
      +m:valueOf:String
      +m:values:
      +m:quoteName:String
      +m:quoteValue:Object
     }
     +x:Writer
     +m:array:
     +m:array:String
     +m:close:
     +m:flush:
     +m:getWriter:
     +m:json:String
     +m:json:String,String
     +m:name:String
     +m:object:
     +m:object:String
     +m:pop:
     +m:set:String,Object
     +m:setOutputType:OutputType
     +m:setQuoteLongValues:boolean
     +m:value:Object
     +m:write:char[],int,int
    }
    >c:LittleEndianInputStream{
     +x:InputStream
     +m:readBoolean:
     +m:readByte:
     +m:readChar:
     +m:readDouble:
     +m:readFloat:
     +m:readFully:byte[]
     +m:readFully:byte[],int,int
     +m:readInt:
     +m:readLine:
     +m:readLong:
     +m:readShort:
     +m:readUTF:
     +m:readUnsignedByte:
     +m:readUnsignedShort:
     +m:skipBytes:int
    }
    >c:Logger{
     +x:String
     +x:String,int
     +f:DEBUG
     +f:ERROR
     +f:INFO
     +f:NONE
     +m:debug:String
     +m:debug:String,Exception
     +m:error:String
     +m:error:String,Throwable
     +m:getLevel:
     +m:info:String
     +m:info:String,Exception
     +m:setLevel:int
    }
    >c:LongArray{
     +x:
     +x:int
     +x:long[]
     +x:LongArray
     +x:boolean,int
     +x:boolean,long[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:long[]
     +m:add:long
     +m:add:long,long
     +m:add:long,long,long
     +m:add:long,long,long,long
     +m:addAll:LongArray
     +m:addAll:LongArray,int,int
     +m:addAll:long[]
     +m:addAll:long[],int,int
     +m:clear:
     +m:contains:long
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:incr:int,long
     +m:incr:long
     +m:indexOf:long
     +m:insert:int,long
     +m:insertRange:int,int
     +m:isEmpty:
     +m:lastIndexOf:char
     +m:mul:int,long
     +m:mul:long
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:LongArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:long
     +m:reverse:
     +m:set:int,long
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:LongMap{
     >c:Entries{
      +x:LongMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:LongMap
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:LongArray
     }
     >c:Values{
      +x:LongMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
     }
     +x:
     +x:int
     +x:LongMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:long
     +m:containsValue:Object,boolean
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:equalsIdentity:Object
     +m:findKey:Object,boolean,long
     +m:get:long
     +m:get:long,Object
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:long,Object
     +m:putAll:LongMap
     +m:remove:long
     +m:shrink:int
     +m:toString:
     +m:values:
    }
    >c:LongQueue{
     +x:
     +x:int
     +f:size
     +m:addFirst:long
     +m:addLast:long
     +m:clear:
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:indexOf:long
     +m:isEmpty:
     +m:last:
     +m:notEmpty:
     +m:removeFirst:
     +m:removeIndex:int
     +m:removeLast:
     +m:removeValue:long
     +m:toString:
     +m:toString:String
    }
    >c:NumberUtils{
     +x:
     +m:doubleToLongBits:double
     +m:floatToIntBits:float
     +m:floatToIntColor:float
     +m:floatToRawIntBits:float
     +m:intBitsToFloat:int
     +m:intToFloatColor:int
     +m:longBitsToDouble:long
    }
    >c:ObjectFloatMap{
     >c:Entries{
      +x:ObjectFloatMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:ObjectFloatMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     >c:Values{
      +x:ObjectFloatMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:FloatArray
     }
     +x:
     +x:int
     +x:ObjectFloatMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:Object
     +m:containsValue:float
     +m:containsValue:float,float
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:findKey:float
     +m:findKey:float,float
     +m:get:Object,float
     +m:getAndIncrement:Object,float,float
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:Object,float
     +m:put:Object,float,float
     +m:putAll:ObjectFloatMap
     +m:remove:Object,float
     +m:shrink:int
     +m:toString:
     +m:toString:String
     +m:values:
    }
    >c:ObjectIntMap{
     >c:Entries{
      +x:ObjectIntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:ObjectIntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     >c:Values{
      +x:ObjectIntMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:IntArray
     }
     +x:
     +x:int
     +x:ObjectIntMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:Object
     +m:containsValue:int
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:findKey:int
     +m:get:Object,int
     +m:getAndIncrement:Object,int,int
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:Object,int
     +m:put:Object,int,int
     +m:putAll:ObjectIntMap
     +m:remove:Object,int
     +m:shrink:int
     +m:toString:
     +m:toString:String
     +m:values:
    }
    >c:ObjectLongMap{
     >c:Entries{
      +x:ObjectLongMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:ObjectLongMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     >c:Values{
      +x:ObjectLongMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:LongArray
     }
     +x:
     +x:int
     +x:ObjectLongMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:Object
     +m:containsValue:long
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:findKey:long
     +m:get:Object,long
     +m:getAndIncrement:Object,long,long
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:Object,long
     +m:put:Object,long,long
     +m:putAll:ObjectLongMap
     +m:remove:Object,long
     +m:shrink:int
     +m:toString:
     +m:toString:String
     +m:values:
    }
    >c:ObjectMap{
     >c:Entries{
      +x:ObjectMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Entry{
      +x:
      +f:key
      +f:value
      +m:toString:
     }
     >c:Keys{
      +x:ObjectMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     >c:Values{
      +x:ObjectMap
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     +x:
     +x:int
     +x:ObjectMap
     +x:int,float
     +f:size
     +m:clear:
     +m:clear:int
     +m:containsKey:Object
     +m:containsValue:Object,boolean
     +m:ensureCapacity:int
     +m:entries:
     +m:equals:Object
     +m:equalsIdentity:Object
     +m:findKey:Object,boolean
     +m:get:Object
     +m:get:Object,Object
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:keys:
     +m:notEmpty:
     +m:put:Object,Object
     +m:putAll:ObjectMap
     +m:remove:Object
     +m:shrink:int
     +m:toString:
     +m:toString:String
     +m:values:
    }
    >c:ObjectSet{
     >c:ObjectSetIterator{
      +x:ObjectSet
      +f:hasNext
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     +x:
     +x:int
     +x:ObjectSet
     +x:int,float
     +f:size
     +m:with:Object[]
     +m:add:Object
     +m:addAll:Array
     +m:addAll:Array,int,int
     +m:addAll:ObjectSet
     +m:addAll:Object[]
     +m:addAll:Object[],int,int
     +m:clear:
     +m:clear:int
     +m:contains:Object
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:Object
     +m:hashCode:
     +m:isEmpty:
     +m:iterator:
     +m:notEmpty:
     +m:remove:Object
     +m:shrink:int
     +m:toString:
     +m:toString:String
    }
    >c:OrderedMap{
     >c:OrderedMapEntries{
      +x:OrderedMap
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:OrderedMapKeys{
      +x:OrderedMap
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     >c:OrderedMapValues{
      +x:OrderedMap
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     +x:
     +x:int
     +x:OrderedMap
     +x:int,float
     +m:alter:Object,Object
     +m:alterIndex:int,Object
     +m:clear:
     +m:clear:int
     +m:entries:
     +m:iterator:
     +m:keys:
     +m:orderedKeys:
     +m:put:Object,Object
     +m:putAll:OrderedMap
     +m:remove:Object
     +m:removeIndex:int
     +m:values:
    }
    >c:OrderedSet{
     >c:OrderedSetIterator{
      +x:OrderedSet
      +m:next:
      +m:remove:
      +m:reset:
      +m:toArray:
      +m:toArray:Array
     }
     +x:
     +x:int
     +x:OrderedSet
     +x:int,float
     +m:with:Object[]
     +m:add:Object
     +m:add:Object,int
     +m:addAll:OrderedSet
     +m:alter:Object,Object
     +m:alterIndex:int,Object
     +m:clear:
     +m:clear:int
     +m:iterator:
     +m:orderedItems:
     +m:remove:Object
     +m:removeIndex:int
     +m:toString:
     +m:toString:String
    }
    >c:Os{
     +f:Android
     +f:IOS
     +f:Linux
     +f:MacOsX
     +f:Windows
     +m:valueOf:String
     +m:values:
     +m:getJniPlatform:
     +m:getLibExtension:
     +m:getLibPrefix:
    }
    -c:PauseableThread
    >c:PerformanceCounter{
     +x:String
     +x:String,int
     +f:current
     +f:load
     +f:name
     +f:time
     +f:valid
     +m:reset:
     +m:start:
     +m:stop:
     +m:tick:
     +m:tick:float
     +m:toString:
     +m:toString:StringBuilder
    }
    >c:PerformanceCounters{
     +x:
     +f:counters
     +m:add:String
     +m:add:String,int
     +m:tick:
     +m:tick:float
     +m:toString:StringBuilder
    }
    >c:Pool{
     >c:Poolable{
      +z
      +m:reset:
     }
     +f:max
     +f:peak
     +m:clear:
     +m:fill:int
     +m:free:Object
     +m:freeAll:Array
     +m:getFree:
     +m:obtain:
    }
    >c:PooledLinkedList{
     +x:int
     +m:add:Object
     +m:addFirst:Object
     +m:clear:
     +m:iter:
     +m:iterReverse:
     +m:next:
     +m:previous:
     +m:remove:
     +m:removeLast:
     +m:size:
    }
    >c:Pools{
     +m:free:Object
     +m:freeAll:Array
     +m:freeAll:Array,boolean
     +m:get:Class
     +m:get:Class,int
     +m:obtain:Class
     +m:set:Class,Pool
    }
    -c:PropertiesUtils
    >c:QuadTreeFloat{
     +x:
     +x:int,int
     +f:DISTSQR
     +f:VALUE
     +f:X
     +f:Y
     +f:count
     +f:depth
     +f:height
     +f:maxDepth
     +f:maxValues
     +f:ne
     +f:nw
     +f:se
     +f:sw
     +f:values
     +f:width
     +f:x
     +f:y
     +m:add:float,float,float
     +m:nearest:float,float,FloatArray
     +m:query:Rectangle,FloatArray
     +m:query:float,float,float,FloatArray
     +m:reset:
     +m:setBounds:float,float,float,float
    }
    >c:Queue{
     >c:QueueIterable{
      +x:Queue
      +x:Queue,boolean
      +m:iterator:
     }
     >c:QueueIterator{
      +x:Queue
      +x:Queue,boolean
      +m:hasNext:
      +m:iterator:
      +m:next:
      +m:remove:
      +m:reset:
     }
     +x:
     +x:int
     +x:int,Class
     +f:size
     +m:addFirst:Object
     +m:addLast:Object
     +m:clear:
     +m:ensureCapacity:int
     +m:equals:Object
     +m:equalsIdentity:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:indexOf:Object,boolean
     +m:isEmpty:
     +m:iterator:
     +m:last:
     +m:notEmpty:
     +m:removeFirst:
     +m:removeIndex:int
     +m:removeLast:
     +m:removeValue:Object,boolean
     +m:toString:
     +m:toString:String
    }
    >c:QuickSelect{
     +x:
     +m:select:Object[],Comparator,int,int
    }
    -c:ReflectionPool
    >c:Scaling{
     +f:contain
     +f:fill
     +f:fillX
     +f:fillY
     +f:fit
     +f:none
     +f:stretch
     +f:stretchX
     +f:stretchY
     +m:apply:float,float,float,float
    }
    >c:ScreenUtils{
     +x:
     +m:clear:Color
     +m:clear:Color,boolean
     +m:clear:float,float,float,float
     +m:clear:float,float,float,float,boolean
     +m:clear:float,float,float,float,boolean,boolean
     +m:getFrameBufferPixels:boolean
     +m:getFrameBufferPixels:int,int,int,int,boolean
     +m:getFrameBufferTexture:
     +m:getFrameBufferTexture:int,int,int,int
    }
    >c:Select{
     +x:
     +m:instance:
     +m:select:Object[],Comparator,int,int
     +m:selectIndex:Object[],Comparator,int,int
    }
    -c:SerializationException
    -c:SharedLibraryLoadRuntimeException
    -c:SharedLibraryLoader
    >c:ShortArray{
     +x:
     +x:int
     +x:short[]
     +x:ShortArray
     +x:boolean,int
     +x:boolean,short[],int,int
     +f:items
     +f:ordered
     +f:size
     +m:with:short[]
     +m:add:int
     +m:add:short
     +m:add:short,short
     +m:add:short,short,short
     +m:add:short,short,short,short
     +m:addAll:ShortArray
     +m:addAll:ShortArray,int,int
     +m:addAll:short[]
     +m:addAll:short[],int,int
     +m:clear:
     +m:contains:short
     +m:ensureCapacity:int
     +m:equals:Object
     +m:first:
     +m:get:int
     +m:hashCode:
     +m:incr:int,short
     +m:incr:short
     +m:indexOf:short
     +m:insert:int,short
     +m:insertRange:int,int
     +m:isEmpty:
     +m:lastIndexOf:char
     +m:mul:int,short
     +m:mul:short
     +m:notEmpty:
     +m:peek:
     +m:pop:
     +m:random:
     +m:removeAll:ShortArray
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:short
     +m:reverse:
     +m:set:int,short
     +m:setSize:int
     +m:shrink:
     +m:shuffle:
     +m:sort:
     +m:swap:int,int
     +m:toArray:
     +m:toString:
     +m:toString:String
     +m:truncate:int
    }
    >c:SnapshotArray{
     +x:
     +x:int
     +x:Array
     +x:Class
     +x:Object[]
     +x:boolean,int
     +x:boolean,int,Class
     +x:boolean,Object[],int,int
     +m:with:Object[]
     +m:begin:
     +m:clear:
     +m:end:
     +m:insert:int,Object
     +m:insertRange:int,int
     +m:pop:
     +m:removeAll:Array,boolean
     +m:removeIndex:int
     +m:removeRange:int,int
     +m:removeValue:Object,boolean
     +m:reverse:
     +m:set:int,Object
     +m:setSize:int
     +m:shuffle:
     +m:sort:
     +m:sort:Comparator
     +m:swap:int,int
     +m:truncate:int
    }
    >c:Sort{
     +x:
     +m:instance:
     +m:sort:Array
     +m:sort:Array,Comparator
     +m:sort:Object[]
     +m:sort:Object[],Comparator
     +m:sort:Object[],Comparator,int,int
     +m:sort:Object[],int,int
    }
    >c:SortedIntList{
     >c:Iterator{
      +m:hasNext:
      +m:next:
      +m:remove:
      +m:reset:
     }
     >c:Node{
      +x:
      +f:index
      +f:value
     }
     +x:
     +m:clear:
     +m:get:int
     +m:insert:int,Object
     +m:isEmpty:
     +m:iterator:
     +m:notEmpty:
     +m:size:
    }
    >c:StreamUtils{
     >c:OptimizedByteArrayOutputStream{
      +x:int
      +m:getBuffer:
      +m:toByteArray:
     }
     -x:
     +f:DEFAULT_BUFFER_SIZE
     +f:EMPTY_BYTES
     +m:closeQuietly:Closeable
     +m:copyStream:InputStream,ByteBuffer
     +m:copyStream:InputStream,ByteBuffer,byte[]
     +m:copyStream:InputStream,ByteBuffer,int
     +m:copyStream:InputStream,OutputStream
     +m:copyStream:InputStream,OutputStream,byte[]
     +m:copyStream:InputStream,OutputStream,int
     +m:copyStreamToByteArray:InputStream
     +m:copyStreamToByteArray:InputStream,int
     +m:copyStreamToString:InputStream
     +m:copyStreamToString:InputStream,int
     +m:copyStreamToString:InputStream,int,String
    }
    >c:StringBuilder{
     +x:
     +x:int
     +x:String
     +x:CharSequence
     +x:StringBuilder
     +f:chars
     +f:length
     +m:numChars:int,int
     +m:numChars:long,int
     +m:append:CharSequence
     +m:append:CharSequence,int,int
     +m:append:Object
     +m:append:String
     +m:append:String,String
     +m:append:StringBuilder
     +m:append:StringBuilder,int,int
     +m:append:boolean
     +m:append:char
     +m:append:char[]
     +m:append:char[],int,int
     +m:append:double
     +m:append:float
     +m:append:int
     +m:append:int,int
     +m:append:int,int,char
     +m:append:long
     +m:append:long,int
     +m:append:long,int,char
     +m:appendCodePoint:int
     +m:appendLine:String
     +m:capacity:
     +m:charAt:int
     +m:clear:
     +m:codePointAt:int
     +m:codePointBefore:int
     +m:codePointCount:int,int
     +m:contains:String
     +m:containsIgnoreCase:String
     +m:delete:int,int
     +m:deleteCharAt:int
     +m:ensureCapacity:int
     +m:equals:Object
     +m:equalsIgnoreCase:String
     +m:equalsIgnoreCase:StringBuilder
     +m:getChars:int,int,char[],int
     +m:hashCode:
     +m:indexOf:String
     +m:indexOf:String,int
     +m:indexOfIgnoreCase:String,int
     +m:insert:int,CharSequence
     +m:insert:int,CharSequence,int,int
     +m:insert:int,Object
     +m:insert:int,String
     +m:insert:int,boolean
     +m:insert:int,char
     +m:insert:int,char[]
     +m:insert:int,char[],int,int
     +m:insert:int,double
     +m:insert:int,float
     +m:insert:int,int
     +m:insert:int,long
     +m:isEmpty:
     +m:lastIndexOf:String
     +m:lastIndexOf:String,int
     +m:length:
     +m:notEmpty:
     +m:offsetByCodePoints:int,int
     +m:replace:String,String
     +m:replace:char,String
     +m:replace:int,int,String
     +m:reverse:
     +m:setCharAt:int,char
     +m:setLength:int
     +m:subSequence:int,int
     +m:substring:int
     +m:substring:int,int
     +m:toString:
     +m:toStringAndClear:
     +m:trimToSize:
    }
    >c:TimeUtils{
     +x:
     +m:millis:
     +m:millisToNanos:long
     +m:nanoTime:
     +m:nanosToMillis:long
     +m:timeSinceMillis:long
     +m:timeSinceNanos:long
    }
    >c:Timer{
     >c:Task{
      +m:cancel:
      +m:getExecuteTimeMillis:
      +m:isScheduled:
      +m:run:
     }
     +x:
     +m:instance:
     +m:post:Task
     +m:schedule:Task,float
     +m:schedule:Task,float,float
     +m:schedule:Task,float,float,int
     +m:clear:
     +m:delay:long
     +m:isEmpty:
     +m:postTask:Task
     +m:scheduleTask:Task,float
     +m:scheduleTask:Task,float,float
     +m:scheduleTask:Task,float,float,int
     +m:start:
     +m:stop:
    }
    >c:UBJsonReader{
     +x:
     +f:oldFormat
     +m:parse:DataInputStream
     -m:parse:FileHandle
     +m:parse:InputStream
    }
    >c:UBJsonWriter{
     +x:OutputStream
     +m:array:
     +m:array:String
     +m:close:
     +m:flush:
     +m:name:String
     +m:object:
     +m:object:String
     +m:pop:
     +m:set:String
     +m:set:String,String
     +m:set:String,String[]
     +m:set:String,boolean
     +m:set:String,boolean[]
     +m:set:String,byte
     +m:set:String,byte[]
     +m:set:String,char
     +m:set:String,char[]
     +m:set:String,double
     +m:set:String,double[]
     +m:set:String,float
     +m:set:String,float[]
     +m:set:String,int
     +m:set:String,int[]
     +m:set:String,long
     +m:set:String,long[]
     +m:set:String,short
     +m:set:String,short[]
     +m:value:
     +m:value:JsonValue
     +m:value:Object
     +m:value:String
     +m:value:String[]
     +m:value:boolean
     +m:value:boolean[]
     +m:value:byte
     +m:value:byte[]
     +m:value:char
     +m:value:char[]
     +m:value:double
     +m:value:double[]
     +m:value:float
     +m:value:float[]
     +m:value:int
     +m:value:int[]
     +m:value:long
     +m:value:long[]
     +m:value:short
     +m:value:short[]
    }
    >c:XmlReader{
     >c:Element{
      +x:String,Element
      +m:addChild:Element
      +m:get:String
      +m:get:String,String
      +m:getAttribute:String
      +m:getAttribute:String,String
      +m:getAttributes:
      +m:getBoolean:String
      +m:getBoolean:String,boolean
      +m:getBooleanAttribute:String
      +m:getBooleanAttribute:String,boolean
      +m:getChild:int
      +m:getChildByName:String
      +m:getChildByNameRecursive:String
      +m:getChildCount:
      +m:getChildrenByName:String
      +m:getChildrenByNameRecursively:String
      +m:getFloat:String
      +m:getFloat:String,float
      +m:getFloatAttribute:String
      +m:getFloatAttribute:String,float
      +m:getInt:String
      +m:getInt:String,int
      +m:getIntAttribute:String
      +m:getIntAttribute:String,int
      +m:getName:
      +m:getParent:
      +m:getText:
      +m:hasAttribute:String
      +m:hasChild:String
      +m:hasChildRecursive:String
      +m:remove:
      +m:removeChild:Element
      +m:removeChild:int
      +m:setAttribute:String,String
      +m:setText:String
      +m:toString:
      +m:toString:String
     }
     +x:
     -m:parse:FileHandle
     +m:parse:InputStream
     +m:parse:Reader
     +m:parse:String
     +m:parse:char[],int,int
    }
    >c:XmlWriter{
     +x:Writer
     +f:indent
     +m:attribute:String,Object
     +m:close:
     +m:element:String
     +m:element:String,Object
     +m:flush:
     +m:pop:
     +m:text:Object
     +m:write:char[],int,int
    }
   }
   >c:Application{
    >c:ApplicationType{
     +f:Android
     +f:Applet
     +f:Desktop
     +f:HeadlessDesktop
     +f:WebGL
     +f:iOS
     +m:valueOf:String
     +m:values:
    }
    -z
    -f:LOG_DEBUG
    -f:LOG_ERROR
    -f:LOG_INFO
    -f:LOG_NONE
    +m:addLifecycleListener:LifecycleListener
    +m:debug:String,String
    +m:debug:String,String,Throwable
    +m:error:String,String
    +m:error:String,String,Throwable
    +m:exit:
    -m:getApplicationListener:
    -m:getApplicationLogger:
    +m:getAudio:
    +m:getClipboard:
    -m:getFiles:
    +m:getGraphics:
    +m:getInput:
    +m:getJavaHeap:
    +m:getLogLevel:
    +m:getNativeHeap:
    -m:getNet:
    -m:getPreferences:String
    +m:getType:
    +m:getVersion:
    +m:log:String,String
    +m:log:String,String,Throwable
    +m:postRunnable:Runnable
    -m:removeLifecycleListener:LifecycleListener
    -m:setApplicationLogger:ApplicationLogger
    -m:setLogLevel:int
   }
   >c:ApplicationListener{
    +z
    +m:create:
    +m:dispose:
    +m:pause:
    +m:render:
    +m:resize:int,int
    +m:resume:
   }
   -c:ApplicationLogger
   >c:Audio{
    +z
    +m:getAvailableOutputDevices:
    +m:newAudioDevice:int,boolean
    -m:newAudioRecorder:int,boolean
    -m:newMusic:FileHandle
    -m:newSound:FileHandle
    +m:switchOutputDevice:String
   }
   -c:Files
   >c:Graphics{
    >c:BufferFormat{
     +x:int,int,int,int,int,int,int,boolean
     +f:a
     +f:b
     +f:coverageSampling
     +f:depth
     +f:g
     +f:r
     +f:samples
     +f:stencil
     +m:toString:
    }
    >c:DisplayMode{
     +f:bitsPerPixel
     +f:height
     +f:refreshRate
     +f:width
     +m:toString:
    }
    >c:GraphicsType{
     +f:AndroidGL
     +f:JGLFW
     +f:LWJGL3
     +f:LWJGL
     +f:Mock
     +f:WebGL
     +f:iOSGL
     +m:valueOf:String
     +m:values:
    }
    >c:Monitor{
     +f:name
     +f:virtualX
     +f:virtualY
    }
    +z
    +m:getBackBufferHeight:
    +m:getBackBufferScale:
    +m:getBackBufferWidth:
    +m:getBufferFormat:
    +m:getDeltaTime:
    +m:getDensity:
    +m:getDisplayMode:
    +m:getDisplayMode:Monitor
    +m:getDisplayModes:
    +m:getDisplayModes:Monitor
    +m:getFrameId:
    +m:getFramesPerSecond:
    +m:getGL20:
    +m:getGL30:
    +m:getGL31:
    +m:getGL32:
    +m:getGLVersion:
    +m:getHeight:
    +m:getMonitor:
    +m:getMonitors:
    +m:getPpcX:
    +m:getPpcY:
    +m:getPpiX:
    +m:getPpiY:
    +m:getPrimaryMonitor:
    +m:getSafeInsetBottom:
    +m:getSafeInsetLeft:
    +m:getSafeInsetRight:
    +m:getSafeInsetTop:
    +m:getType:
    +m:getWidth:
    +m:isContinuousRendering:
    +m:isFullscreen:
    +m:isGL30Available:
    +m:isGL31Available:
    +m:isGL32Available:
    +m:newCursor:Pixmap,int,int
    +m:requestRendering:
    +m:setContinuousRendering:boolean
    +m:setCursor:Cursor
    +m:setForegroundFPS:int
    +m:setFullscreenMode:DisplayMode
    +m:setGL20:GL20
    +m:setGL30:GL30
    +m:setGL31:GL31
    +m:setGL32:GL32
    +m:setResizable:boolean
    +m:setSystemCursor:SystemCursor
    +m:setTitle:String
    +m:setUndecorated:boolean
    +m:setVSync:boolean
    +m:setWindowedMode:int,int
    +m:supportsDisplayModeChange:
    +m:supportsExtension:String
   }
   >c:Input{
    >c:InputStringValidator{
     +z
     +m:validate:String
    }
    >c:KeyboardHeightObserver{
     +z
     +m:onKeyboardHeightChanged:int
    }
    >c:TextInputListener{
     +z
     +m:canceled:
     +m:input:String
    }
    >c:Buttons{
     +x:
     +f:BACK
     +f:FORWARD
     +f:LEFT
     +f:MIDDLE
     +f:RIGHT
    }
    >c:Keys{
     +x:
     +f:A
     +f:ALT_LEFT
     +f:ALT_RIGHT
     +f:ANY_KEY
     +f:APOSTROPHE
     +f:AT
     +f:B
     +f:BACK
     +f:BACKSLASH
     +f:BACKSPACE
     +f:BUTTON_A
     +f:BUTTON_B
     +f:BUTTON_C
     +f:BUTTON_CIRCLE
     +f:BUTTON_L1
     +f:BUTTON_L2
     +f:BUTTON_MODE
     +f:BUTTON_R1
     +f:BUTTON_R2
     +f:BUTTON_SELECT
     +f:BUTTON_START
     +f:BUTTON_THUMBL
     +f:BUTTON_THUMBR
     +f:BUTTON_X
     +f:BUTTON_Y
     +f:BUTTON_Z
     +f:C
     +f:CALL
     +f:CAMERA
     +f:CAPS_LOCK
     +f:CENTER
     +f:CLEAR
     +f:COLON
     +f:COMMA
     +f:CONTROL_LEFT
     +f:CONTROL_RIGHT
     +f:D
     +f:DEL
     +f:DOWN
     +f:DPAD_CENTER
     +f:DPAD_DOWN
     +f:DPAD_LEFT
     +f:DPAD_RIGHT
     +f:DPAD_UP
     +f:E
     +f:END
     +f:ENDCALL
     +f:ENTER
     +f:ENVELOPE
     +f:EQUALS
     +f:ESCAPE
     +f:EXPLORER
     +f:F10
     +f:F11
     +f:F12
     +f:F13
     +f:F14
     +f:F15
     +f:F16
     +f:F17
     +f:F18
     +f:F19
     +f:F1
     +f:F20
     +f:F21
     +f:F22
     +f:F23
     +f:F24
     +f:F2
     +f:F3
     +f:F4
     +f:F5
     +f:F6
     +f:F7
     +f:F8
     +f:F9
     +f:F
     +f:FOCUS
     +f:FORWARD_DEL
     +f:G
     +f:GRAVE
     +f:H
     +f:HEADSETHOOK
     +f:HOME
     +f:I
     +f:INSERT
     +f:J
     +f:K
     +f:L
     +f:LEFT
     +f:LEFT_BRACKET
     +f:M
     +f:MAX_KEYCODE
     +f:MEDIA_FAST_FORWARD
     +f:MEDIA_NEXT
     +f:MEDIA_PLAY_PAUSE
     +f:MEDIA_PREVIOUS
     +f:MEDIA_REWIND
     +f:MEDIA_STOP
     +f:MENU
     +f:META_ALT_LEFT_ON
     +f:META_ALT_ON
     +f:META_ALT_RIGHT_ON
     +f:META_SHIFT_LEFT_ON
     +f:META_SHIFT_ON
     +f:META_SHIFT_RIGHT_ON
     +f:META_SYM_ON
     +f:MINUS
     +f:MUTE
     +f:N
     +f:NOTIFICATION
     +f:NUM
     +f:NUMPAD_0
     +f:NUMPAD_1
     +f:NUMPAD_2
     +f:NUMPAD_3
     +f:NUMPAD_4
     +f:NUMPAD_5
     +f:NUMPAD_6
     +f:NUMPAD_7
     +f:NUMPAD_8
     +f:NUMPAD_9
     +f:NUMPAD_ADD
     +f:NUMPAD_COMMA
     +f:NUMPAD_DIVIDE
     +f:NUMPAD_DOT
     +f:NUMPAD_ENTER
     +f:NUMPAD_EQUALS
     +f:NUMPAD_LEFT_PAREN
     +f:NUMPAD_MULTIPLY
     +f:NUMPAD_RIGHT_PAREN
     +f:NUMPAD_SUBTRACT
     +f:NUM_0
     +f:NUM_1
     +f:NUM_2
     +f:NUM_3
     +f:NUM_4
     +f:NUM_5
     +f:NUM_6
     +f:NUM_7
     +f:NUM_8
     +f:NUM_9
     +f:NUM_LOCK
     +f:O
     +f:P
     +f:PAGE_DOWN
     +f:PAGE_UP
     +f:PAUSE
     +f:PERIOD
     +f:PICTSYMBOLS
     +f:PLUS
     +f:POUND
     +f:POWER
     +f:PRINT_SCREEN
     +f:Q
     +f:R
     +f:RIGHT
     +f:RIGHT_BRACKET
     +f:S
     +f:SCROLL_LOCK
     +f:SEARCH
     +f:SEMICOLON
     +f:SHIFT_LEFT
     +f:SHIFT_RIGHT
     +f:SLASH
     +f:SOFT_LEFT
     +f:SOFT_RIGHT
     +f:SPACE
     +f:STAR
     +f:SWITCH_CHARSET
     +f:SYM
     +f:T
     +f:TAB
     +f:U
     +f:UNKNOWN
     +f:UP
     +f:V
     +f:VOLUME_DOWN
     +f:VOLUME_UP
     +f:W
     +f:X
     +f:Y
     +f:Z
     +m:toString:int
     +m:valueOf:String
    }
    >c:OnscreenKeyboardType{
     +f:Default
     +f:Email
     +f:NumberPad
     +f:Password
     +f:PhonePad
     +f:URI
     +m:valueOf:String
     +m:values:
    }
    >c:Orientation{
     +f:Landscape
     +f:Portrait
     +m:valueOf:String
     +m:values:
    }
    >c:Peripheral{
     +f:Accelerometer
     +f:Compass
     +f:Gyroscope
     +f:HapticFeedback
     +f:HardwareKeyboard
     +f:MultitouchScreen
     +f:OnscreenKeyboard
     +f:Pressure
     +f:RotationVector
     +f:Vibrator
     +m:valueOf:String
     +m:values:
    }
    >c:VibrationType{
     +f:HEAVY
     +f:LIGHT
     +f:MEDIUM
     +m:valueOf:String
     +m:values:
    }
    +z
    +m:closeTextInputField:boolean
    +m:getAccelerometerX:
    +m:getAccelerometerY:
    +m:getAccelerometerZ:
    +m:getAzimuth:
    +m:getCurrentEventTime:
    +m:getDeltaX:
    +m:getDeltaX:int
    +m:getDeltaY:
    +m:getDeltaY:int
    +m:getGyroscopeX:
    +m:getGyroscopeY:
    +m:getGyroscopeZ:
    +m:getInputProcessor:
    +m:getMaxPointers:
    +m:getNativeOrientation:
    +m:getPitch:
    +m:getPressure:
    +m:getPressure:int
    +m:getRoll:
    +m:getRotation:
    +m:getRotationMatrix:float[]
    +m:getTextInput:TextInputListener,String,String,String
    +m:getTextInput:TextInputListener,String,String,String,OnscreenKeyboardType
    +m:getX:
    +m:getX:int
    +m:getY:
    +m:getY:int
    +m:isButtonJustPressed:int
    +m:isButtonPressed:int
    +m:isCatchKey:int
    +m:isCursorCatched:
    +m:isKeyJustPressed:int
    +m:isKeyPressed:int
    +m:isPeripheralAvailable:Peripheral
    +m:isTouched:
    +m:isTouched:int
    +m:justTouched:
    +m:openTextInputField:NativeInputConfiguration
    +m:setCatchKey:int,boolean
    +m:setCursorCatched:boolean
    +m:setCursorPosition:int,int
    +m:setInputProcessor:InputProcessor
    +m:setKeyboardHeightObserver:KeyboardHeightObserver
    +m:setOnscreenKeyboardVisible:boolean
    +m:setOnscreenKeyboardVisible:boolean,OnscreenKeyboardType
    +m:vibrate:VibrationType
    +m:vibrate:int
    +m:vibrate:int,boolean
    +m:vibrate:int,int,boolean
   }
   >c:InputProcessor{
    +z
    +m:keyDown:int
    +m:keyTyped:char
    +m:keyUp:int
    +m:mouseMoved:int,int
    +m:scrolled:float,float
    +m:touchCancelled:int,int,int,int
    +m:touchDown:int,int,int,int
    +m:touchDragged:int,int,int
    +m:touchUp:int,int,int,int
   }
   >c:LifecycleListener{
    +z
    +m:dispose:
    +m:pause:
    +m:resume:
   }
   -c:Net
   -c:Preferences
   >c:Screen{
    +z
    +m:dispose:
    +m:hide:
    +m:pause:
    +m:render:float
    +m:resize:int,int
    +m:resume:
    +m:show:
   }
   >c:AbstractGraphics{
    +m:getBackBufferScale:
    +m:getDensity:
    +m:getRawDeltaTime:
   }
   >c:AbstractInput{
    +m:isCatchBackKey:
    +m:isCatchKey:int
    +m:isCatchMenuKey:
    +m:isKeyJustPressed:int
    +m:isKeyPressed:int
    +m:setCatchBackKey:boolean
    +m:setCatchKey:int,boolean
    +m:setCatchMenuKey:boolean
   }
   >c:ApplicationAdapter{
    +m:create:
    +m:dispose:
    +m:pause:
    +m:render:
    +m:resize:int,int
    +m:resume:
   }
   >c:Game{
    +m:dispose:
    +m:getScreen:
    +m:pause:
    +m:render:
    +m:resize:int,int
    +m:resume:
    +m:setScreen:Screen
   }
   >c:Gdx{
    -x:
    +f:app
    +f:audio
    -f:files
    +f:gl20
    +f:gl30
    +f:gl31
    +f:gl32
    +f:gl
    +f:graphics
    +f:input
    -f:net
   }
   >c:InputAdapter{
    +x:
    +m:keyDown:int
    +m:keyTyped:char
    +m:keyUp:int
    +m:mouseMoved:int,int
    +m:scrolled:float,float
    +m:touchCancelled:int,int,int,int
    +m:touchDown:int,int,int,int
    +m:touchDragged:int,int,int
    +m:touchUp:int,int,int,int
   }
   >c:InputEventQueue{
    +x:
    +m:drain:InputProcessor
    +m:getCurrentEventTime:
    +m:keyDown:int,long
    +m:keyTyped:char,long
    +m:keyUp:int,long
    +m:mouseMoved:int,int,long
    +m:scrolled:float,float,long
    +m:touchDown:int,int,int,int,long
    +m:touchDragged:int,int,int,long
    +m:touchUp:int,int,int,int,long
   }
   >c:InputMultiplexer{
    +x:
    +x:InputProcessor[]
    +m:addProcessor:InputProcessor
    +m:addProcessor:int,InputProcessor
    +m:clear:
    +m:getProcessors:
    +m:keyDown:int
    +m:keyTyped:char
    +m:keyUp:int
    +m:mouseMoved:int,int
    +m:removeProcessor:InputProcessor
    +m:removeProcessor:int
    +m:scrolled:float,float
    +m:setProcessors:Array
    +m:setProcessors:InputProcessor[]
    +m:size:
    +m:touchCancelled:int,int,int,int
    +m:touchDown:int,int,int,int
    +m:touchDragged:int,int,int
    +m:touchUp:int,int,int,int
   }
   >c:ScreenAdapter{
    +x:
    +m:dispose:
    +m:hide:
    +m:pause:
    +m:render:float
    +m:resize:int,int
    +m:resume:
    +m:show:
   }
   >c:Version{
    +x:
    +f:MAJOR
    +f:MINOR
    +f:REVISION
    +f:VERSION
    +m:isHigher:int,int,int
    +m:isHigherEqual:int,int,int
    +m:isLower:int,int,int
    +m:isLowerEqual:int,int,int
   }
  }
 }
 -p:crashinvaders
 >p:esotericsoftware{
  -p:asm
  -p:jsonbeans
  >p:kryo{
   >p:io{
    >c:ByteBufferInput{
     +x:
     +x:int
     +x:byte[]
     +x:ByteBuffer
     +x:InputStream
     +x:InputStream,int
     +x:byte[],int,int
     +m:canReadVarInt:
     +m:canReadVarLong:
     +m:close:
     +m:getBuffer:
     +m:getByteBuffer:
     +m:read:
     +m:read:byte[]
     +m:read:byte[],int,int
     +m:readBoolean:
     +m:readBooleans:int
     +m:readByte:
     +m:readByteUnsigned:
     +m:readBytes:byte[],int,int
     +m:readBytes:int
     +m:readChar:
     +m:readChars:int
     +m:readDouble:
     +m:readDoubles:int
     +m:readFloat:
     +m:readFloats:int
     +m:readInt:
     +m:readInts:int
     +m:readLong:
     +m:readLongs:int
     +m:readShort:
     +m:readShortUnsigned:
     +m:readShorts:int
     +m:readString:
     +m:readStringBuilder:
     +m:readVarInt:boolean
     +m:readVarIntFlag:
     +m:readVarIntFlag:boolean
     +m:readVarLong:boolean
     +m:reset:
     +m:setBuffer:ByteBuffer
     +m:setBuffer:byte[]
     +m:setBuffer:byte[],int,int
     +m:setInputStream:InputStream
     +m:setLimit:int
     +m:setPosition:int
     +m:skip:int
     +m:skip:long
    }
    >c:ByteBufferInputStream{
     +x:
     +x:int
     +x:ByteBuffer
     +m:available:
     +m:getByteBuffer:
     +m:read:
     +m:read:byte[],int,int
     +m:setByteBuffer:ByteBuffer
    }
    >c:ByteBufferOutput{
     +x:
     +x:int
     +x:ByteBuffer
     -x:OutputStream
     +x:int,int
     +x:ByteBuffer,int
     -x:OutputStream,int
     +m:close:
     +m:flush:
     +m:getBuffer:
     +m:getByteBuffer:
     -m:getOutputStream:
     +m:reset:
     +m:setBuffer:ByteBuffer
     +m:setBuffer:ByteBuffer,int
     +m:setBuffer:byte[]
     +m:setBuffer:byte[],int
     +m:setBuffer:byte[],int,int
     +m:setPosition:int
     +m:toBytes:
     +m:write:byte[]
     +m:write:byte[],int,int
     +m:write:int
     +m:writeAscii:String
     +m:writeBoolean:boolean
     +m:writeBooleans:boolean[],int,int
     +m:writeByte:byte
     +m:writeByte:int
     +m:writeBytes:byte[]
     +m:writeBytes:byte[],int,int
     +m:writeChar:char
     +m:writeChars:char[],int,int
     +m:writeDouble:double
     +m:writeDoubles:double[],int,int
     +m:writeFloat:float
     +m:writeFloats:float[],int,int
     +m:writeInt:int
     +m:writeInts:int[],int,int
     +m:writeLong:long
     +m:writeLongs:long[],int,int
     +m:writeShort:int
     +m:writeShorts:short[],int,int
     +m:writeString:String
     +m:writeVarInt:int,boolean
     +m:writeVarIntFlag:boolean,int,boolean
     +m:writeVarLong:long,boolean
    }
    >c:ByteBufferOutputStream{
     +x:
     +x:int
     +x:ByteBuffer
     +m:getByteBuffer:
     +m:setByteBuffer:ByteBuffer
     +m:write:byte[],int,int
     +m:write:int
    }
    >c:Input{
     +x:
     +x:int
     +x:byte[]
     +x:InputStream
     +x:InputStream,int
     +x:byte[],int,int
     +m:available:
     +m:canReadInt:
     +m:canReadLong:
     +m:canReadVarInt:
     +m:canReadVarLong:
     +m:close:
     +m:end:
     +m:getBuffer:
     +m:getInputStream:
     +m:getVariableLengthEncoding:
     +m:limit:
     +m:position:
     +m:read:
     +m:read:byte[]
     +m:read:byte[],int,int
     +m:readBoolean:
     +m:readBooleans:int
     +m:readByte:
     +m:readByteUnsigned:
     +m:readBytes:byte[]
     +m:readBytes:byte[],int,int
     +m:readBytes:int
     +m:readChar:
     +m:readChars:int
     +m:readDouble:
     +m:readDoubles:int
     +m:readFloat:
     +m:readFloats:int
     +m:readInt:
     +m:readInt:boolean
     +m:readInts:int
     +m:readInts:int,boolean
     +m:readLong:
     +m:readLong:boolean
     +m:readLongs:int
     +m:readLongs:int,boolean
     +m:readShort:
     +m:readShortUnsigned:
     +m:readShorts:int
     +m:readString:
     +m:readStringBuilder:
     +m:readVarDouble:double,boolean
     +m:readVarFloat:float,boolean
     +m:readVarInt:boolean
     +m:readVarIntFlag:
     +m:readVarIntFlag:boolean
     +m:readVarLong:boolean
     +m:reset:
     +m:setBuffer:byte[]
     +m:setBuffer:byte[],int,int
     +m:setInputStream:InputStream
     +m:setLimit:int
     +m:setPosition:int
     +m:setTotal:long
     +m:setVariableLengthEncoding:boolean
     +m:skip:int
     +m:skip:long
     +m:total:
    }
    >c:InputChunked{
     +x:
     +x:int
     +x:InputStream
     +x:InputStream,int
     +m:nextChunk:
     +m:reset:
     +m:setBuffer:byte[],int,int
     +m:setInputStream:InputStream
    }
    -c:KryoBufferOverflowException
    -c:KryoBufferUnderflowException
    >c:KryoDataInput{
     +x:Input
     +m:close:
     +m:readBoolean:
     +m:readByte:
     +m:readChar:
     +m:readDouble:
     +m:readFloat:
     +m:readFully:byte[]
     +m:readFully:byte[],int,int
     +m:readInt:
     +m:readLine:
     +m:readLong:
     +m:readShort:
     +m:readUTF:
     +m:readUnsignedByte:
     +m:readUnsignedShort:
     +m:setInput:Input
     +m:skipBytes:int
    }
    >c:KryoDataOutput{
     +x:Output
     +m:close:
     +m:setOutput:Output
     +m:write:byte[]
     +m:write:byte[],int,int
     +m:write:int
     +m:writeBoolean:boolean
     +m:writeByte:int
     +m:writeBytes:String
     +m:writeChar:int
     +m:writeChars:String
     +m:writeDouble:double
     +m:writeFloat:float
     +m:writeInt:int
     +m:writeLong:long
     +m:writeShort:int
     +m:writeUTF:String
    }
    -c:KryoObjectInput
    -c:KryoObjectOutput
    >c:Output{
     +x:
     +x:int
     +x:byte[]
     +x:OutputStream
     +x:int,int
     +x:byte[],int
     +x:OutputStream,int
     +m:varIntLength:int,boolean
     +m:varLongLength:long,boolean
     +m:close:
     +m:flush:
     +m:getBuffer:
     +m:getMaxCapacity:
     +m:getOutputStream:
     +m:getVariableLengthEncoding:
     +m:intLength:int,boolean
     +m:longLength:int,boolean
     +m:position:
     +m:reset:
     +m:setBuffer:byte[]
     +m:setBuffer:byte[],int
     +m:setOutputStream:OutputStream
     +m:setPosition:int
     +m:setVariableLengthEncoding:boolean
     +m:toBytes:
     +m:total:
     +m:write:byte[]
     +m:write:byte[],int,int
     +m:write:int
     +m:writeAscii:String
     +m:writeBoolean:boolean
     +m:writeBooleans:boolean[],int,int
     +m:writeByte:byte
     +m:writeByte:int
     +m:writeBytes:byte[]
     +m:writeBytes:byte[],int,int
     +m:writeChar:char
     +m:writeChars:char[],int,int
     +m:writeDouble:double
     +m:writeDoubles:double[],int,int
     +m:writeFloat:float
     +m:writeFloats:float[],int,int
     +m:writeInt:int
     +m:writeInt:int,boolean
     +m:writeInts:int[],int,int
     +m:writeInts:int[],int,int,boolean
     +m:writeLong:long
     +m:writeLong:long,boolean
     +m:writeLongs:long[],int,int
     +m:writeLongs:long[],int,int,boolean
     +m:writeShort:int
     +m:writeShorts:short[],int,int
     +m:writeString:String
     +m:writeVarDouble:double,double,boolean
     +m:writeVarFloat:float,float,boolean
     +m:writeVarInt:int,boolean
     +m:writeVarIntFlag:boolean,int,boolean
     +m:writeVarLong:long,boolean
    }
    >c:OutputChunked{
     +x:
     +x:int
     +x:OutputStream
     +x:OutputStream,int
     +m:endChunk:
     +m:flush:
    }
   }
   -p:serializers
   >p:unsafe{
    >c:UnsafeByteBufferInput{
     +x:
     +x:int
     +x:byte[]
     +x:ByteBuffer
     +x:InputStream
     +x:long,int
     +x:InputStream,int
     +x:byte[],int,int
     +m:read:
     +m:readBoolean:
     +m:readBooleans:int
     +m:readByte:
     +m:readByteUnsigned:
     +m:readBytes:Object,long,int
     +m:readBytes:byte[],int,int
     +m:readChar:
     +m:readChars:int
     +m:readDouble:
     +m:readDoubles:int
     +m:readFloat:
     +m:readFloats:int
     +m:readInt:
     +m:readInts:int
     +m:readLong:
     +m:readLongs:int
     +m:readShort:
     +m:readShorts:int
     +m:setBuffer:ByteBuffer
    }
    >c:UnsafeByteBufferOutput{
     +x:
     +x:int
     +x:OutputStream
     +x:int,int
     +x:long,int
     +x:OutputStream,int
     +m:dispose:
     +m:setBuffer:ByteBuffer,int
     +m:write:int
     +m:writeBoolean:boolean
     +m:writeBooleans:boolean[],int,int
     +m:writeByte:byte
     +m:writeByte:int
     +m:writeBytes:Object,long,int
     +m:writeBytes:byte[],int,int
     +m:writeChar:char
     +m:writeChars:char[],int,int
     +m:writeDouble:double
     +m:writeDoubles:double[],int,int
     +m:writeFloat:float
     +m:writeFloats:float[],int,int
     +m:writeInt:int
     +m:writeInts:int[],int,int
     +m:writeLong:long
     +m:writeLongs:long[],int,int
     +m:writeShort:int
     +m:writeShorts:short[],int,int
    }
    >c:UnsafeInput{
     +x:
     +x:int
     +x:byte[]
     +x:InputStream
     +x:InputStream,int
     +x:byte[],int,int
     +m:read:
     +m:readBoolean:
     +m:readBooleans:int
     +m:readByte:
     +m:readByteUnsigned:
     +m:readBytes:Object,long,int
     +m:readBytes:byte[],int,int
     +m:readChar:
     +m:readChars:int
     +m:readDouble:
     +m:readDoubles:int
     +m:readFloat:
     +m:readFloats:int
     +m:readInt:
     +m:readInts:int
     +m:readLong:
     +m:readLongs:int
     +m:readShort:
     +m:readShorts:int
    }
    >c:UnsafeOutput{
     +x:
     +x:int
     +x:byte[]
     +x:OutputStream
     +x:int,int
     +x:byte[],int
     +x:OutputStream,int
     +m:write:int
     +m:writeBoolean:boolean
     +m:writeBooleans:boolean[],int,int
     +m:writeByte:byte
     +m:writeByte:int
     +m:writeBytes:Object,long,int
     +m:writeBytes:byte[],int,int
     +m:writeChar:char
     +m:writeChars:char[],int,int
     +m:writeDouble:double
     +m:writeDoubles:double[],int,int
     +m:writeFloat:float
     +m:writeFloats:float[],int,int
     +m:writeInt:int
     +m:writeInts:int[],int,int
     +m:writeLong:long
     +m:writeLongs:long[],int,int
     +m:writeShort:int
     +m:writeShorts:short[],int,int
    }
    >c:UnsafeUtil{
     +x:
     +f:booleanArrayBaseOffset
     +f:byteArrayBaseOffset
     +f:charArrayBaseOffset
     +f:doubleArrayBaseOffset
     +f:floatArrayBaseOffset
     +f:intArrayBaseOffset
     +f:longArrayBaseOffset
     +f:shortArrayBaseOffset
     +f:unsafe
     +m:dispose:ByteBuffer
     +m:isNewDirectBufferAvailable:
     +m:newDirectBuffer:long,int
    }
   }
   >p:util{
    -c:Generics
    >c:Null{
     -z
    }
    -c:CuckooObjectMap
    -c:DefaultClassResolver
    -c:DefaultGenerics
    -c:DefaultInstantiatorStrategy
    -c:GenericsUtil
    -c:HashMapReferenceResolver
    -c:IdentityMap
    -c:IdentityObjectIntMap
    -c:IntArray
    -c:IntMap
    -c:ListReferenceResolver
    -c:MapReferenceResolver
    -c:NoGenerics
    -c:ObjectIntMap
    -c:ObjectMap
    -c:Pool
    -c:Util
   }
   -c:ClassResolver
   >c:DefaultSerializer{
    -z
    +m:serializerFactory:
    +m:value:
   }
   -c:KryoCopyable
   -c:KryoSerializable
   -c:ReferenceResolver
   -c:SerializerFactory
   -c:Kryo
   -c:KryoException
   -c:Registration
   -c:Serializer
  }
  -p:kryonet
  -p:minlog
  -p:reflectasm
 }
 -p:fasterxml
 >p:google{
  -p:common
  -p:errorprone
  -p:j2objc
  -p:thirdparty
 }
 >p:prineside{
  >p:kryo{
   >c:FixedInput{
    +x:
    +x:int
    +x:byte[]
    +x:InputStream
    +x:InputStream,int
    +x:byte[],int,int
    +m:available:
    +m:canReadInt:
    +m:canReadLong:
    +m:close:
    +m:eof:
    +m:getBuffer:
    +m:getInputStream:
    +m:limit:
    +m:position:
    +m:read:
    +m:read:byte[]
    +m:read:byte[],int,int
    +m:readBoolean:
    +m:readByte:
    +m:readByteUnsigned:
    +m:readBytes:byte[]
    +m:readBytes:byte[],int,int
    +m:readBytes:int
    +m:readChar:
    +m:readChars:int
    +m:readDouble:
    +m:readDouble:double,boolean
    +m:readDoubles:int
    +m:readFloat:
    +m:readFloat:float,boolean
    +m:readFloats:int
    +m:readInt:
    +m:readInt:boolean
    +m:readInts:int
    +m:readInts:int,boolean
    +m:readLong:
    +m:readLong:boolean
    +m:readLongs:int
    +m:readLongs:int,boolean
    +m:readShort:
    +m:readShortUnsigned:
    +m:readShorts:int
    +m:readString:
    +m:readStringBuilder:
    +m:readVarInt:boolean
    +m:readVarLong:boolean
    +m:rewind:
    +m:setBuffer:byte[]
    +m:setBuffer:byte[],int,int
    +m:setInputStream:InputStream
    +m:setLimit:int
    +m:setPosition:int
    +m:setTotal:int
    +m:skip:int
    +m:skip:long
    +m:total:
   }
   >c:FixedOutput{
    +x:
    +x:int
    +x:byte[]
    +x:OutputStream
    +x:int,int
    +x:byte[],int
    +x:OutputStream,int
    +m:intLength:int,boolean
    +m:longLength:long,boolean
    +m:clear:
    +m:close:
    +m:flush:
    +m:getBuffer:
    +m:getOutputStream:
    +m:position:
    +m:setBuffer:byte[]
    +m:setBuffer:byte[],int
    +m:setOutputStream:OutputStream
    +m:setPosition:int
    +m:toBytes:
    +m:total:
    +m:write:byte[]
    +m:write:byte[],int,int
    +m:write:int
    +m:writeAscii:String
    +m:writeBoolean:boolean
    +m:writeByte:byte
    +m:writeByte:int
    +m:writeBytes:byte[]
    +m:writeBytes:byte[],int,int
    +m:writeChar:char
    +m:writeChars:char[]
    +m:writeDouble:double
    +m:writeDouble:double,double,boolean
    +m:writeDoubles:double[]
    +m:writeFloat:float
    +m:writeFloat:float,float,boolean
    +m:writeFloats:float[]
    +m:writeInt:int
    +m:writeInt:int,boolean
    +m:writeInts:int[]
    +m:writeInts:int[],boolean
    +m:writeLong:long
    +m:writeLong:long,boolean
    +m:writeLongs:long[]
    +m:writeLongs:long[],boolean
    +m:writeShort:int
    +m:writeShorts:short[]
    +m:writeString:CharSequence
    +m:writeString:String
    +m:writeVarInt:int,boolean
    +m:writeVarLong:long,boolean
   }
  }
  -p:luaj
  -p:reflectasm
  >p:tdi2{
   >p:abilities{
    >c:BallLightningAbility{
     >c:BallLightningAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +f:DEFAULT_ATTACK_INTERVAL
     +f:attackInterval
     +f:damage
     +f:duration
     +f:launchedByTower
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:drawBatchAdditive:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BlizzardAbility{
     >c:BlizzardAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +f:ICE_FIELD_COUNT
     +f:ICE_FIELD_LIFETIME_MAX
     +f:ICE_FIELD_LIFETIME_MIN
     +f:ICE_FIELD_MAX_TOUCHES
     +m:configure:int,int,double
     +m:draw:Batch,float
     -m:handleEvent:EnemySpawn
     -m:handleEvent:Event
     +m:isDone:
     +m:onDone:
     -m:read:Kryo,Input
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BulletWallAbility{
     >c:BulletWallAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     >c:PreparedBullet{
      +x:
      +f:damage
      +f:endVector
      +f:speed
      +f:startVector
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +f:preparedBullets
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:FireballAbility{
     >c:FireballAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:getTitle:
      +m:requiresMapPointing:
     }
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:start:
     +m:startEffects:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:FirestormAbility{
     >c:FirestormAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +f:buffsToAdd
     +f:progressCoeff
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     +m:onDone:
     -m:read:Kryo,Input
     +m:start:
     +m:startEffects:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:LoicAbility{
     >c:LoicAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:drawBatchAdditive:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:LoopAbility{
     >c:RepeatAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:getTitle:
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MagnetAbility{
     >c:MagnetAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     -c:OnProjectileDespawn
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:NukeAbility{
     >c:NukeAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:getTitle:
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +f:damage
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     +m:isKilledEnemyNotAffectsBonusSystem:
     -m:read:Kryo,Input
     +m:setKilledEnemyNotAffectsBonusSystem:boolean
     +m:start:
     +m:startEffects:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:OverloadAbility{
     -c:OnEnemyReachTarget
     >c:OverloadAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
     }
     +f:AFFECTED_DEBUFFS
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:getDifficulty:
     +m:getLevel:
     +m:getMiningSpeed:
     +m:isDone:
     +m:onDone:
     -m:read:Kryo,Input
     +m:start:
     +m:startEffects:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:SmokeBombAbility{
     >c:SmokeBombAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:ThunderAbility{
     >c:ThunderAbilityFactory{
      +x:AbilityType
      +f:lightningTexture
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +f:chargesCount
     +f:damage
     +f:targetChargesCount
     +f:timeSinceLastCharge
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:drawBatchAdditive:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:WindstormAbility{
     >c:WindstormAbilityFactory{
      +x:AbilityType
      +m:create:
      +m:getColor:
      +m:getDarkerColor:
      +m:getDescription:GameValueProvider
      +m:getIconDrawable:
      +m:getPriceInGreenPapers:int
      +m:getPriceInResources:ResourceType,int
      +m:requiresMapPointing:
      +m:setupAssets:
     }
     +m:configure:int,int,double
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:start:
     +m:update:float
     -m:write:Kryo,Output
    }
   }
   >p:actions{
    >c:BuildMinerAction{
     +x:JsonValue
     +x:MinerType,int,int
     +f:minerType
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:BuildModifierAction{
     +x:JsonValue
     +x:ModifierType,int,int
     +f:modifierType
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:BuildTowerAction{
     +x:JsonValue
     +x:TowerType,AimStrategy,int,int
     +f:aimStrategy
     +f:towerType
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:CallWaveAction{
     +x:
     +x:JsonValue
     +m:getType:
     -m:read:Kryo,Input
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:ChangeTowerAimStrategyAction{
     +x:JsonValue
     +x:int,int,AimStrategy
     +f:aimStrategy
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:CoreUpgradeAction{
     +x:JsonValue
     +x:int,int,int,int
     +f:col
     +f:row
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:CustomAction{
     +x:JsonValue
     +f:d1
     +f:d2
     +f:i1
     +f:i2
     +f:i3
     +f:i4
     +f:s
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:CustomModifierButtonAction{
     +x:JsonValue
     +x:int,int,int,int
     +f:mapX
     +f:mapY
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:CustomTowerButtonAction{
     +x:JsonValue
     +x:int,int,int,int
     +f:mapX
     +f:mapY
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:GlobalUpgradeMinerAction{
     +x:JsonValue
     +x:MinerType
     +f:minerType
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:GlobalUpgradeTowerAction{
     +x:JsonValue
     +x:TowerType
     +f:towerType
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:ReRollBonusesAction{
     +x:
     +x:JsonValue
     +m:getType:
     -m:read:Kryo,Input
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:RewardingAdAction{
     +x:
     +x:JsonValue
     +m:getType:
     -m:read:Kryo,Input
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:ScriptAction{
     +x:String
     +x:JsonValue
     +f:script
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SelectGameplayBonusAction{
     +x:JsonValue
     +x:int,int
     +f:bonusIdx
     +f:stage
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SelectGlobalTowerAbilityAction{
     +x:JsonValue
     +x:int,int,int
     +f:abilityIndex
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SelectTowerAbilityAction{
     +x:JsonValue
     +x:int,int,int
     +f:abilityIndex
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SellMinerAction{
     +x:JsonValue
     +x:int,int
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SellModifierAction{
     +x:JsonValue
     +x:int,int
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SellTowerAction{
     +x:JsonValue
     +x:int,int
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:ToggleTowerEnabledAction{
     +x:JsonValue
     +x:int,int
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:UpgradeMinerAction{
     +x:JsonValue
     +x:int,int
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:UpgradeTowerAction{
     +x:JsonValue
     +x:int,int
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:UseAbilityAction{
     +x:JsonValue
     +x:AbilityType,int,int
     +f:abilityType
     +f:x
     +f:y
     +m:getType:
     -m:read:Kryo,Input
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
   }
   >p:buffs{
    >p:processors{
     >c:ArmorBuffProcessor{
      +x:
      +m:addBuff:Enemy,ArmorBuff
      -m:addBuff:Enemy,Buff
      +m:isDebuff:
     }
     >c:BlizzardBuffProcessor{
      +x:
      +m:addBuff:Enemy,BlizzardBuff
      -m:addBuff:Enemy,Buff
      +m:getBuffCountStatistic:
     }
     >c:BonusCoinsBuffProcessor{
      -c:OnEnemyDie
      +x:
      +m:addBuff:Enemy,BonusCoinsBuff
      -m:addBuff:Enemy,Buff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
      -m:write:Kryo,Output
     }
     >c:BonusXpBuffProcessor{
      -c:OnEnemyDie
      -c:OnEnemyTakeDamage
      +x:
      +m:addBuff:Enemy,BonusXpBuff
      -m:addBuff:Enemy,Buff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
      -m:write:Kryo,Output
     }
     >c:BurnBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,BurnBuff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      -m:update:float
      -m:write:Kryo,Output
     }
     >c:ChainReactionBuffProcessor{
      -c:OnEnemyDie
      +x:
      +f:MAX_BUFFS_PER_ENEMY
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,ChainReactionBuff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
      -m:write:Kryo,Output
     }
     >c:DeathExplosionBuffProcessor{
      -c:OnEnemyDie
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,DeathExplosionBuff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
      -m:write:Kryo,Output
     }
     >c:FreezingBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,FreezingBuff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      -m:update:float
      -m:write:Kryo,Output
     }
     >c:InvulnerabilityBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,InvulnerabilityBuff
      +m:getBuffCountStatistic:
      +m:isDebuff:
     }
     >c:NoBonusSystemPointsBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,NoBonusSystemPointsBuff
      +m:isDebuff:
     }
     >c:NoDamageBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,NoDamageBuff
      +m:handleEvent:EnemyReachTarget
      -m:handleEvent:Event
      +m:isDebuff:
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
     }
     >c:PoisonBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,PoisonBuff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      -m:update:float
      -m:write:Kryo,Output
     }
     >c:RegenerationBuffProcessor{
      -c:OnEnemyDie
      -c:OnEnemyReachTarget
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,RegenerationBuff
      +m:addBuffStackSameSourceRemoveOthers:Enemy,RegenerationBuff,boolean
      +m:getBuffCountStatistic:
      +m:isDebuff:
      -m:read:Kryo,Input
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
      -m:update:float
      -m:write:Kryo,Output
     }
     >c:SlippingBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,SlippingBuff
      +m:getBuffCountStatistic:
     }
     >c:SnowballBuffProcessor{
      +x:
      +f:MAX_HITS_ONE_ENEMY
      +f:STUN_DURATION_BY_STUN_COUNT
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,SnowballBuff
      +m:getBuffCountStatistic:
     }
     >c:StunBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,StunBuff
      +m:getBuffCountStatistic:
      -m:read:Kryo,Input
      -m:update:float
      -m:write:Kryo,Output
     }
     >c:ThrowBackBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,ThrowBackBuff
      +m:getBuffCountStatistic:
     }
     >c:VulnerabilityBuffProcessor{
      +x:
      -m:addBuff:Enemy,Buff
      +m:addBuff:Enemy,VulnerabilityBuff
      +m:getBuffCountStatistic:
     }
    }
    >c:ArmorBuff{
     >c:ArmorBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +m:cpy:float
     +m:getHealthBarIcon:
    }
    >c:BlizzardBuff{
     >c:BlizzardBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:damageMultiplier
     +f:timePassed
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,float
     -m:write:Kryo,Output
    }
    >c:BonusCoinsBuff{
     >c:BonusCoinsBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:bonusCoinsMultiplier
     +f:issuer
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,float,Tower
     -m:write:Kryo,Output
    }
    >c:BonusXpBuff{
     >c:BonusXpBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:bonusXpMultiplier
     +f:issuer
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,float,Tower
     -m:write:Kryo,Output
    }
    >c:BurnBuff{
     >c:BurnBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:bonusDamagePerEnemyNearby
     +f:fireDamage
     +f:fromAbility
     +f:tower
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:Tower,float,float,float,Ability
     -m:write:Kryo,Output
    }
    >c:ChainReactionBuff{
     >c:ChainReactionBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:chance
     +f:durationMultiplier
     +f:rangeInTiles
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,float,float,float
     -m:write:Kryo,Output
    }
    >c:DeathExplosionBuff{
     >c:ExplosionChargeBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:explosion
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,Explosion
     -m:write:Kryo,Output
    }
    >c:FreezingBuff{
     >c:FreezingBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:copyDisabled
     +f:lightningLengthBonus
     +f:maxPercent
     +f:poisonDurationBonus
     +f:speed
     +f:tower
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:Tower,float,float,float,float,float,float
     -m:write:Kryo,Output
    }
    >c:InvulnerabilityBuff{
     >c:InvulnerabilityBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +m:cpy:float
     +m:getHealthBarIcon:
    }
    >c:NoBonusSystemPointsBuff{
     >c:NoBonusSystemPointsBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +m:cpy:float
     +m:getHealthBarIcon:
    }
    >c:NoDamageBuff{
     >c:NoDamageBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +m:cpy:float
     +m:getHealthBarIcon:
    }
    >c:PoisonBuff{
     >c:PoisonBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:fastShellsStackCount
     +f:fromAbility
     +f:hitDamage
     +f:poisonDamage
     +f:tower
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:Tower,float,float,float,float,Ability
     -m:write:Kryo,Output
    }
    >c:RegenerationBuff{
     >c:RegenerationBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:hpPerSecond
     +f:issuer
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,float,EnemyReference
     -m:write:Kryo,Output
    }
    >c:SlippingBuff{
     >c:SlippingBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:SPEED_MULTIPLIER
     +f:THROW_BACK_DISTANCE
     +f:speedMultiplier
     +f:throwBackDistance
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:SnowballBuff{
     >c:SnowballBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +m:cpy:float
     +m:getHealthBarIcon:
    }
    >c:StunBuff{
     >c:StunBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:FULL_IMMUNITY_COEFF
     +f:FULL_IMMUNITY_TILES
     +f:IMMUNITY_DROP_PER_TILE
     +f:MAX_STUNS_IN_TOTAL
     +f:STUN_CHANCE_PENALTY_SAME_TOWER
     +f:STUN_DURATION_BY_STUN_COUNT
     +f:copyDisabled
     +f:issuerId
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:float,float,int
     -m:write:Kryo,Output
    }
    >c:ThrowBackBuff{
     >c:BlastThrowBackBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:force
     +f:ownerId
     +m:cpy:float
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:int,float,float,float
     -m:write:Kryo,Output
    }
    >c:VulnerabilityBuff{
     >c:VulnerabilityBuffFactory{
      +x:
      +m:createProcessor:
      +m:getHealthBarIcon:
     }
     +x:
     +f:damageMultiplier
     +f:ownerId
     +m:getHealthBarIcon:
     -m:read:Kryo,Input
     +m:setup:int,float,float,float
     -m:write:Kryo,Output
    }
   }
   >p:components{
    >c:PowerBonuses{
     >c:Entry{
      +x:
      +f:delta
      +f:sourceId
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +f:SOURCE_BASIC_SPECIAL_ABILITY
     +m:addOrReplaceBonus:int,int,float
     +m:getBonuses:int
     +m:getBonusesSum:
     +m:getEffects:int
     +m:hasBonuses:int
     +m:hasBonusesFromSource:int,int
     -m:read:Kryo,Input
     +m:removeBonus:int
     +m:removeBonusFromSource:int,int
     -m:write:Kryo,Output
    }
    >c:StunDebuffStats{
     +x:
     +f:immunity
     +f:passedTilesOnLastStun
     +f:totalCount
     +m:addStunnedBy:int
     +m:getCountByTower:int
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
   }
   >p:configs{
    >c:GameRenderingOrder{
     +f:ABILITY_DRAW_BATCH
     +f:ABILITY_DRAW_BATCH_ADDITIVE
     +f:AFTER_PERCENT
     +f:BEFORE_PERCENT
     +f:DEBUG_DPS_CHART_DRAW
     +f:EFFECTS_FBO_END
     +f:EFFECTS_FBO_START
     +f:ENEMY_DRAW
     +f:ENEMY_DRAW_HEALTH
     +f:GAME_UI_DRAW
     +f:HOT_KEY_DRAW_CURSOR
     +f:INPUT_DRAW
     +f:MAP_DRAW
     +f:MAP_DRAW_BATCH
     +f:MAP_DRAW_BUILDINGS_CACHE
     +f:MAP_DRAW_STAINS
     +f:MAP_DRAW_TILES
     +f:MAP_DRAW_TILE_EXTRAS
     +f:MAP_RENDERING_GAME_SELECTION
     +f:MAP_RENDERING_MAP_EDITOR_SELECTION
     +f:MAP_RENDERING_POST_DRAW
     +f:MINER_DRAW_BATCH
     +f:MODIFIER_DRAW_BATCH
     +f:MODIFIER_DRAW_BATCH_ADDITIVE
     +f:OVERLOAD_IMPULSE_DRAW
     +f:OVERLOAD_IMPULSE_UPDATE_GRAPHICS
     +f:PARTICLE_DRAW
     +f:PARTICLE_DRAW_DAMAGE
     +f:PARTICLE_UPDATE_DRAW
     +f:PATH_RENDERING_DRAW
     +f:PROJECTILE_DRAW
     +f:PROJECTILE_TRAIL_DRAW
     +f:PROJECTILE_TRAIL_DRAW_OPAQUE
     +f:PROJECTILE_TRAIL_UPDATE_DRAW
     +f:QUEST_DRAW
     +f:SOUND_DRAW
     +f:STEP
     +f:TOWER_APPLY_INTERPOLATION
     +f:TOWER_DRAW_BATCH
     +f:TOWER_DRAW_BATCH_ADDITIVE
     +f:TOWER_DRAW_RANGES
     +f:TOWER_DRAW_WEAPONS
     +f:UNIT_DRAW_FLYING
     +f:UNIT_DRAW_GROUNDED
     +f:WAVE_DRAW
    }
    -c:HeadlessConfig
    >c:ShopOfferValues{
     >c:PlayStageFunction{
      +x:float,float,float,float,float,float,float,float,float,float,float
      +m:getStage:int
      +m:calculate:int
     }
     +f:ACCELERATOR_VALUE
     +f:BIT_DUST_QUANTITY
     +f:BIT_DUST_VALUE
     +f:CASE_QUANTITY
     +f:CASE_VALUE
     +f:GREEN_PAPERS_QUANTITY
     +f:GREEN_PAPERS_VALUE
     +f:REGULAR_BLUEPRINT_QUANTITY
     +f:REGULAR_BLUEPRINT_VALUE
     +f:RESOURCE_VALUE
     +f:SPECIAL_BLUEPRINT_QUANTITY
     +f:SPECIAL_BLUEPRINT_VALUE
    }
   }
   -p:desktop
   >p:enemies{
    >p:bosses{
     >c:BrootEnemy{
      >c:BrootEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +f:RAGE_DURATION
      +f:RAGE_SPEED_MULT
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getBuffedSpeed:
      +m:getRageDuration:
      +m:getSize:
      +m:getSquaredSize:
      +m:hasDrawPriority:
      +m:healthRestoredWithDamage:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      +m:isInRage:
      -m:read:Kryo,Input
      +m:setUnregistered:
      +m:startRage:
      +m:updateRageState:float
      +m:wasInRage:
      -m:write:Kryo,Output
     }
     >c:ConstructorBossEnemy{
      >c:ConstructorBossBodyEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +f:enemiesToSpawn
      +f:enemiesToSpawnStartCount
      +f:groupSpawned25hp
      +f:groupSpawned50hp
      +f:groupSpawned75hp
      +f:invulnerable
      +f:processor
      +f:spawnDelayAfterTime
      +f:spawnDelayBeforeTime
      +f:spawningTime
      +f:timeSinceCreepSpawn
      +m:changeSpeedTo:float,float
      +m:drawBatch:Batch,float
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getSize:
      +m:getSquaredSize:
      +m:giveDamage:Tower,float,DamageType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      +m:isInvulnerable:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:MetaphorBossCreepEnemy{
      >c:Kind{
       +f:BIG
       +f:FRONT
       +f:HIGH_HP
       +f:LOW_HP
       +f:RANDOM_SPEED
       +f:REAR
       +f:SMALL
       +f:values
       +m:valueOf:String
       +m:values:
      }
      >c:MetaphorBossCreepEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +m:drawBatch:Batch,float,Color
      +m:dynamicPathfindingAllowed:
      +m:getBaseDamage:
      +m:getKind:
      +m:getSize:
      +m:getSquaredSize:
      +m:getTowerDamageMultiplier:TowerType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      -m:read:Kryo,Input
      +m:setKind:Kind
      -m:write:Kryo,Output
     }
     >c:MetaphorBossEnemy{
      >c:MetaphorBossEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +f:creepCount
      +m:canHaveRandomSideShift:
      +m:drawBatch:Batch,float,Color
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getBuffedDamageMultiplier:TowerType,DamageType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:MobchainBossBodyEnemy{
      >c:MobchainBossBodyEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getBuffedDamageMultiplier:TowerType,DamageType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
     }
     >c:MobchainBossCreepEnemy{
      >c:MobchainBossCreepEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +f:color
      +f:vulnerableTo
      +m:drawBatch:Batch,float
      +m:drawHealth:Batch
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getBuffedDamageMultiplier:TowerType,DamageType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:MobchainBossHeadEnemy{
      >c:MobchainBossHeadEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +f:vulnerable
      +m:canBeAttackedBy:Tower
      +m:drawHealth:Batch
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getBuffedDamageMultiplier:TowerType,DamageType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:SnakeBossBodyEnemy{
      >c:SnakeBossBodyEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +m:drawBatch:Batch,float
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      +m:onPositionSetToPath:
     }
     >c:SnakeBossHeadEnemy{
      >c:SnakeBossHeadEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +f:DEFAULT_MAX_SPEED
      +f:DEFAULT_MIN_SPEED
      +f:damageResistance
      +f:defaultMaxSpeed
      +f:defaultMinSpeed
      +m:calculateSwingRotation:float
      +m:transformPositionToSwing:float,float,Vector2
      +m:drawBatch:Batch,float
      +m:drawHealth:Batch
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:getBuffedDamageMultiplier:TowerType,DamageType
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      +m:onPositionSetToPath:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:SnakeBossTailEnemy{
      >c:SnakeBossTailEnemyFactory{
       +x:
       +m:create:
       +m:getColor:
       +m:getHighlightTexture:
       +m:getTexture:
       +m:setupAssets:
      }
      +m:drawBatch:Batch,float
      +m:dynamicPathfindingAllowed:
      +m:getAbilityVulnerability:AbilityType
      +m:getBaseDamage:
      +m:hasDrawPriority:
      +m:isBossMainBodyPart:
      +m:isBossRelated:
      +m:onPositionSetToPath:
     }
    }
    >c:ArmoredEnemy{
     >c:ArmoredEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +f:AURA_CHECK_FRAME_INTERVAL
     +m:drawBatchAdditive:Batch,float
     +m:hasDrawPriority:
     -m:read:Kryo,Input
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BossEnemy{
     >c:BossEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:getBaseDamage:
     +m:hasDrawPriority:
    }
    >c:FastEnemy{
     >c:FastEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:getBuffedSpeed:
     +m:hasDrawPriority:
    }
    >c:FighterEnemy{
     >c:FighterEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:getBaseDamage:
     +m:getEmojiTexture:
     +m:getHighlightTexture:
     +m:getSize:
     +m:getSquaredSize:
     +m:getTexture:
     +m:hasDrawPriority:
     +m:onPreDie:
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:GenericEnemy{
     >c:GenericEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
     }
     +f:abilityVulnerability
     +f:allowsDynamicPathfinding
     +f:baseDamage
     +f:buffVulnerability
     +f:color
     +f:damageVulnerability
     +f:drawPriority
     +f:isFlying
     +f:mayHaveRandomSideShift
     +f:size
     +f:specialDamageVulnerability
     +f:texture
     +f:towerDamageMultiplier
     +m:canBeAttackedBy:Tower
     +m:canHaveRandomSideShift:
     +m:dynamicPathfindingAllowed:
     +m:getAbilityVulnerability:AbilityType
     +m:getBaseDamage:
     +m:getBreakParticle:
     +m:getBuffVulnerability:BuffType
     +m:getColor:
     +m:getEmojiTexture:
     +m:getHighlightTexture:
     +m:getHitParticle:
     +m:getSize:
     +m:getSquaredSize:
     +m:getTexture:
     +m:getTowerDamageMultiplier:TowerType
     +m:hasDrawPriority:
     +m:isAir:
     +m:isVulnerableTo:DamageType
     +m:isVulnerableToSpecial:SpecialDamageType
     -m:read:Kryo,Input
     +m:setAbilityVulnerability:AbilityType,float
     +m:setBuffVulnerability:BuffType,float
     +m:setDamageVulnerability:DamageType,boolean
     +m:setSpecialDamageVulnerability:SpecialDamageType,boolean
     +m:setTowerDamageMultiplier:TowerType,float
     -m:write:Kryo,Output
    }
    >c:HealerEnemy{
     >c:HealerEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +f:AURA_CHECK_FRAME_INTERVAL
     +m:drawBatchAdditive:Batch,float
     +m:getBaseDamage:
     +m:hasDrawPriority:
     -m:read:Kryo,Input
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:HeliEnemy{
     >c:HeliEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float
     +m:getBuffedSpeed:
     +m:hasDrawPriority:
    }
    >c:IcyEnemy{
     >c:IcyEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +f:shieldHealth
     +f:shieldMaxHealth
     +m:drawHealth:Batch
     +m:getBaseDamage:
     +m:getBuffVulnerability:BuffType
     +m:giveDamage:Tower,float,DamageType
     +m:hasDrawPriority:
     -m:read:Kryo,Input
     +m:setMaxHealth:float
     -m:write:Kryo,Output
    }
    >c:JetEnemy{
     >c:JetEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float
     +m:getBuffedSpeed:
     +m:hasDrawPriority:
    }
    >c:LightEnemy{
     >c:LightEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float
     +m:getBuffedDamageMultiplier:TowerType,DamageType
     +m:giveDamage:Tower,float,DamageType
     +m:hasDrawPriority:
     -m:read:Kryo,Input
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:RegularEnemy{
     >c:RegularEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:getTowerDamageMultiplier:TowerType
     +m:hasDrawPriority:
    }
    >c:StrongEnemy{
     >c:StrongEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:hasDrawPriority:
    }
    >c:ToxicEnemy{
     >c:ToxicEnemyFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getEmojiTexture:
      +m:getHighlightTexture:
      +m:getTexture:
      +m:setupAssets:
     }
     +m:giveDamage:Tower,float,DamageType
     +m:hasDrawPriority:
     -m:read:Kryo,Input
     +m:update:float
     -m:write:Kryo,Output
    }
   }
   >p:enums{
    >c:AbilityType{
     +f:BALL_LIGHTNING
     +f:BLIZZARD
     +f:BULLET_WALL
     +f:FIREBALL
     +f:FIRESTORM
     +f:LOIC
     +f:LOOP
     +f:MAGNET
     +f:NUKE
     +f:OVERLOAD
     +f:SMOKE_BOMB
     +f:THUNDER
     +f:WINDSTORM
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:AchievementType{
     +f:BUILD_TOWER_FINISH_WITH_TEN
     +f:COPY_TOWERS_ONE_GAME
     +f:DOUBLE_LASER_DAMAGE
     +f:EVERY_ENEMY_MET
     +f:EXPLODE_ENEMY_WITH_BULLET
     +f:FAIL_TUTORIAL
     +f:FAST_BOSS_KILL
     +f:FIVE_HUNDRED_RESEARCH
     +f:FIVE_HUNDRED_TILE_CUSTOM_MAP
     +f:FULL_REGULAR_RESEARCH
     +f:HIT_ENEMY_WITH_SNOWBALLS
     +f:HUGE_TOWER_ATTACK_SPEED
     +f:HUNDRED_KILLS_NUKE
     +f:HUNDRED_TILE_CUSTOM_MAP
     +f:KILL_BOSS_BONUS_COINS
     +f:KILL_BOSS_WITH_RECRUIT
     +f:KILL_ENEMY_WITH_BACK_PROJECTILE
     +f:KILL_GROUND_ENEMY_WITH_AIR
     +f:KILL_MILLION_ENEMIES
     +f:KILL_TEN_MILLION_ENEMIES
     +f:KILL_THROWN_BACK_ENEMIES
     +f:MASS_BALL_LIGHTNINGS
     +f:MASS_BUFF_ENEMY
     +f:MASS_BURN_ENEMIES
     +f:MASS_MINERS
     +f:MASS_MISSILES
     +f:MASS_STUN_ENEMIES_ONE_SHOT
     +f:MASS_TOWERS_LEVEL_DEV
     +f:MILLION_MDPS_ONE_GAME
     +f:MILLION_PAPERS
     +f:MILLION_SCORE_ONE_GAME
     +f:PLACE_MICROGUNS
     +f:PLACE_MINES_ONE_GAME
     +f:PRESTIGE
     +f:REACH_HIGH_WAVE_ONE_GAME
     +f:RECRUIT_ENEMIES
     +f:RECRUIT_SPIDER
     +f:SPLASH_CHAIN_KILL
     +f:STAGE_1_COMPLETE
     +f:STAGE_2_COMPLETE
     +f:STAGE_3_COMPLETE
     +f:STAGE_4_COMPLETE
     +f:STAGE_5_COMPLETE
     +f:TUTORIALS_COMPLETE
     +f:UNLOCK_ALL_TROPHIES
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ActionType{
     +f:BM
     +f:BMO
     +f:BT
     +f:C
     +f:CMB
     +f:CTAS
     +f:CTB
     +f:CU
     +f:CW
     +f:GUM
     +f:GUT
     +f:RA
     +f:RRB
     +f:S
     +f:SGB
     +f:SGTA
     +f:SM
     +f:SMO
     +f:ST
     +f:STA
     +f:TTE
     +f:UA
     +f:UM
     +f:UT
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:BasicLevelLootBonusType{
     +f:BIT_DUST
     +f:GREEN_PAPERS
     +f:RESOURCE_INFIAR
     +f:RESOURCE_MATRIX
     +f:RESOURCE_SCALAR
     +f:RESOURCE_TENSOR
     +f:RESOURCE_VECTOR
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:BlueprintType{
     +f:AGILITY
     +f:EXPERIENCE
     +f:POWER
     +f:SPECIAL_I
     +f:SPECIAL_II
     +f:SPECIAL_III
     +f:SPECIAL_IV
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:BossTileType{
     +f:CUSTOM
     +f:HARD
     +f:NO
     +f:ONE
     +f:RARE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:BossType{
     +f:BROOT
     +f:CONSTRUCTOR
     +f:METAPHOR
     +f:MOBCHAIN
     +f:SNAKE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:BuffType{
     +f:ARMOR
     +f:BLIZZARD
     +f:BONUS_COINS
     +f:BONUS_XP
     +f:BURN
     +f:CHAIN_REACTION
     +f:DEATH_EXPLOSION
     +f:FREEZING
     +f:INVULNERABILITY
     +f:NO_BONUS_SYSTEM_POINTS
     +f:NO_DAMAGE
     +f:POISON
     +f:REGENERATION
     +f:SLIPPING
     +f:SNOWBALL
     +f:STUN
     +f:THROW_BACK
     +f:VULNERABILITY
     +f:relevantClasses
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:BuildingType{
     +f:MODIFIER
     +f:TOWER
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:CaseType{
     +f:BLUE
     +f:BLUEPRINT
     +f:CYAN
     +f:GREEN
     +f:ORANGE
     +f:PURPLE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:DamageType{
     >c:Efficiency{
      +x:
      +f:CRITICAL
      +f:CRITICAL_BIT
      +f:EFFECTIVE_BIT
      +f:ESPECIALLY_EFFECTIVE
      +f:ESPECIALLY_EFFECTIVE_BIT
      +f:NORMAL
      +f:OVER_TIME
      +f:OVER_TIME_BIT
      +f:WEAK_BIT
      +m:isCritical:int
      +m:isEffective:int
      +m:isEspeciallyEffective:int
      +m:isNormal:int
      +m:isOverTime:int
      +m:isWeak:int
     }
     +f:BULLET
     +f:ELECTRICITY
     +f:EXPLOSION
     +f:FIRE
     +f:LASER
     +f:POISON
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:DifficultyMode{
     +f:EASY
     +f:ENDLESS_I
     +f:NORMAL
     +f:values
     +m:hasSpecialResources:DifficultyMode
     +m:isEndless:DifficultyMode
     +m:valueOf:String
     +m:values:
    }
    >c:EnemyType{
     +f:ARMORED
     +f:BOSS
     +f:BROOT_BOSS
     +f:CONSTRUCTOR_BOSS
     +f:FAST
     +f:FIGHTER
     +f:GENERIC
     +f:HEALER
     +f:HELI
     +f:ICY
     +f:JET
     +f:LIGHT
     +f:METAPHOR_BOSS
     +f:METAPHOR_BOSS_CREEP
     +f:MOBCHAIN_BOSS_BODY
     +f:MOBCHAIN_BOSS_CREEP
     +f:MOBCHAIN_BOSS_HEAD
     +f:REGULAR
     +f:SNAKE_BOSS_BODY
     +f:SNAKE_BOSS_HEAD
     +f:SNAKE_BOSS_TAIL
     +f:STRONG
     +f:TOXIC
     +f:mainEnemyTypes
     +f:values
     +m:getMainEnemyType:EnemyType
     +m:isBoss:EnemyType
     +m:valueOf:String
     +m:values:
    }
    >c:ExplosionType{
     +f:AIR_FALL
     +f:CANNON
     +f:FIREBALL
     +f:GENERIC
     +f:MISSILE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:GameValueType{
     +f:ABILITIES_ENERGY_GENERATION_INTERVAL
     +f:ABILITIES_MAX_ENERGY
     +f:ABILITY_BALL_LIGHTNING_COINS
     +f:ABILITY_BALL_LIGHTNING_DAMAGE
     +f:ABILITY_BALL_LIGHTNING_DURATION
     +f:ABILITY_BALL_LIGHTNING_ENERGY_COST
     +f:ABILITY_BALL_LIGHTNING_MAX_PER_GAME
     +f:ABILITY_BLIZZARD_BONUS_DAMAGE
     +f:ABILITY_BLIZZARD_DURATION
     +f:ABILITY_BLIZZARD_ENERGY_COST
     +f:ABILITY_BLIZZARD_MAX_PER_GAME
     +f:ABILITY_BULLET_WALL_COINS
     +f:ABILITY_BULLET_WALL_DAMAGE
     +f:ABILITY_BULLET_WALL_DENSITY
     +f:ABILITY_BULLET_WALL_ENERGY_COST
     +f:ABILITY_BULLET_WALL_MAX_PER_GAME
     +f:ABILITY_FIREBALL_COINS
     +f:ABILITY_FIREBALL_DAMAGE
     +f:ABILITY_FIREBALL_ENERGY_COST
     +f:ABILITY_FIREBALL_FIRE_DAMAGE
     +f:ABILITY_FIREBALL_MAX_PER_GAME
     +f:ABILITY_FIRESTORM_COINS
     +f:ABILITY_FIRESTORM_DAMAGE
     +f:ABILITY_FIRESTORM_DURATION
     +f:ABILITY_FIRESTORM_ENERGY_COST
     +f:ABILITY_FIRESTORM_MAX_PER_GAME
     +f:ABILITY_LOIC_COINS
     +f:ABILITY_LOIC_DAMAGE
     +f:ABILITY_LOIC_DURATION
     +f:ABILITY_LOIC_ENERGY_COST
     +f:ABILITY_LOIC_MAX_PER_GAME
     +f:ABILITY_LOOP_DAMAGE_MULTIPLIER
     +f:ABILITY_LOOP_ENERGY_COST
     +f:ABILITY_LOOP_MAX_PER_GAME
     +f:ABILITY_LOOP_RESOURCE_AMOUNT
     +f:ABILITY_MAGNET_COINS
     +f:ABILITY_MAGNET_DAMAGE_MULTIPLIER
     +f:ABILITY_MAGNET_ENERGY_COST
     +f:ABILITY_MAGNET_MAX_PER_GAME
     +f:ABILITY_NUKE_COINS
     +f:ABILITY_NUKE_DAMAGE
     +f:ABILITY_NUKE_ENERGY_COST
     +f:ABILITY_NUKE_MAX_PER_GAME
     +f:ABILITY_OVERLOAD_BONUS_PER_DIFFICULTY
     +f:ABILITY_OVERLOAD_DIFFICULTY
     +f:ABILITY_OVERLOAD_ENERGY_COST
     +f:ABILITY_OVERLOAD_MAX_PER_GAME
     +f:ABILITY_OVERLOAD_MINING_SPEED
     +f:ABILITY_SMOKE_BOMB_COINS
     +f:ABILITY_SMOKE_BOMB_DAMAGE
     +f:ABILITY_SMOKE_BOMB_DURATION
     +f:ABILITY_SMOKE_BOMB_ENERGY_COST
     +f:ABILITY_SMOKE_BOMB_MAX_PER_GAME
     +f:ABILITY_THUNDER_CHARGES_COUNT
     +f:ABILITY_THUNDER_COINS
     +f:ABILITY_THUNDER_DAMAGE
     +f:ABILITY_THUNDER_ENERGY_COST
     +f:ABILITY_THUNDER_MAX_PER_GAME
     +f:ABILITY_WINDSTORM_DURATION
     +f:ABILITY_WINDSTORM_ENERGY_COST
     +f:ABILITY_WINDSTORM_MAX_PER_GAME
     +f:ABILITY_WINDSTORM_RANGE
     +f:AUTO_WAVE_CALL
     +f:BIT_DUST_DROP_RATE
     +f:COINS_GENERATION
     +f:CORES_LEVEL_UP_SPEED
     +f:CRAFTING_MAX_STACK
     +f:CRAFTING_PRICE
     +f:CRAFTING_QUEUE_MAX_SIZE
     +f:CRAFTING_TIME
     +f:DECRYPTING_QUEUE_MAX_SIZE
     +f:DEVELOPER_MODE
     +f:DUMMY
     +f:EMOJI_ENEMIES
     +f:ENDLESS_MODE
     +f:ENDLESS_MODE_DIFFICULTY
     +f:ENEMIES_MAX_PATH_SEARCHES
     +f:ENEMIES_SPEED
     +f:ENEMIES_VULNERABILITY
     +f:ENEMIES_WALK_ON_PLATFORMS
     +f:EXPLOSIONS_PIERCING
     +f:EXTENDED_STATISTICS
     +f:FACTORY_MODE
     +f:FORCED_WAVE_BONUS
     +f:GAME_SAVES
     +f:GAME_TICK_RATE
     +f:GREEN_PAPERS_BONUS
     +f:LOOT_FREQUENCY
     +f:LOOT_RARITY
     +f:LUCKY_WHEEL_BONUS_X2_CHANCE
     +f:MANUAL_GAME_SPEED
     +f:MAP_EDITOR
     +f:MAX_LEVEL_ENERGY
     +f:MDPS_COUNTER
     +f:MINERS_INSTALL_DURATION
     +f:MINERS_LOOT_SLOTS
     +f:MINERS_MAX_UPGRADE_LEVEL
     +f:MINERS_SPEED
     +f:MINER_COUNT_INFIAR
     +f:MINER_COUNT_MATRIX
     +f:MINER_COUNT_SCALAR
     +f:MINER_COUNT_TENSOR
     +f:MINER_COUNT_VECTOR
     +f:MINER_INFIAR_INSTALL_DURATION
     +f:MINER_INFIAR_LOOT_SLOTS
     +f:MINER_INFIAR_MAX_UPGRADE_LEVEL
     +f:MINER_INFIAR_SPEED
     +f:MINER_MATRIX_INSTALL_DURATION
     +f:MINER_MATRIX_LOOT_SLOTS
     +f:MINER_MATRIX_MAX_UPGRADE_LEVEL
     +f:MINER_MATRIX_SPEED
     +f:MINER_SCALAR_INSTALL_DURATION
     +f:MINER_SCALAR_LOOT_SLOTS
     +f:MINER_SCALAR_MAX_UPGRADE_LEVEL
     +f:MINER_SCALAR_SPEED
     +f:MINER_TENSOR_INSTALL_DURATION
     +f:MINER_TENSOR_LOOT_SLOTS
     +f:MINER_TENSOR_MAX_UPGRADE_LEVEL
     +f:MINER_TENSOR_SPEED
     +f:MINER_VECTOR_INSTALL_DURATION
     +f:MINER_VECTOR_LOOT_SLOTS
     +f:MINER_VECTOR_MAX_UPGRADE_LEVEL
     +f:MINER_VECTOR_SPEED
     +f:MODIFIER_ATTACK_SPEED_COUNT
     +f:MODIFIER_ATTACK_SPEED_VALUE
     +f:MODIFIER_BALANCE_COUNT
     +f:MODIFIER_BALANCE_UPGRADE_PRICE
     +f:MODIFIER_BOUNTY_COUNT
     +f:MODIFIER_BOUNTY_NEIGHBORING
     +f:MODIFIER_BOUNTY_NO_HARM_TO_TOWERS
     +f:MODIFIER_BOUNTY_PERCENT
     +f:MODIFIER_BOUNTY_VALUE
     +f:MODIFIER_DAMAGE_COUNT
     +f:MODIFIER_DAMAGE_VALUE
     +f:MODIFIER_EXPERIENCE_COUNT
     +f:MODIFIER_EXPERIENCE_VALUE
     +f:MODIFIER_MINING_SPEED_COUNT
     +f:MODIFIER_MINING_SPEED_VALUE
     +f:MODIFIER_POWER_COUNT
     +f:MODIFIER_POWER_VALUE
     +f:MODIFIER_SEARCH_COUNT
     +f:MODIFIER_SEARCH_RANGE_VALUE
     +f:PRESTIGE_DUST_DROP_RATE
     +f:PRESTIGE_MODE
     +f:REGULAR_QUESTS_DIFFICULTY
     +f:REGULAR_QUESTS_PRIZE_MULTIPLIER
     +f:REGULAR_QUESTS_REPLACES
     +f:REGULAR_QUESTS_SLOTS
     +f:SCORE
     +f:SCORE_CLEARED_WAVES
     +f:SCORE_ENEMIES_KILLED
     +f:SCORE_MINING
     +f:SCORE_WAVE_CALLS
     +f:SHOP_PURCHASE_BONUS
     +f:STARTING_HEALTH
     +f:STARTING_MONEY
     +f:TOWERS_ATTACK_SPEED
     +f:TOWERS_CAN_BE_MANUALLY_DISABLED
     +f:TOWERS_DAMAGE
     +f:TOWERS_EXPERIENCE_GENERATION
     +f:TOWERS_EXPERIENCE_MULTIPLIER
     +f:TOWERS_MAX_EXP_LEVEL
     +f:TOWERS_MAX_UPGRADE_LEVEL
     +f:TOWERS_POWERFUL_ABILITY_PWR
     +f:TOWERS_POWER_PER_LEVEL_AFTER_10
     +f:TOWERS_POWER_PER_LEVEL_TILL_10
     +f:TOWERS_PROJECTILE_SPEED
     +f:TOWERS_RANGE
     +f:TOWERS_ROTATION_SPEED
     +f:TOWERS_SELL_REFUND
     +f:TOWERS_STARTING_LEVEL
     +f:TOWERS_STARTING_PWR
     +f:TOWERS_UPGRADE_PRICE
     +f:TOWER_AIR_ATTACK_SPEED
     +f:TOWER_AIR_A_AIMED_DROP_DAMAGE
     +f:TOWER_AIR_A_FAST_MECHANISM_IGNITION_CHANCE
     +f:TOWER_AIR_A_FAST_MECHANISM_SPEED
     +f:TOWER_AIR_A_FOUNDATION_BURN_DAMAGE
     +f:TOWER_AIR_A_FOUNDATION_SPEED
     +f:TOWER_AIR_A_HEAVY_WEAPONS_DAMAGE
     +f:TOWER_AIR_A_POWERFUL_PWR
     +f:TOWER_AIR_A_ULTIMATE_DAMAGE
     +f:TOWER_AIR_A_ULTIMATE_EXPL_RANGE
     +f:TOWER_AIR_BURNING_TIME
     +f:TOWER_AIR_BURN_CHANCE
     +f:TOWER_AIR_BURN_DAMAGE
     +f:TOWER_AIR_DAMAGE
     +f:TOWER_AIR_EXPERIENCE_GENERATION
     +f:TOWER_AIR_EXPERIENCE_MULTIPLIER
     +f:TOWER_AIR_MAX_EXP_LEVEL
     +f:TOWER_AIR_MAX_UPGRADE_LEVEL
     +f:TOWER_AIR_PPL_AFTER_10
     +f:TOWER_AIR_PPL_TILL_10
     +f:TOWER_AIR_PRICE
     +f:TOWER_AIR_PROJECTILE_SPEED
     +f:TOWER_AIR_RANGE
     +f:TOWER_AIR_ROTATION_SPEED
     +f:TOWER_AIR_STARTING_LEVEL
     +f:TOWER_AIR_STARTING_PWR
     +f:TOWER_AIR_UPGRADE_PRICE
     +f:TOWER_BASIC_ATTACK_SPEED
     +f:TOWER_BASIC_A_COPY_COUNT
     +f:TOWER_BASIC_A_COPY_UPGRADE_LEVEL
     +f:TOWER_BASIC_A_DOUBLE_GUN_ATTACK_SPEED
     +f:TOWER_BASIC_A_FOUNDATION_RICOCHET_CHANCE
     +f:TOWER_BASIC_A_FOUNDATION_RICOCHET_SPEED
     +f:TOWER_BASIC_A_FOUNDATION_SPEED
     +f:TOWER_BASIC_A_LARGE_CALIBER_DAMAGE
     +f:TOWER_BASIC_A_POWERFUL_PWR
     +f:TOWER_BASIC_A_SPECIAL_PWR_SHARE
     +f:TOWER_BASIC_DAMAGE
     +f:TOWER_BASIC_DAMAGE_MULTIPLIER
     +f:TOWER_BASIC_EXPERIENCE_GENERATION
     +f:TOWER_BASIC_EXPERIENCE_MULTIPLIER
     +f:TOWER_BASIC_MAX_EXP_LEVEL
     +f:TOWER_BASIC_MAX_UPGRADE_LEVEL
     +f:TOWER_BASIC_PPL_AFTER_10
     +f:TOWER_BASIC_PPL_TILL_10
     +f:TOWER_BASIC_PRICE
     +f:TOWER_BASIC_PROJECTILE_SPEED
     +f:TOWER_BASIC_RANGE
     +f:TOWER_BASIC_ROTATION_SPEED
     +f:TOWER_BASIC_STARTING_LEVEL
     +f:TOWER_BASIC_STARTING_PWR
     +f:TOWER_BASIC_UPGRADE_PRICE
     +f:TOWER_BLAST_ATTACK_SPEED
     +f:TOWER_BLAST_A_FAST_MECHANISM_SPEED
     +f:TOWER_BLAST_A_HEAVY_SHELL_CHANCE
     +f:TOWER_BLAST_A_HEAVY_SHELL_DAMAGE
     +f:TOWER_BLAST_A_HEAVY_SHELL_SPEED
     +f:TOWER_BLAST_A_POWERFUL_PWR
     +f:TOWER_BLAST_A_SONIC_WAVE_DURATION
     +f:TOWER_BLAST_A_SONIC_WAVE_QUAKE_ENEMIES
     +f:TOWER_BLAST_A_STOPPING_FORCE_CHANCE
     +f:TOWER_BLAST_A_STOPPING_FORCE_MAX_DIST
     +f:TOWER_BLAST_A_STOPPING_FORCE_MIN_DIST
     +f:TOWER_BLAST_A_STOPPING_FORCE_ULTIMATE_MAX
     +f:TOWER_BLAST_A_STOPPING_FORCE_ULTIMATE_MIN
     +f:TOWER_BLAST_DAMAGE
     +f:TOWER_BLAST_EXPERIENCE_GENERATION
     +f:TOWER_BLAST_EXPERIENCE_MULTIPLIER
     +f:TOWER_BLAST_MAX_EXP_LEVEL
     +f:TOWER_BLAST_MAX_UPGRADE_LEVEL
     +f:TOWER_BLAST_PPL_AFTER_10
     +f:TOWER_BLAST_PPL_TILL_10
     +f:TOWER_BLAST_PRICE
     +f:TOWER_BLAST_QUAKE_CHARGE_SPEED
     +f:TOWER_BLAST_RANGE
     +f:TOWER_BLAST_STARTING_LEVEL
     +f:TOWER_BLAST_STARTING_PWR
     +f:TOWER_BLAST_STUN_CHANCE
     +f:TOWER_BLAST_STUN_DURATION
     +f:TOWER_BLAST_UPGRADE_PRICE
     +f:TOWER_CANNON_ATTACK_SPEED
     +f:TOWER_CANNON_A_FOUNDATION_DAMAGE_PER_DEG
     +f:TOWER_CANNON_A_FOUNDATION_PIERCING
     +f:TOWER_CANNON_A_FOUNDATION_SPEED
     +f:TOWER_CANNON_A_LONG_BARREL_RANGE
     +f:TOWER_CANNON_A_LONG_EXPLOSION_RANGE
     +f:TOWER_CANNON_A_MINE_COUNT
     +f:TOWER_CANNON_A_MINE_DAMAGE
     +f:TOWER_CANNON_A_MINE_INTERVAL
     +f:TOWER_CANNON_A_POWERFUL_PWR
     +f:TOWER_CANNON_A_PRESSURE_DAMAGE
     +f:TOWER_CANNON_A_PRESSURE_HEALTH
     +f:TOWER_CANNON_A_SHRAPNEL_COUNT
     +f:TOWER_CANNON_A_SHRAPNEL_DAMAGE
     +f:TOWER_CANNON_A_SHRAPNEL_DISTANCE
     +f:TOWER_CANNON_DAMAGE
     +f:TOWER_CANNON_EXPERIENCE_GENERATION
     +f:TOWER_CANNON_EXPERIENCE_MULTIPLIER
     +f:TOWER_CANNON_EXPLOSION_RANGE
     +f:TOWER_CANNON_MAX_EXP_LEVEL
     +f:TOWER_CANNON_MAX_UPGRADE_LEVEL
     +f:TOWER_CANNON_PPL_AFTER_10
     +f:TOWER_CANNON_PPL_TILL_10
     +f:TOWER_CANNON_PRICE
     +f:TOWER_CANNON_PROJECTILE_SPEED
     +f:TOWER_CANNON_RANGE
     +f:TOWER_CANNON_ROTATION_SPEED
     +f:TOWER_CANNON_STARTING_LEVEL
     +f:TOWER_CANNON_STARTING_PWR
     +f:TOWER_CANNON_UPGRADE_PRICE
     +f:TOWER_CRUSHER_A_CAREFUL_PROCESSING
     +f:TOWER_CRUSHER_A_DISORIENTATION_CHANCE_MAX
     +f:TOWER_CRUSHER_A_DISORIENTATION_CHANCE_MIN
     +f:TOWER_CRUSHER_A_HEAVY_VICE
     +f:TOWER_CRUSHER_A_INCREASED_CAPACITY
     +f:TOWER_CRUSHER_A_POWERFUL_PWR
     +f:TOWER_CRUSHER_A_ULTIMATE_COINS
     +f:TOWER_CRUSHER_A_ULTIMATE_COINS_LIMIT
     +f:TOWER_CRUSHER_A_ULTIMATE_UNIT_HP
     +f:TOWER_CRUSHER_BONUS_EXPERIENCE
     +f:TOWER_CRUSHER_DAMAGE
     +f:TOWER_CRUSHER_DURATION
     +f:TOWER_CRUSHER_EXPERIENCE_GENERATION
     +f:TOWER_CRUSHER_EXPERIENCE_MULTIPLIER
     +f:TOWER_CRUSHER_MAX_EXP_LEVEL
     +f:TOWER_CRUSHER_MAX_UPGRADE_LEVEL
     +f:TOWER_CRUSHER_PPL_AFTER_10
     +f:TOWER_CRUSHER_PPL_TILL_10
     +f:TOWER_CRUSHER_PRICE
     +f:TOWER_CRUSHER_PROJECTILE_SPEED
     +f:TOWER_CRUSHER_RANGE
     +f:TOWER_CRUSHER_STARTING_LEVEL
     +f:TOWER_CRUSHER_STARTING_PWR
     +f:TOWER_CRUSHER_UPGRADE_PRICE
     +f:TOWER_FLAMETHROWER_A_COLD_DAMAGE
     +f:TOWER_FLAMETHROWER_A_COLD_DAMAGE_TO_BURNING
     +f:TOWER_FLAMETHROWER_A_COLD_FREEZING
     +f:TOWER_FLAMETHROWER_A_INSTAKILL_BANK_TIME
     +f:TOWER_FLAMETHROWER_A_INSTAKILL_HP_MAX
     +f:TOWER_FLAMETHROWER_A_INSTAKILL_HP_MIN
     +f:TOWER_FLAMETHROWER_A_INSTAKILL_PAPER_BANK
     +f:TOWER_FLAMETHROWER_A_NAPALM_COLD_FIRE_DMG
     +f:TOWER_FLAMETHROWER_A_NAPALM_DAMAGE
     +f:TOWER_FLAMETHROWER_A_NAPALM_DIRECT_DAMAGE
     +f:TOWER_FLAMETHROWER_A_NAPALM_DURATION
     +f:TOWER_FLAMETHROWER_A_NAPALM_FREEZING
     +f:TOWER_FLAMETHROWER_A_PLASMA_DAMAGE
     +f:TOWER_FLAMETHROWER_A_POWERFUL_PWR
     +f:TOWER_FLAMETHROWER_A_SUPPLY_ARC
     +f:TOWER_FLAMETHROWER_A_SUPPLY_RANGE
     +f:TOWER_FLAMETHROWER_A_ULTIMATE_CROWD_BONUS
     +f:TOWER_FLAMETHROWER_BURNING_TIME
     +f:TOWER_FLAMETHROWER_DAMAGE
     +f:TOWER_FLAMETHROWER_DIRECT_FIRE_DAMAGE
     +f:TOWER_FLAMETHROWER_EXPERIENCE_GENERATION
     +f:TOWER_FLAMETHROWER_EXPERIENCE_MULTIPLIER
     +f:TOWER_FLAMETHROWER_MAX_EXP_LEVEL
     +f:TOWER_FLAMETHROWER_MAX_UPGRADE_LEVEL
     +f:TOWER_FLAMETHROWER_PPL_AFTER_10
     +f:TOWER_FLAMETHROWER_PPL_TILL_10
     +f:TOWER_FLAMETHROWER_PRICE
     +f:TOWER_FLAMETHROWER_RANGE
     +f:TOWER_FLAMETHROWER_ROTATION_SPEED
     +f:TOWER_FLAMETHROWER_STARTING_LEVEL
     +f:TOWER_FLAMETHROWER_STARTING_PWR
     +f:TOWER_FLAMETHROWER_TIME_TO_IGNITE
     +f:TOWER_FLAMETHROWER_UPGRADE_PRICE
     +f:TOWER_FREEZING_A_EVAPORATION_DAMAGE
     +f:TOWER_FREEZING_A_EVAPORATION_STACK
     +f:TOWER_FREEZING_A_MONITORING_XP
     +f:TOWER_FREEZING_A_PER_SNOWBALL_PENALTY
     +f:TOWER_FREEZING_A_POWERFUL_PWR
     +f:TOWER_FREEZING_A_SLOW_PERCENT
     +f:TOWER_FREEZING_A_SLOW_SPEED
     +f:TOWER_FREEZING_A_SNOWBALL_MAX_DURATION
     +f:TOWER_FREEZING_A_SNOWBALL_MIN_DURATION
     +f:TOWER_FREEZING_A_ULTIMATE_SNOW_BONUS
     +f:TOWER_FREEZING_CHAIN_LIGHTNING_LENGTH_BONUS
     +f:TOWER_FREEZING_EXPERIENCE_GENERATION
     +f:TOWER_FREEZING_EXPERIENCE_MULTIPLIER
     +f:TOWER_FREEZING_FREEZE_PERCENT
     +f:TOWER_FREEZING_FREEZE_SPEED
     +f:TOWER_FREEZING_MAX_EXP_LEVEL
     +f:TOWER_FREEZING_MAX_UPGRADE_LEVEL
     +f:TOWER_FREEZING_POISON_DURATION_BONUS
     +f:TOWER_FREEZING_PPL_AFTER_10
     +f:TOWER_FREEZING_PPL_TILL_10
     +f:TOWER_FREEZING_PRICE
     +f:TOWER_FREEZING_RANGE
     +f:TOWER_FREEZING_STARTING_LEVEL
     +f:TOWER_FREEZING_STARTING_PWR
     +f:TOWER_FREEZING_UPGRADE_PRICE
     +f:TOWER_GAUSS_ATTACK_RAY_WIDTH
     +f:TOWER_GAUSS_A_CONDUCTORS_CHARGING_SPEED
     +f:TOWER_GAUSS_A_CONDUCTORS_RESOURCE_CONSUMPTION
     +f:TOWER_GAUSS_A_IMPROVEMENT_BURN
     +f:TOWER_GAUSS_A_IMPROVEMENT_DAMAGE
     +f:TOWER_GAUSS_A_IMPROVEMENT_XP
     +f:TOWER_GAUSS_A_IMPROVEMENT_XP_PER_LEVEL
     +f:TOWER_GAUSS_A_NANO_DAMAGE
     +f:TOWER_GAUSS_A_NANO_HP
     +f:TOWER_GAUSS_A_OVERLOAD_DAMAGE
     +f:TOWER_GAUSS_A_OVERLOAD_DURATION
     +f:TOWER_GAUSS_A_OVERLOAD_SHOTS
     +f:TOWER_GAUSS_A_POWERFUL_PWR
     +f:TOWER_GAUSS_A_ULTIMATE_MINING_TIME
     +f:TOWER_GAUSS_CHARGING_SPEED
     +f:TOWER_GAUSS_DAMAGE
     +f:TOWER_GAUSS_ENEMY_DETECT_RAY_WIDTH
     +f:TOWER_GAUSS_EXPERIENCE_GENERATION
     +f:TOWER_GAUSS_EXPERIENCE_MULTIPLIER
     +f:TOWER_GAUSS_MAX_EXP_LEVEL
     +f:TOWER_GAUSS_MAX_UPGRADE_LEVEL
     +f:TOWER_GAUSS_PPL_AFTER_10
     +f:TOWER_GAUSS_PPL_TILL_10
     +f:TOWER_GAUSS_PRICE
     +f:TOWER_GAUSS_RESOURCE_CONSUMPTION
     +f:TOWER_GAUSS_ROTATION_SPEED
     +f:TOWER_GAUSS_SHOT_DELAY
     +f:TOWER_GAUSS_STARTING_LEVEL
     +f:TOWER_GAUSS_STARTING_PWR
     +f:TOWER_GAUSS_UPGRADE_PRICE
     +f:TOWER_GAUSS_UPGRADE_RESOURCE_CONSUMPTION
     +f:TOWER_LASER_A_HIGH_DAMAGE
     +f:TOWER_LASER_A_HIGH_ENEMY_COUNT
     +f:TOWER_LASER_A_HIGH_FIRE_DURATION
     +f:TOWER_LASER_A_IONIZATION_COINS
     +f:TOWER_LASER_A_IONIZATION_COINS_DURATION
     +f:TOWER_LASER_A_IONIZATION_SPEED
     +f:TOWER_LASER_A_IONIZATION_SPEED_REDUCTION
     +f:TOWER_LASER_A_LARGE_DURATION
     +f:TOWER_LASER_A_LARGE_ROTATION_SPEED
     +f:TOWER_LASER_A_MIRRORS_BEAM_ANGLE
     +f:TOWER_LASER_A_MIRRORS_BEAM_COUNT
     +f:TOWER_LASER_A_MIRRORS_DAMAGE
     +f:TOWER_LASER_A_POWERFUL_PWR
     +f:TOWER_LASER_A_ULTIMATE_DAMAGE_BONUS
     +f:TOWER_LASER_A_ULTIMATE_DURATION
     +f:TOWER_LASER_A_ULTIMATE_PASSIVE_INTERVAL
     +f:TOWER_LASER_BATTERIES_CAPACITY
     +f:TOWER_LASER_CHARGING_SPEED
     +f:TOWER_LASER_DAMAGE
     +f:TOWER_LASER_DAMAGE_PER_SECOND_SHOOTING
     +f:TOWER_LASER_EXPERIENCE_GENERATION
     +f:TOWER_LASER_EXPERIENCE_MULTIPLIER
     +f:TOWER_LASER_MAX_EXP_LEVEL
     +f:TOWER_LASER_MAX_UPGRADE_LEVEL
     +f:TOWER_LASER_PPL_AFTER_10
     +f:TOWER_LASER_PPL_TILL_10
     +f:TOWER_LASER_PRICE
     +f:TOWER_LASER_RANGE
     +f:TOWER_LASER_ROTATION_SPEED
     +f:TOWER_LASER_STARTING_LEVEL
     +f:TOWER_LASER_STARTING_PWR
     +f:TOWER_LASER_UPGRADE_PRICE
     +f:TOWER_MINIGUN_ACCELERATION
     +f:TOWER_MINIGUN_ATTACK_SPEED
     +f:TOWER_MINIGUN_A_FOUNDATION_ROTATION
     +f:TOWER_MINIGUN_A_FOUNDATION_SPECIAL_BONUS
     +f:TOWER_MINIGUN_A_HEAVY_MECH_ACCELERATION
     +f:TOWER_MINIGUN_A_HEAVY_MECH_MAGAZINE
     +f:TOWER_MINIGUN_A_HEAVY_MECH_SPEED
     +f:TOWER_MINIGUN_A_HEAVY_WEAPONS_DAMAGE
     +f:TOWER_MINIGUN_A_HEAVY_WEAPONS_VULNERABILITY_MAX
     +f:TOWER_MINIGUN_A_HEAVY_WEAPONS_VULNERABILITY_MIN
     +f:TOWER_MINIGUN_A_HOT_DAMAGE
     +f:TOWER_MINIGUN_A_HOT_DURATION
     +f:TOWER_MINIGUN_A_MICROGUN_ATTACK_SPEED
     +f:TOWER_MINIGUN_A_MICROGUN_BUILD_DELAY
     +f:TOWER_MINIGUN_A_MICROGUN_COUNT
     +f:TOWER_MINIGUN_A_MICROGUN_RANGE
     +f:TOWER_MINIGUN_A_POWERFUL_PWR
     +f:TOWER_MINIGUN_BULLET_SPREAD
     +f:TOWER_MINIGUN_DAMAGE
     +f:TOWER_MINIGUN_EXPERIENCE_GENERATION
     +f:TOWER_MINIGUN_EXPERIENCE_MULTIPLIER
     +f:TOWER_MINIGUN_KEEP_SHOOTING_ANGLE
     +f:TOWER_MINIGUN_MAGAZINE_SIZE
     +f:TOWER_MINIGUN_MAX_EXP_LEVEL
     +f:TOWER_MINIGUN_MAX_UPGRADE_LEVEL
     +f:TOWER_MINIGUN_PPL_AFTER_10
     +f:TOWER_MINIGUN_PPL_TILL_10
     +f:TOWER_MINIGUN_PRICE
     +f:TOWER_MINIGUN_RANGE
     +f:TOWER_MINIGUN_RELOAD_DURATION
     +f:TOWER_MINIGUN_ROTATION_SPEED
     +f:TOWER_MINIGUN_STARTING_LEVEL
     +f:TOWER_MINIGUN_STARTING_PWR
     +f:TOWER_MINIGUN_UPGRADE_PRICE
     +f:TOWER_MISSILE_ATTACK_SPEED
     +f:TOWER_MISSILE_A_ANTI_AIR_LRM_DAMAGE
     +f:TOWER_MISSILE_A_COMPACT_COUNT
     +f:TOWER_MISSILE_A_COMPACT_DAMAGE
     +f:TOWER_MISSILE_A_OVERWEIGHT_DAMAGE
     +f:TOWER_MISSILE_A_OVERWEIGHT_HP
     +f:TOWER_MISSILE_A_POWERFUL_PWR
     +f:TOWER_MISSILE_A_ULTIMATE_DAMAGE
     +f:TOWER_MISSILE_A_VERTICAL_LRM_RATE
     +f:TOWER_MISSILE_A_VERTICAL_MAX_RANGE
     +f:TOWER_MISSILE_A_VERTICAL_ROTATION_BONUS
     +f:TOWER_MISSILE_DAMAGE
     +f:TOWER_MISSILE_EXPERIENCE_GENERATION
     +f:TOWER_MISSILE_EXPERIENCE_MULTIPLIER
     +f:TOWER_MISSILE_EXPLOSION_RANGE
     +f:TOWER_MISSILE_LRM_AIM_SPEED
     +f:TOWER_MISSILE_LRM_DAMAGE
     +f:TOWER_MISSILE_MAX_EXP_LEVEL
     +f:TOWER_MISSILE_MAX_UPGRADE_LEVEL
     +f:TOWER_MISSILE_PPL_AFTER_10
     +f:TOWER_MISSILE_PPL_TILL_10
     +f:TOWER_MISSILE_PRICE
     +f:TOWER_MISSILE_PROJECTILE_SPEED
     +f:TOWER_MISSILE_RANGE
     +f:TOWER_MISSILE_ROTATION_SPEED
     +f:TOWER_MISSILE_STARTING_LEVEL
     +f:TOWER_MISSILE_STARTING_PWR
     +f:TOWER_MISSILE_UPGRADE_PRICE
     +f:TOWER_MULTISHOT_ATTACK_SPEED
     +f:TOWER_MULTISHOT_A_BACK_MAX_STACK
     +f:TOWER_MULTISHOT_A_BACK_SHOT_DAMAGE
     +f:TOWER_MULTISHOT_A_BUCKSHOT_COINS
     +f:TOWER_MULTISHOT_A_BUCKSHOT_COINS_DURATION
     +f:TOWER_MULTISHOT_A_BUCKSHOT_DAMAGE
     +f:TOWER_MULTISHOT_A_COMPACT_ARC_SIZE
     +f:TOWER_MULTISHOT_A_COMPACT_DAMAGE_PER_HIT
     +f:TOWER_MULTISHOT_A_COMPACT_MAX_HIT_COUNT
     +f:TOWER_MULTISHOT_A_COUNTER_DAMAGE
     +f:TOWER_MULTISHOT_A_PENETRATING_DAMAGE
     +f:TOWER_MULTISHOT_A_POWERFUL_PWR
     +f:TOWER_MULTISHOT_DAMAGE
     +f:TOWER_MULTISHOT_EXPERIENCE_GENERATION
     +f:TOWER_MULTISHOT_EXPERIENCE_MULTIPLIER
     +f:TOWER_MULTISHOT_MAX_EXP_LEVEL
     +f:TOWER_MULTISHOT_MAX_UPGRADE_LEVEL
     +f:TOWER_MULTISHOT_PPL_AFTER_10
     +f:TOWER_MULTISHOT_PPL_TILL_10
     +f:TOWER_MULTISHOT_PRICE
     +f:TOWER_MULTISHOT_PROJECTILE_COUNT
     +f:TOWER_MULTISHOT_PROJECTILE_SPEED
     +f:TOWER_MULTISHOT_RANGE
     +f:TOWER_MULTISHOT_ROTATION_SPEED
     +f:TOWER_MULTISHOT_SHOOT_ANGLE
     +f:TOWER_MULTISHOT_STARTING_LEVEL
     +f:TOWER_MULTISHOT_STARTING_PWR
     +f:TOWER_MULTISHOT_UPGRADE_PRICE
     +f:TOWER_SNIPER_AIM_SPEED
     +f:TOWER_SNIPER_ATTACK_SPEED
     +f:TOWER_SNIPER_A_HEAVY_DAMAGE
     +f:TOWER_SNIPER_A_KILLSHOT_HP
     +f:TOWER_SNIPER_A_KILLSHOT_INTERVAL
     +f:TOWER_SNIPER_A_PENETRATION_DAMAGE
     +f:TOWER_SNIPER_A_POWERFUL_PWR
     +f:TOWER_SNIPER_A_SHORT_CRIT_MULTIPLIER
     +f:TOWER_SNIPER_A_SHORT_RANGE
     +f:TOWER_SNIPER_A_SHORT_ROTATION_SPEED
     +f:TOWER_SNIPER_A_ULTIMATE_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_EXPL_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_EXPL_RANGE
     +f:TOWER_SNIPER_CRIT_CHANCE
     +f:TOWER_SNIPER_CRIT_MULTIPLIER
     +f:TOWER_SNIPER_DAMAGE
     +f:TOWER_SNIPER_EXPERIENCE_GENERATION
     +f:TOWER_SNIPER_EXPERIENCE_MULTIPLIER
     +f:TOWER_SNIPER_MAX_EXP_LEVEL
     +f:TOWER_SNIPER_MAX_UPGRADE_LEVEL
     +f:TOWER_SNIPER_PPL_AFTER_10
     +f:TOWER_SNIPER_PPL_TILL_10
     +f:TOWER_SNIPER_PRICE
     +f:TOWER_SNIPER_RANGE
     +f:TOWER_SNIPER_ROTATION_SPEED
     +f:TOWER_SNIPER_STARTING_LEVEL
     +f:TOWER_SNIPER_STARTING_PWR
     +f:TOWER_SNIPER_UPGRADE_PRICE
     +f:TOWER_SPLASH_ATTACK_SPEED
     +f:TOWER_SPLASH_A_FAST_BULLETS_BONUS_XP
     +f:TOWER_SPLASH_A_FAST_BULLETS_BONUS_XP_DURATION
     +f:TOWER_SPLASH_A_FAST_BULLETS_DAMAGE
     +f:TOWER_SPLASH_A_FAST_BULLETS_SPEED
     +f:TOWER_SPLASH_A_FAST_MECHANISM_SPEED
     +f:TOWER_SPLASH_A_PENETRATING_DAMAGE_CHAIN
     +f:TOWER_SPLASH_A_POWERFUL_PWR
     +f:TOWER_SPLASH_A_RIFFLED_DAMAGE
     +f:TOWER_SPLASH_A_RIFFLED_SPEED_MARK
     +f:TOWER_SPLASH_A_ULTIMATE_BASE_DAMAGE
     +f:TOWER_SPLASH_A_ULTIMATE_MAX_CHAIN_LENGTH
     +f:TOWER_SPLASH_A_ULTIMATE_ON_HIT_CHANCE
     +f:TOWER_SPLASH_A_ULTIMATE_SPLINTERS
     +f:TOWER_SPLASH_DAMAGE
     +f:TOWER_SPLASH_EXPERIENCE_GENERATION
     +f:TOWER_SPLASH_EXPERIENCE_MULTIPLIER
     +f:TOWER_SPLASH_MAX_EXP_LEVEL
     +f:TOWER_SPLASH_MAX_UPGRADE_LEVEL
     +f:TOWER_SPLASH_PIERCING
     +f:TOWER_SPLASH_PPL_AFTER_10
     +f:TOWER_SPLASH_PPL_TILL_10
     +f:TOWER_SPLASH_PRICE
     +f:TOWER_SPLASH_PROJECTILE_COUNT
     +f:TOWER_SPLASH_PROJECTILE_SPEED
     +f:TOWER_SPLASH_RANGE
     +f:TOWER_SPLASH_STARTING_LEVEL
     +f:TOWER_SPLASH_STARTING_PWR
     +f:TOWER_SPLASH_UPGRADE_PRICE
     +f:TOWER_TESLA_ATTACK_SPEED
     +f:TOWER_TESLA_A_BALL_DAMAGE
     +f:TOWER_TESLA_A_BATTERIES_DAMAGE
     +f:TOWER_TESLA_A_BATTERIES_SPEED
     +f:TOWER_TESLA_A_CURRENT_DAMAGE
     +f:TOWER_TESLA_A_PER_BALL_PENALTY
     +f:TOWER_TESLA_A_POWERFUL_PWR
     +f:TOWER_TESLA_A_ULTIMATE_DAMAGE
     +f:TOWER_TESLA_A_ULTIMATE_DURATION
     +f:TOWER_TESLA_A_ULTIMATE_SHOT_INTERVAL
     +f:TOWER_TESLA_A_VOLTAGE_LENGTH
     +f:TOWER_TESLA_A_VOLTAGE_MIN_DAMAGE
     +f:TOWER_TESLA_CHAIN_LIGHTNING_DAMAGE
     +f:TOWER_TESLA_CHAIN_LIGHTNING_LENGTH
     +f:TOWER_TESLA_CHAIN_MIN_DAMAGE
     +f:TOWER_TESLA_DAMAGE
     +f:TOWER_TESLA_EXPERIENCE_GENERATION
     +f:TOWER_TESLA_EXPERIENCE_MULTIPLIER
     +f:TOWER_TESLA_MAX_EXP_LEVEL
     +f:TOWER_TESLA_MAX_UPGRADE_LEVEL
     +f:TOWER_TESLA_PPL_AFTER_10
     +f:TOWER_TESLA_PPL_TILL_10
     +f:TOWER_TESLA_PRICE
     +f:TOWER_TESLA_RANGE
     +f:TOWER_TESLA_ROTATION_SPEED
     +f:TOWER_TESLA_STARTING_LEVEL
     +f:TOWER_TESLA_STARTING_PWR
     +f:TOWER_TESLA_UPGRADE_PRICE
     +f:TOWER_TYPE_AIR
     +f:TOWER_TYPE_BASIC
     +f:TOWER_TYPE_BLAST
     +f:TOWER_TYPE_CANNON
     +f:TOWER_TYPE_CRUSHER
     +f:TOWER_TYPE_FLAMETHROWER
     +f:TOWER_TYPE_FREEZING
     +f:TOWER_TYPE_GAUSS
     +f:TOWER_TYPE_LASER
     +f:TOWER_TYPE_MINIGUN
     +f:TOWER_TYPE_MISSILE
     +f:TOWER_TYPE_MULTISHOT
     +f:TOWER_TYPE_SNIPER
     +f:TOWER_TYPE_SPLASH
     +f:TOWER_TYPE_TESLA
     +f:TOWER_TYPE_VENOM
     +f:TOWER_VENOM_ATTACK_SPEED
     +f:TOWER_VENOM_A_CHAIN_CHANCE_MAX
     +f:TOWER_VENOM_A_CHAIN_CHANCE_MIN
     +f:TOWER_VENOM_A_CHAIN_DURATION
     +f:TOWER_VENOM_A_CHAIN_PROLONG
     +f:TOWER_VENOM_A_CHAIN_RANGE
     +f:TOWER_VENOM_A_CLOUD_DAMAGE_COEFF
     +f:TOWER_VENOM_A_CLOUD_RANGE
     +f:TOWER_VENOM_A_CONCENTRATE_DAMAGE
     +f:TOWER_VENOM_A_FAST_DAMAGE_PER_STACK
     +f:TOWER_VENOM_A_FAST_MAX_DEBUFFS
     +f:TOWER_VENOM_A_FAST_SPEED
     +f:TOWER_VENOM_A_HARD_DAMAGE
     +f:TOWER_VENOM_A_POWERFUL_PWR
     +f:TOWER_VENOM_DAMAGE
     +f:TOWER_VENOM_EXPERIENCE_GENERATION
     +f:TOWER_VENOM_EXPERIENCE_MULTIPLIER
     +f:TOWER_VENOM_MAX_EXP_LEVEL
     +f:TOWER_VENOM_MAX_UPGRADE_LEVEL
     +f:TOWER_VENOM_POISON_DURATION
     +f:TOWER_VENOM_PPL_AFTER_10
     +f:TOWER_VENOM_PPL_TILL_10
     +f:TOWER_VENOM_PRICE
     +f:TOWER_VENOM_PROJECTILE_SPEED
     +f:TOWER_VENOM_RANGE
     +f:TOWER_VENOM_ROTATION_SPEED
     +f:TOWER_VENOM_STARTING_LEVEL
     +f:TOWER_VENOM_STARTING_PWR
     +f:TOWER_VENOM_UPGRADE_PRICE
     +f:USER_MAP_MAX_SIZE
     +f:WAVE_INTERVAL
     +f:minerCount
     +f:sharedTowerStats
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:GateType{
     +f:BARRIER_HEALTH
     +f:BARRIER_TYPE
     +f:TELEPORT
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:GeneralizedTowerStatType{
     +f:AGILITY
     +f:ATTACK_SPEED
     +f:CROWD_DAMAGE
     +f:DAMAGE
     +f:RANGE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:InterpolationType{
     +f:bounce
     +f:bounceIn
     +f:bounceOut
     +f:circle
     +f:circleIn
     +f:circleOut
     +f:elastic
     +f:elasticIn
     +f:elasticOut
     +f:exp10
     +f:exp10In
     +f:exp10Out
     +f:exp5
     +f:exp5In
     +f:exp5Out
     +f:fade
     +f:fastSlow
     +f:linear
     +f:objects
     +f:pow2
     +f:pow2InInverse
     +f:pow2OutInverse
     +f:pow3
     +f:pow3In
     +f:pow3InInverse
     +f:pow3Out
     +f:pow3OutInverse
     +f:pow4
     +f:pow4In
     +f:pow4Out
     +f:pow5
     +f:pow5In
     +f:pow5Out
     +f:sine
     +f:sineIn
     +f:sineOut
     +f:slowFast
     +f:smooth2
     +f:smooth
     +f:smoother
     +f:swing
     +f:swingIn
     +f:swingOut
     +f:values
     +m:getObject:InterpolationType
     +m:getType:Interpolation
     +m:valueOf:String
     +m:values:
    }
    >c:ItemCategoryType{
     +f:MAP_EDITOR
     +f:MATERIALS
     +f:OTHER
     +f:PACKS
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ItemDataType{
     +f:BONUS_LEVEL
     +f:BONUS_TYPE
     +f:CASE_CONTAINS_PAPERS
     +f:TILE_PREDEFINED_CORE_TYPE
     +f:TYPE
     +f:VALUE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ItemSortingType{
     +f:KIND
     +f:RARITY
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ItemSubcategoryType{
     +f:ME_BASES
     +f:ME_PLATFORMS
     +f:ME_ROADS
     +f:ME_SOUNDS
     +f:ME_SOURCES
     +f:ME_SPAWNS
     +f:ME_SPECIAL
     +f:M_BLUEPRINT
     +f:M_CURRENCY
     +f:M_DUST
     +f:M_RESOURCE
     +f:M_TOKENS
     +f:O_OTHER
     +f:P_DECRYPTED
     +f:P_ENCRYPTED
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ItemType{
     +f:ABILITY
     +f:ABILITY_TOKEN
     +f:ACCELERATOR
     +f:BIT_DUST
     +f:BLUEPRINT
     +f:CASE
     +f:CASE_KEY
     +f:DAT_PAPER
     +f:DOUBLE_GAIN_SHARD
     +f:GAME_VALUE_GLOBAL
     +f:GAME_VALUE_LEVEL
     +f:GATE
     +f:GREEN_PAPER
     +f:LOOT_BOOST
     +f:LUCKY_SHOT_TOKEN
     +f:OPENED_RESEARCH
     +f:PRESTIGE_DUST
     +f:PRESTIGE_TOKEN
     +f:RANDOM_BARRIER
     +f:RANDOM_TELEPORT
     +f:RANDOM_TILE
     +f:RARITY_BOOST
     +f:RESEARCH_TOKEN
     +f:RESEARCH_TOKEN_USED
     +f:RESOURCE
     +f:SKILL_POINT
     +f:STAR
     +f:TILE
     +f:TROPHY
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:LimitedParticleType{
     +f:ENEMY_DEAD
     +f:ENEMY_HIT
     +f:ENEMY_STUN
     +f:EXPLOSION_AIR_FALL
     +f:EXPLOSION_BLAST
     +f:EXPLOSION_BLAST_QUAKE
     +f:EXPLOSION_CANNON
     +f:EXPLOSION_FIREBALL
     +f:EXPLOSION_MISSILE
     +f:PAPERS_DROP
     +f:RESOURCE_MINED
     +f:UNIT_DEAD
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:MinerType{
     +f:INFIAR
     +f:MATRIX
     +f:SCALAR
     +f:TENSOR
     +f:VECTOR
     +f:toResourceType
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ModifierType{
     +f:ATTACK_SPEED
     +f:BALANCE
     +f:BOUNTY
     +f:DAMAGE
     +f:EXPERIENCE
     +f:MINING_SPEED
     +f:POWER
     +f:SEARCH
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:PredefinedCoreTileType{
     +f:ALPHA
     +f:BETA
     +f:DELTA
     +f:THETA
     +f:XI
     +f:ZETA
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ProjectileType{
     +f:AIR
     +f:BASIC
     +f:BUFF
     +f:BULLET_WALL
     +f:CANNON
     +f:CHAIN_LIGHTNING
     +f:LASER
     +f:MISSILE
     +f:MULTISHOT
     +f:SPLASH
     +f:SPLINTER
     +f:VENOM
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:RarityType{
     +f:COMMON
     +f:EPIC
     +f:LEGENDARY
     +f:RARE
     +f:VERY_RARE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:RequirementType{
     +f:ALL_TIME_STATISTIC
     +f:OPENED_LEVEL
     +f:RESEARCH
     +f:STAGE_STARS
     +f:STARS
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ResearchCategoryType{
     +f:ABILITIES_ENERGY_GENERATION_INTERVAL
     +f:ABILITIES_MAX_ENERGY
     +f:ABILITY_BALL_LIGHTNING
     +f:ABILITY_BALL_LIGHTNING_DAMAGE
     +f:ABILITY_BALL_LIGHTNING_DURATION
     +f:ABILITY_BLIZZARD
     +f:ABILITY_BLIZZARD_BONUS_DAMAGE
     +f:ABILITY_BLIZZARD_DURATION
     +f:ABILITY_BULLET_WALL
     +f:ABILITY_BULLET_WALL_DAMAGE
     +f:ABILITY_BULLET_WALL_DENSITY
     +f:ABILITY_FIREBALL
     +f:ABILITY_FIREBALL_DAMAGE
     +f:ABILITY_FIREBALL_FIRE_DAMAGE
     +f:ABILITY_FIRESTORM
     +f:ABILITY_FIRESTORM_DAMAGE
     +f:ABILITY_FIRESTORM_DURATION
     +f:ABILITY_LOIC
     +f:ABILITY_LOIC_DAMAGE
     +f:ABILITY_LOIC_DURATION
     +f:ABILITY_LOOP
     +f:ABILITY_LOOP_DAMAGE_MULTIPLIER
     +f:ABILITY_LOOP_RESOURCE_AMOUNT
     +f:ABILITY_MAGNET
     +f:ABILITY_MAGNET_DAMAGE_MULTIPLIER
     +f:ABILITY_NUKE
     +f:ABILITY_NUKE_DAMAGE
     +f:ABILITY_NUKE_ENERGY_COST
     +f:ABILITY_OVERLOAD
     +f:ABILITY_OVERLOAD_BONUS_PER_DIFFICULTY
     +f:ABILITY_OVERLOAD_DIFFICULTY
     +f:ABILITY_OVERLOAD_MINING_SPEED
     +f:ABILITY_SMOKE_BOMB
     +f:ABILITY_SMOKE_BOMB_DAMAGE
     +f:ABILITY_SMOKE_BOMB_DURATION
     +f:ABILITY_THUNDER
     +f:ABILITY_THUNDER_CHARGES_COUNT
     +f:ABILITY_THUNDER_DAMAGE
     +f:ABILITY_WINDSTORM
     +f:ABILITY_WINDSTORM_DURATION
     +f:ABILITY_WINDSTORM_RANGE
     +f:BIT_DUST_DROP_RATE
     +f:COINS_GENERATION
     +f:CRAFTING_MAX_STACK
     +f:CRAFTING_PRICE
     +f:CRAFTING_QUEUE_SIZE
     +f:CRAFTING_TIME
     +f:DECRYPTING_QUEUE_SIZE
     +f:DEVELOPER_MODE
     +f:ENDLESS_MODE
     +f:ENDLESS_MODE_DIFFICULTY
     +f:ENEMIES_SPEED
     +f:EXPLOSIONS_PIERCING
     +f:EXTENDED_STATISTICS
     +f:FACTORY
     +f:FORCED_WAVE_BONUS
     +f:GREEN_PAPERS_BONUS
     +f:LOOT_FREQUENCY
     +f:LOOT_RARITY
     +f:LUCKY_WHEEL_BONUS_X2
     +f:MINERS_LOOT_SLOTS
     +f:MINERS_MAX_UPGRADE_LEVEL
     +f:MINER_INSTALL_DURATION
     +f:MINER_SPEED
     +f:MINER_TYPE_INFIAR
     +f:MINER_TYPE_MATRIX
     +f:MINER_TYPE_SCALAR
     +f:MINER_TYPE_TENSOR
     +f:MINER_TYPE_VECTOR
     +f:MODIFIER_ATTACK_SPEED_VALUE
     +f:MODIFIER_BALANCE_UPGRADE_PRICE
     +f:MODIFIER_BOUNTY_PERCENT
     +f:MODIFIER_BOUNTY_VALUE
     +f:MODIFIER_DAMAGE_VALUE
     +f:MODIFIER_EXPERIENCE_VALUE
     +f:MODIFIER_MINING_SPEED_VALUE
     +f:MODIFIER_POWER_VALUE
     +f:MODIFIER_SEARCH_RANGE_VALUE
     +f:MODIFIER_TYPE_ATTACK_SPEED
     +f:MODIFIER_TYPE_BALANCE
     +f:MODIFIER_TYPE_BOUNTY
     +f:MODIFIER_TYPE_DAMAGE
     +f:MODIFIER_TYPE_EXPERIENCE
     +f:MODIFIER_TYPE_MINING_SPEED
     +f:MODIFIER_TYPE_POWER
     +f:MODIFIER_TYPE_SEARCH
     +f:PRESTIGE
     +f:PRESTIGE_DUST_DROP_RATE
     +f:REGULAR_QUESTS_REPLACES
     +f:REGULAR_QUEST_BONUS
     +f:REGULAR_QUEST_SLOT
     +f:ROOT
     +f:STARTING_HEALTH
     +f:STARTING_MONEY
     +f:STORYLINE_A_STAR
     +f:STORYLINE_BINARY_SEARCH
     +f:STORYLINE_BRUTE_FORCE_SEARCH
     +f:STORYLINE_BUBBLE_SORT
     +f:STORYLINE_CACHING
     +f:STORYLINE_CUCKOO_HASHING
     +f:STORYLINE_DIJKSTRAS_ALGORITHM
     +f:STORYLINE_HASHING
     +f:STORYLINE_INDEX_MAPPING
     +f:STORYLINE_LM_ALGORITHM
     +f:STORYLINE_LSTM_NETWORK
     +f:STORYLINE_MERGE_SORT
     +f:STORYLINE_QUICKSORT
     +f:STORYLINE_RAINBOW_TABLE
     +f:STORYLINE_RESOURCE_INFIAR
     +f:STORYLINE_RESOURCE_MATRIX
     +f:STORYLINE_RESOURCE_SCALAR
     +f:STORYLINE_RESOURCE_TENSOR
     +f:STORYLINE_RESOURCE_VECTOR
     +f:STORYLINE_RP_ALGORITHM
     +f:STORYLINE_SCG_ALGORITHM
     +f:STORYLINE_TIMSORT
     +f:TOWERS_POWERFUL_ABILITY_PWR
     +f:TOWERS_STARTING_PWR
     +f:TOWER_ACCELERATION
     +f:TOWER_ACCURACY
     +f:TOWER_AIM_SPEED
     +f:TOWER_AIR_A_AIMED_DROP_DAMAGE
     +f:TOWER_AIR_A_FAST_MECHANISM_SPEED
     +f:TOWER_AIR_A_FOUNDATION_SPEED
     +f:TOWER_AIR_A_HEAVY_WEAPONS_DAMAGE
     +f:TOWER_AIR_A_ULTIMATE_DAMAGE
     +f:TOWER_AIR_BURN_DAMAGE
     +f:TOWER_ATTACK_SPEED
     +f:TOWER_BASIC_A_COPY_COUNT
     +f:TOWER_BASIC_A_COPY_UPGRADE_LEVEL
     +f:TOWER_BASIC_A_DOUBLE_GUN_ATTACK_SPEED
     +f:TOWER_BASIC_A_FOUNDATION_RICOCHET_CHANCE
     +f:TOWER_BASIC_A_FOUNDATION_RICOCHET_SPEED
     +f:TOWER_BASIC_A_FOUNDATION_SPEED
     +f:TOWER_BASIC_A_LARGE_CALIBER_DAMAGE
     +f:TOWER_BASIC_A_SPECIAL_PWR_SHARE
     +f:TOWER_BATTERIES_CAPACITY
     +f:TOWER_BLAST_A_FAST_MECHANISM_SPEED
     +f:TOWER_BLAST_A_HEAVY_SHELL_CHANCE
     +f:TOWER_BLAST_A_HEAVY_SHELL_DAMAGE
     +f:TOWER_BLAST_A_HEAVY_SHELL_SPEED
     +f:TOWER_BLAST_A_SONIC_WAVE_DURATION
     +f:TOWER_BLAST_A_SONIC_WAVE_QUAKE_ENEMIES
     +f:TOWER_BLAST_A_STOPPING_FORCE_CHANCE
     +f:TOWER_BLAST_A_STOPPING_FORCE_MAX_DIST
     +f:TOWER_BLAST_A_STOPPING_FORCE_ULTIMATE_MAX
     +f:TOWER_BLAST_QUAKE_CHARGE_SPEED
     +f:TOWER_BURNING_TIME
     +f:TOWER_BURN_CHANCE
     +f:TOWER_CANNON_A_FOUNDATION_DAMAGE_PER_DEG
     +f:TOWER_CANNON_A_FOUNDATION_PIERCING
     +f:TOWER_CANNON_A_FOUNDATION_SPEED
     +f:TOWER_CANNON_A_LONG_BARREL_RANGE
     +f:TOWER_CANNON_A_LONG_EXPLOSION_RANGE
     +f:TOWER_CANNON_A_MINE_COUNT
     +f:TOWER_CANNON_A_MINE_DAMAGE
     +f:TOWER_CANNON_A_MINE_INTERVAL
     +f:TOWER_CANNON_A_PRESSURE_DAMAGE
     +f:TOWER_CANNON_A_PRESSURE_HEALTH
     +f:TOWER_CANNON_A_SHRAPNEL_COUNT
     +f:TOWER_CANNON_A_SHRAPNEL_DAMAGE
     +f:TOWER_CANNON_A_SHRAPNEL_DISTANCE
     +f:TOWER_CHAIN_LIGHTNING_DAMAGE
     +f:TOWER_CHAIN_LIGHTNING_LENGTH
     +f:TOWER_CHAIN_LIGHTNING_LENGTH_BONUS
     +f:TOWER_CHARGING_SPEED
     +f:TOWER_CRIT_CHANCE
     +f:TOWER_CRIT_MULTIPLIER
     +f:TOWER_CRUSHER_A_CAREFUL_PROCESSING
     +f:TOWER_CRUSHER_A_DISORIENTATION_CHANCE
     +f:TOWER_CRUSHER_A_HEAVY_VICE
     +f:TOWER_CRUSHER_A_INCREASED_CAPACITY
     +f:TOWER_CRUSHER_A_ULTIMATE_COINS
     +f:TOWER_DAMAGE
     +f:TOWER_DAMAGE_MULTIPLIER
     +f:TOWER_DURATION
     +f:TOWER_EXPERIENCE_GENERATION
     +f:TOWER_EXPERIENCE_MULTIPLIER
     +f:TOWER_EXPLOSION_RANGE
     +f:TOWER_FLAMETHROWER_A_COLD_DAMAGE
     +f:TOWER_FLAMETHROWER_A_COLD_FREEZING
     +f:TOWER_FLAMETHROWER_A_INSTAKILL_HP_MAX
     +f:TOWER_FLAMETHROWER_A_NAPALM_DAMAGE
     +f:TOWER_FLAMETHROWER_A_NAPALM_DURATION
     +f:TOWER_FLAMETHROWER_A_NAPALM_FREEZING
     +f:TOWER_FLAMETHROWER_A_PLASMA_DAMAGE
     +f:TOWER_FLAMETHROWER_A_SUPPLY_ARC
     +f:TOWER_FLAMETHROWER_A_SUPPLY_RANGE
     +f:TOWER_FLAMETHROWER_A_ULTIMATE_CROWD_BONUS
     +f:TOWER_FREEZE_PERCENT
     +f:TOWER_FREEZE_SPEED
     +f:TOWER_FREEZING_A_EVAPORATION_DAMAGE
     +f:TOWER_FREEZING_A_EVAPORATION_STACK
     +f:TOWER_FREEZING_A_MONITORING_XP
     +f:TOWER_FREEZING_A_SLOW_PERCENT
     +f:TOWER_FREEZING_A_SLOW_SPEED
     +f:TOWER_FREEZING_A_SNOWBALL_MAX_DURATION
     +f:TOWER_FREEZING_A_ULTIMATE_SNOW_BONUS
     +f:TOWER_GAUSS_A_CONDUCTORS_CHARGING_SPEED
     +f:TOWER_GAUSS_A_CONDUCTORS_RESOURCE_CONSUMPTION
     +f:TOWER_GAUSS_A_IMPROVEMENT_BURN
     +f:TOWER_GAUSS_A_IMPROVEMENT_DAMAGE
     +f:TOWER_GAUSS_A_IMPROVEMENT_XP
     +f:TOWER_GAUSS_A_NANO_DAMAGE
     +f:TOWER_GAUSS_A_NANO_HP
     +f:TOWER_GAUSS_A_OVERLOAD_DAMAGE
     +f:TOWER_GAUSS_A_OVERLOAD_DURATION
     +f:TOWER_GAUSS_A_OVERLOAD_SHOTS
     +f:TOWER_GAUSS_A_ULTIMATE_MINING_TIME
     +f:TOWER_GENERATION_ONE
     +f:TOWER_GENERATION_THREE
     +f:TOWER_GENERATION_TWO
     +f:TOWER_LASER_A_HIGH_DAMAGE
     +f:TOWER_LASER_A_HIGH_ENEMY_COUNT
     +f:TOWER_LASER_A_IONIZATION_SPEED
     +f:TOWER_LASER_A_IONIZATION_SPEED_REDUCTION
     +f:TOWER_LASER_A_LARGE_DAMAGE
     +f:TOWER_LASER_A_LARGE_DURATION
     +f:TOWER_LASER_A_LARGE_ROTATION_SPEED
     +f:TOWER_LASER_A_MIRRORS_BEAM_ANGLE
     +f:TOWER_LASER_A_MIRRORS_BEAM_COUNT
     +f:TOWER_LASER_A_MIRRORS_DAMAGE
     +f:TOWER_LASER_A_ULTIMATE_DAMAGE_BONUS
     +f:TOWER_LASER_A_ULTIMATE_DURATION
     +f:TOWER_LASER_DAMAGE_PER_SECOND_SHOOTING
     +f:TOWER_LRM_AIM_SPEED
     +f:TOWER_MAX_EXP_LEVEL
     +f:TOWER_MAX_UPGRADE_LEVEL
     +f:TOWER_MINIGUN_A_FOUNDATION_ROTATION
     +f:TOWER_MINIGUN_A_FOUNDATION_SPECIAL_BONUS
     +f:TOWER_MINIGUN_A_HEAVY_MECH_ACCELERATION
     +f:TOWER_MINIGUN_A_HEAVY_MECH_MAGAZINE
     +f:TOWER_MINIGUN_A_HEAVY_MECH_SPEED
     +f:TOWER_MINIGUN_A_HEAVY_WEAPONS_DAMAGE
     +f:TOWER_MINIGUN_A_HOT_DAMAGE
     +f:TOWER_MINIGUN_A_HOT_DURATION
     +f:TOWER_MINIGUN_A_MICROGUN_ATTACK_SPEED
     +f:TOWER_MINIGUN_A_MICROGUN_BUILD_DELAY
     +f:TOWER_MINIGUN_A_MICROGUN_COUNT
     +f:TOWER_MINIGUN_A_MICROGUN_RANGE
     +f:TOWER_MINIGUN_MAGAZINE_SIZE
     +f:TOWER_MISSILE_A_COMPACT_COUNT
     +f:TOWER_MISSILE_A_COMPACT_DAMAGE
     +f:TOWER_MISSILE_A_OVERWEIGHT_DAMAGE
     +f:TOWER_MISSILE_A_OVERWEIGHT_HP
     +f:TOWER_MISSILE_A_ULTIMATE_DAMAGE
     +f:TOWER_MISSILE_A_VERTICAL_MAX_RANGE
     +f:TOWER_MISSILE_A_VERTICAL_ROTATION_BONUS
     +f:TOWER_MULTISHOT_A_BACK_MAX_STACK
     +f:TOWER_MULTISHOT_A_BACK_SHOT_DAMAGE
     +f:TOWER_MULTISHOT_A_BUCKSHOT_COINS
     +f:TOWER_MULTISHOT_A_BUCKSHOT_DAMAGE
     +f:TOWER_MULTISHOT_A_COMPACT_ARC_SIZE
     +f:TOWER_MULTISHOT_A_COMPACT_DAMAGE_PER_HIT
     +f:TOWER_MULTISHOT_A_COMPACT_MAX_HIT_COUNT
     +f:TOWER_MULTISHOT_A_COUNTER_DAMAGE
     +f:TOWER_MULTISHOT_A_PENETRATING_DAMAGE
     +f:TOWER_PIERCING
     +f:TOWER_POISON_DURATION
     +f:TOWER_POISON_DURATION_BONUS
     +f:TOWER_POWER
     +f:TOWER_PRICE
     +f:TOWER_PROJECTILE_COUNT
     +f:TOWER_PROJECTILE_SPEED
     +f:TOWER_RANGE
     +f:TOWER_RESOURCE_CONSUMPTION
     +f:TOWER_ROTATION_SPEED
     +f:TOWER_SELF_RESEARCH
     +f:TOWER_SELL_REFUND
     +f:TOWER_SHOOT_ANGLE
     +f:TOWER_SNIPER_A_HEAVY_DAMAGE
     +f:TOWER_SNIPER_A_KILLSHOT_HP
     +f:TOWER_SNIPER_A_KILLSHOT_INTERVAL
     +f:TOWER_SNIPER_A_PENETRATION_DAMAGE
     +f:TOWER_SNIPER_A_SHORT_CRIT_MULTIPLIER
     +f:TOWER_SNIPER_A_SHORT_RANGE
     +f:TOWER_SNIPER_A_SHORT_ROTATION_SPEED
     +f:TOWER_SNIPER_A_ULTIMATE_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_EXPL_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_EXPL_RANGE
     +f:TOWER_SPLASH_A_FAST_BULLETS_BONUS_XP
     +f:TOWER_SPLASH_A_FAST_BULLETS_DAMAGE
     +f:TOWER_SPLASH_A_FAST_MECHANISM_SPEED
     +f:TOWER_SPLASH_A_PENETRATING_DAMAGE
     +f:TOWER_SPLASH_A_PENETRATING_DAMAGE_CHAIN
     +f:TOWER_SPLASH_A_RIFFLED_DAMAGE
     +f:TOWER_SPLASH_A_RIFFLED_SPEED_MARK
     +f:TOWER_SPLASH_A_ULTIMATE_BASE_DAMAGE
     +f:TOWER_SPLASH_A_ULTIMATE_MAX_CHAIN_LENGTH
     +f:TOWER_SPLASH_A_ULTIMATE_ON_HIT_CHANCE
     +f:TOWER_SPLASH_A_ULTIMATE_SPLINTERS
     +f:TOWER_STARTING_LEVEL
     +f:TOWER_STUN_CHANCE
     +f:TOWER_STUN_DURATION
     +f:TOWER_TESLA_A_BALL_DAMAGE
     +f:TOWER_TESLA_A_BATTERIES_DAMAGE
     +f:TOWER_TESLA_A_BATTERIES_SPEED
     +f:TOWER_TESLA_A_CURRENT_DAMAGE
     +f:TOWER_TESLA_A_ULTIMATE_DAMAGE
     +f:TOWER_TESLA_A_ULTIMATE_DURATION
     +f:TOWER_TESLA_A_ULTIMATE_KILL_INTERVAL
     +f:TOWER_TESLA_A_VOLTAGE_LENGTH
     +f:TOWER_TESLA_A_VOLTAGE_MIN_DAMAGE
     +f:TOWER_TYPE_AIR
     +f:TOWER_TYPE_BASIC
     +f:TOWER_TYPE_BLAST
     +f:TOWER_TYPE_CANNON
     +f:TOWER_TYPE_CRUSHER
     +f:TOWER_TYPE_FLAMETHROWER
     +f:TOWER_TYPE_FREEZING
     +f:TOWER_TYPE_GAUSS
     +f:TOWER_TYPE_LASER
     +f:TOWER_TYPE_MINIGUN
     +f:TOWER_TYPE_MISSILE
     +f:TOWER_TYPE_MULTISHOT
     +f:TOWER_TYPE_SNIPER
     +f:TOWER_TYPE_SPLASH
     +f:TOWER_TYPE_TESLA
     +f:TOWER_TYPE_VENOM
     +f:TOWER_UPGRADE_PRICE
     +f:TOWER_VENOM_A_CHAIN_CHANCE_MAX
     +f:TOWER_VENOM_A_CHAIN_DURATION
     +f:TOWER_VENOM_A_CHAIN_PROLONG
     +f:TOWER_VENOM_A_CHAIN_RANGE
     +f:TOWER_VENOM_A_CLOUD_DAMAGE_COEFF
     +f:TOWER_VENOM_A_CLOUD_RANGE
     +f:TOWER_VENOM_A_CONCENTRATE_DAMAGE
     +f:TOWER_VENOM_A_FAST_DAMAGE_PER_STACK
     +f:TOWER_VENOM_A_FAST_MAX_DEBUFFS
     +f:TOWER_VENOM_A_FAST_SPEED
     +f:TOWER_VENOM_A_HARD_DAMAGE
     +f:USER_MAP_MAX_SIZE
     +f:WAVE_INTERVAL
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ResearchType{
     +f:ABILITIES_ENERGY_GENERATION_INTERVAL
     +f:ABILITIES_MAX_ENERGY
     +f:ABILITY_BALL_LIGHTNING
     +f:ABILITY_BALL_LIGHTNING_DAMAGE
     +f:ABILITY_BALL_LIGHTNING_DURATION
     +f:ABILITY_BLIZZARD
     +f:ABILITY_BLIZZARD_BONUS_DAMAGE
     +f:ABILITY_BLIZZARD_DURATION
     +f:ABILITY_BULLET_WALL
     +f:ABILITY_BULLET_WALL_DAMAGE
     +f:ABILITY_BULLET_WALL_DENSITY
     +f:ABILITY_FIREBALL
     +f:ABILITY_FIREBALL_DAMAGE
     +f:ABILITY_FIREBALL_FIRE_DAMAGE
     +f:ABILITY_FIRESTORM
     +f:ABILITY_FIRESTORM_DAMAGE
     +f:ABILITY_FIRESTORM_DURATION
     +f:ABILITY_LOIC
     +f:ABILITY_LOIC_DAMAGE
     +f:ABILITY_LOIC_DURATION
     +f:ABILITY_LOOP
     +f:ABILITY_LOOP_DAMAGE_MULTIPLIER
     +f:ABILITY_LOOP_RESOURCE_AMOUNT
     +f:ABILITY_MAGNET
     +f:ABILITY_MAGNET_DAMAGE_MULTIPLIER
     +f:ABILITY_NUKE
     +f:ABILITY_NUKE_DAMAGE
     +f:ABILITY_OVERLOAD
     +f:ABILITY_OVERLOAD_BONUS_PER_DIFFICULTY
     +f:ABILITY_OVERLOAD_DIFFICULTY
     +f:ABILITY_OVERLOAD_MINING_SPEED
     +f:ABILITY_SMOKE_BOMB
     +f:ABILITY_SMOKE_BOMB_DAMAGE
     +f:ABILITY_SMOKE_BOMB_DURATION
     +f:ABILITY_THUNDER
     +f:ABILITY_THUNDER_CHARGES_COUNT
     +f:ABILITY_THUNDER_DAMAGE
     +f:ABILITY_WINDSTORM
     +f:ABILITY_WINDSTORM_DURATION
     +f:ABILITY_WINDSTORM_RANGE
     +f:BIT_DUST_DROP_RATE
     +f:COINS_GENERATION
     +f:CRAFTING_MAX_STACK
     +f:CRAFTING_QUEUE_SIZE
     +f:CRAFTING_TIME
     +f:DECRYPTING_QUEUE_SIZE
     +f:DEVELOPER_MODE
     +f:ENDLESS_MODE
     +f:ENDLESS_MODE_DIFFICULTY
     +f:EXTENDED_STATISTICS
     +f:FORCED_WAVE_BONUS
     +f:GREEN_PAPERS_BONUS
     +f:LUCKY_WHEEL_BONUS_X2_CHANCE_PRESIGE
     +f:MINERS_INSTALL_DURATION
     +f:MINER_INFIAR_INSTALL_DURATION
     +f:MINER_INFIAR_LOOT_SLOTS
     +f:MINER_INFIAR_MAX_UPGRADE_LEVEL
     +f:MINER_INFIAR_SPEED
     +f:MINER_MATRIX_INSTALL_DURATION
     +f:MINER_MATRIX_LOOT_SLOTS
     +f:MINER_MATRIX_MAX_UPGRADE_LEVEL
     +f:MINER_MATRIX_SPEED
     +f:MINER_SCALAR_INSTALL_DURATION
     +f:MINER_SCALAR_LOOT_SLOTS
     +f:MINER_SCALAR_MAX_UPGRADE_LEVEL
     +f:MINER_SCALAR_SPEED
     +f:MINER_TENSOR_INSTALL_DURATION
     +f:MINER_TENSOR_LOOT_SLOTS
     +f:MINER_TENSOR_MAX_UPGRADE_LEVEL
     +f:MINER_TENSOR_SPEED
     +f:MINER_TYPE_INFIAR
     +f:MINER_TYPE_MATRIX
     +f:MINER_TYPE_SCALAR
     +f:MINER_TYPE_TENSOR
     +f:MINER_TYPE_VECTOR
     +f:MINER_VECTOR_INSTALL_DURATION
     +f:MINER_VECTOR_LOOT_SLOTS
     +f:MINER_VECTOR_MAX_UPGRADE_LEVEL
     +f:MINER_VECTOR_SPEED
     +f:MODIFIER_ATTACK_SPEED_VALUE
     +f:MODIFIER_BALANCE_UPGRADE_PRICE
     +f:MODIFIER_BOUNTY_PERCENT
     +f:MODIFIER_BOUNTY_VALUE
     +f:MODIFIER_DAMAGE_VALUE
     +f:MODIFIER_EXPERIENCE_VALUE
     +f:MODIFIER_MINING_SPEED_VALUE
     +f:MODIFIER_POWER_VALUE
     +f:MODIFIER_SEARCH_RANGE_VALUE
     +f:MODIFIER_TYPE_ATTACK_SPEED
     +f:MODIFIER_TYPE_BALANCE
     +f:MODIFIER_TYPE_BOUNTY
     +f:MODIFIER_TYPE_DAMAGE
     +f:MODIFIER_TYPE_EXPERIENCE
     +f:MODIFIER_TYPE_MINING_SPEED
     +f:MODIFIER_TYPE_POWER
     +f:MODIFIER_TYPE_SEARCH
     +f:PRESTIGE
     +f:PRESTIGE_GREEN_PAPERS_BONUS_I
     +f:PRESTIGE_GREEN_PAPERS_BONUS_II
     +f:PRESTIGE_GREEN_PAPERS_BONUS_III
     +f:PRESTIGE_LOOT_FREQUENCY_I
     +f:PRESTIGE_LOOT_RARITY_I
     +f:PRESTIGE_LOOT_RARITY_II
     +f:PRESTIGE_LOOT_RARITY_III
     +f:PRESTIGE_REGULAR_QUEST_BONUS_I
     +f:PRESTIGE_REGULAR_QUEST_BONUS_II
     +f:PRESTIGE_REGULAR_QUEST_BONUS_III
     +f:PRESTIGE_REGULAR_QUEST_SLOT
     +f:REGULAR_QUESTS_REPLACES
     +f:ROOT
     +f:STARTING_HEALTH
     +f:STARTING_MONEY
     +f:STORYLINE_A_STAR
     +f:STORYLINE_BINARY_SEARCH
     +f:STORYLINE_BRUTE_FORCE_SEARCH
     +f:STORYLINE_BUBBLE_SORT
     +f:STORYLINE_CACHING
     +f:STORYLINE_CUCKOO_HASHING
     +f:STORYLINE_DIJKSTRAS_ALGORITHM
     +f:STORYLINE_HASHING
     +f:STORYLINE_INDEX_MAPPING
     +f:STORYLINE_LM_ALGORITHM
     +f:STORYLINE_LSTM_NETWORK
     +f:STORYLINE_MERGE_SORT
     +f:STORYLINE_QUICKSORT
     +f:STORYLINE_RAINBOW_TABLE
     +f:STORYLINE_RESOURCE_INFIAR
     +f:STORYLINE_RESOURCE_MATRIX
     +f:STORYLINE_RESOURCE_SCALAR
     +f:STORYLINE_RESOURCE_TENSOR
     +f:STORYLINE_RESOURCE_VECTOR
     +f:STORYLINE_RP_ALGORITHM
     +f:STORYLINE_SCG_ALGORITHM
     +f:STORYLINE_TIMSORT
     +f:S_ABILITIES_ENERGY_GENERATION_INTERVAL_A
     +f:S_A_BALL_LIGHTNING_DURATION_A
     +f:S_A_BULLET_WALL_DENSITY_A
     +f:S_A_FIREBALL_FIRE_DAMAGE_A
     +f:S_COINS_GENERATION_A
     +f:S_ENEMIES_SPEED_A
     +f:S_EXPLOSIONS_PIERCING_A
     +f:S_FORCED_WAVE_BONUS_A
     +f:S_GREEN_PAPERS_BONUS_A
     +f:S_GREEN_PAPERS_BONUS_B
     +f:S_LOOT_FREQUENCY_A
     +f:S_LOOT_RARITY_A
     +f:S_MINER_INSTALL_DURATION_A
     +f:S_MINER_INSTALL_DURATION_B
     +f:S_MINER_SPEED_A
     +f:S_MODIFIER_EXPERIENCE_VALUE_A
     +f:S_M_ATTACK_SPEED_VALUE_A
     +f:S_M_BOUNTY_VALUE_A
     +f:S_M_MINING_SPEED_VALUE_A
     +f:S_M_POWER_VALUE_A
     +f:S_M_POWER_VALUE_B
     +f:S_M_TYPE_BALANCE_A
     +f:S_M_TYPE_BOUNTY_A
     +f:S_M_TYPE_EXPERIENCE_A
     +f:S_M_TYPE_MINING_SPEED_A
     +f:S_M_TYPE_POWER_A
     +f:S_REGULAR_QUEST_SLOT_A
     +f:S_STARTING_HEALTH_A
     +f:S_STARTING_MONEY_A
     +f:S_TOWER_ATTACK_SPEED_A
     +f:S_TOWER_ATTACK_SPEED_B
     +f:S_TOWER_ATTACK_SPEED_C
     +f:S_TOWER_ATTACK_SPEED_D
     +f:S_TOWER_ATTACK_SPEED_E
     +f:S_TOWER_DAMAGE_A
     +f:S_TOWER_DAMAGE_B
     +f:S_TOWER_DAMAGE_C
     +f:S_TOWER_DAMAGE_D
     +f:S_TOWER_EXPERIENCE_GENERATION_A
     +f:S_TOWER_EXPERIENCE_MULTIPLIER_A
     +f:S_TOWER_EXPERIENCE_MULTIPLIER_B
     +f:S_TOWER_EXPLOSION_RANGE_A
     +f:S_TOWER_FREEZE_PERCENT_A
     +f:S_TOWER_POWER_A
     +f:S_TOWER_POWER_B
     +f:S_TOWER_PROJECTILE_COUNT_A
     +f:S_TOWER_PROJECTILE_SPEED_A
     +f:S_TOWER_PROJECTILE_SPEED_B
     +f:S_TOWER_RANGE_A
     +f:S_TOWER_RANGE_B
     +f:S_TOWER_RANGE_C
     +f:S_TOWER_ROTATION_SPEED_A
     +f:S_TOWER_ROTATION_SPEED_B
     +f:S_TOWER_ROTATION_SPEED_C
     +f:S_TOWER_STUN_CHANCE_A
     +f:S_TOWER_STUN_DURATION_A
     +f:S_TOWER_UPGRADE_PRICE_A
     +f:S_TOWER_UPGRADE_PRICE_B
     +f:S_WAVE_INTERVAL_A
     +f:S_WAVE_INTERVAL_B
     +f:TOWERS_ATTACK_SPEED
     +f:TOWERS_DAMAGE
     +f:TOWERS_EXPERIENCE_GENERATION
     +f:TOWERS_EXPERIENCE_MULTIPLIER
     +f:TOWERS_MAX_EXP_LEVEL
     +f:TOWERS_POWERFUL_ABILITY_PWR
     +f:TOWERS_PROJECTILE_SPEED
     +f:TOWERS_RANGE
     +f:TOWERS_ROTATION_SPEED
     +f:TOWERS_SELL_REFUND
     +f:TOWERS_STARTING_PWR
     +f:TOWERS_UPGRADE_PRICE
     +f:TOWER_AIR_ATTACK_SPEED
     +f:TOWER_AIR_AUTO_1
     +f:TOWER_AIR_AUTO_2
     +f:TOWER_AIR_AUTO_3
     +f:TOWER_AIR_AUTO_4
     +f:TOWER_AIR_AUTO_5
     +f:TOWER_AIR_AUTO_6
     +f:TOWER_AIR_A_AIMED_DROP_DAMAGE
     +f:TOWER_AIR_A_FAST_MECHANISM_SPEED
     +f:TOWER_AIR_A_FOUNDATION_SPEED
     +f:TOWER_AIR_A_HEAVY_WEAPONS_DAMAGE
     +f:TOWER_AIR_A_ULTIMATE_DAMAGE
     +f:TOWER_AIR_BURNING_TIME
     +f:TOWER_AIR_BURN_CHANCE
     +f:TOWER_AIR_BURN_DAMAGE
     +f:TOWER_AIR_DAMAGE
     +f:TOWER_AIR_EXPERIENCE_GENERATION
     +f:TOWER_AIR_EXPERIENCE_MULTIPLIER
     +f:TOWER_AIR_GENERATION_ONE
     +f:TOWER_AIR_GENERATION_THREE
     +f:TOWER_AIR_GENERATION_TWO
     +f:TOWER_AIR_MAX_EXP_LEVEL
     +f:TOWER_AIR_MAX_UPGRADE_LEVEL
     +f:TOWER_AIR_PRICE
     +f:TOWER_AIR_PROJECTILE_SPEED
     +f:TOWER_AIR_RANGE
     +f:TOWER_AIR_ROTATION_SPEED
     +f:TOWER_AIR_STARTING_LEVEL
     +f:TOWER_AIR_STARTING_PWR
     +f:TOWER_AIR_UPGRADE_PRICE
     +f:TOWER_BASIC_ATTACK_SPEED
     +f:TOWER_BASIC_AUTO_1
     +f:TOWER_BASIC_AUTO_2
     +f:TOWER_BASIC_AUTO_3
     +f:TOWER_BASIC_AUTO_4
     +f:TOWER_BASIC_AUTO_5
     +f:TOWER_BASIC_AUTO_6
     +f:TOWER_BASIC_A_COPY_COUNT
     +f:TOWER_BASIC_A_COPY_UPGRADE_LEVEL
     +f:TOWER_BASIC_A_DOUBLE_GUN_ATTACK_SPEED
     +f:TOWER_BASIC_A_FOUNDATION_RICOCHET_CHANCE
     +f:TOWER_BASIC_A_FOUNDATION_SPEED
     +f:TOWER_BASIC_A_LARGE_CALIBER_DAMAGE
     +f:TOWER_BASIC_A_SPECIAL_PWR_SHARE
     +f:TOWER_BASIC_BASIC_A_FOUNDATION_RICOCHET_SPEED
     +f:TOWER_BASIC_DAMAGE
     +f:TOWER_BASIC_DAMAGE_MULTIPLIER
     +f:TOWER_BASIC_EXPERIENCE_GENERATION
     +f:TOWER_BASIC_EXPERIENCE_MULTIPLIER
     +f:TOWER_BASIC_GENERATION_ONE
     +f:TOWER_BASIC_GENERATION_THREE
     +f:TOWER_BASIC_GENERATION_TWO
     +f:TOWER_BASIC_MAX_EXP_LEVEL
     +f:TOWER_BASIC_MAX_UPGRADE_LEVEL
     +f:TOWER_BASIC_PRICE
     +f:TOWER_BASIC_PROJECTILE_SPEED
     +f:TOWER_BASIC_RANGE
     +f:TOWER_BASIC_ROTATION_SPEED
     +f:TOWER_BASIC_STARTING_LEVEL
     +f:TOWER_BASIC_STARTING_PWR
     +f:TOWER_BASIC_UPGRADE_PRICE
     +f:TOWER_BLAST_ATTACK_SPEED
     +f:TOWER_BLAST_AUTO_1
     +f:TOWER_BLAST_AUTO_2
     +f:TOWER_BLAST_AUTO_3
     +f:TOWER_BLAST_AUTO_4
     +f:TOWER_BLAST_AUTO_5
     +f:TOWER_BLAST_AUTO_6
     +f:TOWER_BLAST_A_FAST_MECHANISM_SPEED
     +f:TOWER_BLAST_A_HEAVY_SHELL_CHANCE
     +f:TOWER_BLAST_A_HEAVY_SHELL_DAMAGE
     +f:TOWER_BLAST_A_HEAVY_SHELL_SPEED
     +f:TOWER_BLAST_A_SONIC_WAVE_DURATION
     +f:TOWER_BLAST_A_SONIC_WAVE_QUAKE_ENEMIES
     +f:TOWER_BLAST_A_STOPPING_FORCE_CHANCE
     +f:TOWER_BLAST_A_STOPPING_FORCE_MAX_DIST
     +f:TOWER_BLAST_A_STOPPING_FORCE_ULTIMATE_MAX
     +f:TOWER_BLAST_DAMAGE
     +f:TOWER_BLAST_EXPERIENCE_GENERATION
     +f:TOWER_BLAST_EXPERIENCE_MULTIPLIER
     +f:TOWER_BLAST_GENERATION_ONE
     +f:TOWER_BLAST_GENERATION_THREE
     +f:TOWER_BLAST_GENERATION_TWO
     +f:TOWER_BLAST_MAX_EXP_LEVEL
     +f:TOWER_BLAST_MAX_UPGRADE_LEVEL
     +f:TOWER_BLAST_PRICE
     +f:TOWER_BLAST_QUAKE_CHARGE_SPEED
     +f:TOWER_BLAST_RANGE
     +f:TOWER_BLAST_STARTING_LEVEL
     +f:TOWER_BLAST_STARTING_PWR
     +f:TOWER_BLAST_STUN_CHANCE
     +f:TOWER_BLAST_STUN_DURATION
     +f:TOWER_BLAST_UPGRADE_PRICE
     +f:TOWER_CANNON_ATTACK_SPEED
     +f:TOWER_CANNON_AUTO_1
     +f:TOWER_CANNON_AUTO_2
     +f:TOWER_CANNON_AUTO_3
     +f:TOWER_CANNON_AUTO_4
     +f:TOWER_CANNON_AUTO_5
     +f:TOWER_CANNON_AUTO_6
     +f:TOWER_CANNON_A_FOUNDATION_PIERCING
     +f:TOWER_CANNON_A_FOUNDATION_PIERCING_1
     +f:TOWER_CANNON_A_FOUNDATION_SPEED
     +f:TOWER_CANNON_A_LONG_BARREL_RANGE
     +f:TOWER_CANNON_A_LONG_BARREL_RANGE_1
     +f:TOWER_CANNON_A_MINE_COUNT
     +f:TOWER_CANNON_A_MINE_DAMAGE
     +f:TOWER_CANNON_A_MINE_INTERVAL
     +f:TOWER_CANNON_A_PRESSURE_DAMAGE
     +f:TOWER_CANNON_A_PRESSURE_HEALTH
     +f:TOWER_CANNON_A_SHRAPNEL_COUNT
     +f:TOWER_CANNON_A_SHRAPNEL_COUNT_1
     +f:TOWER_CANNON_A_SHRAPNEL_DAMAGE
     +f:TOWER_CANNON_DAMAGE
     +f:TOWER_CANNON_EXPERIENCE_GENERATION
     +f:TOWER_CANNON_EXPERIENCE_MULTIPLIER
     +f:TOWER_CANNON_EXPLOSION_RANGE
     +f:TOWER_CANNON_GENERATION_ONE
     +f:TOWER_CANNON_GENERATION_THREE
     +f:TOWER_CANNON_GENERATION_TWO
     +f:TOWER_CANNON_MAX_EXP_LEVEL
     +f:TOWER_CANNON_MAX_UPGRADE_LEVEL
     +f:TOWER_CANNON_PRICE
     +f:TOWER_CANNON_PROJECTILE_SPEED
     +f:TOWER_CANNON_RANGE
     +f:TOWER_CANNON_ROTATION_SPEED
     +f:TOWER_CANNON_STARTING_LEVEL
     +f:TOWER_CANNON_STARTING_PWR
     +f:TOWER_CANNON_UPGRADE_PRICE
     +f:TOWER_CRUSHER_AUTO_1
     +f:TOWER_CRUSHER_AUTO_2
     +f:TOWER_CRUSHER_AUTO_3
     +f:TOWER_CRUSHER_AUTO_4
     +f:TOWER_CRUSHER_AUTO_5
     +f:TOWER_CRUSHER_AUTO_6
     +f:TOWER_CRUSHER_A_CAREFUL_PROCESSING
     +f:TOWER_CRUSHER_A_DISORIENTATION_CHANCE
     +f:TOWER_CRUSHER_A_HEAVY_VICE
     +f:TOWER_CRUSHER_A_INCREASED_CAPACITY
     +f:TOWER_CRUSHER_A_ULTIMATE_COINS_MAX
     +f:TOWER_CRUSHER_DAMAGE
     +f:TOWER_CRUSHER_DURATION
     +f:TOWER_CRUSHER_EXPERIENCE_GENERATION
     +f:TOWER_CRUSHER_EXPERIENCE_MULTIPLIER
     +f:TOWER_CRUSHER_EXPERIENCE_MULTIPLIER_U
     +f:TOWER_CRUSHER_GENERATION_ONE
     +f:TOWER_CRUSHER_GENERATION_THREE
     +f:TOWER_CRUSHER_GENERATION_TWO
     +f:TOWER_CRUSHER_MAX_EXP_LEVEL
     +f:TOWER_CRUSHER_MAX_UPGRADE_LEVEL
     +f:TOWER_CRUSHER_PRICE
     +f:TOWER_CRUSHER_RANGE
     +f:TOWER_CRUSHER_STARTING_LEVEL
     +f:TOWER_CRUSHER_STARTING_PWR
     +f:TOWER_CRUSHER_UPGRADE_PRICE
     +f:TOWER_FLAMETHROWER_AUTO_1
     +f:TOWER_FLAMETHROWER_AUTO_2
     +f:TOWER_FLAMETHROWER_AUTO_3
     +f:TOWER_FLAMETHROWER_AUTO_4
     +f:TOWER_FLAMETHROWER_AUTO_5
     +f:TOWER_FLAMETHROWER_AUTO_6
     +f:TOWER_FLAMETHROWER_A_COLD_DAMAGE
     +f:TOWER_FLAMETHROWER_A_COLD_FREEZING
     +f:TOWER_FLAMETHROWER_A_INSTAKILL_HP_MAX
     +f:TOWER_FLAMETHROWER_A_NAPALM_DAMAGE
     +f:TOWER_FLAMETHROWER_A_NAPALM_DURATION
     +f:TOWER_FLAMETHROWER_A_NAPALM_FREEZING
     +f:TOWER_FLAMETHROWER_A_PLASMA_DAMAGE
     +f:TOWER_FLAMETHROWER_A_SUPPLY_ARC
     +f:TOWER_FLAMETHROWER_A_SUPPLY_RANGE
     +f:TOWER_FLAMETHROWER_A_ULTIMATE_CROWD_BONUS
     +f:TOWER_FLAMETHROWER_BURNING_TIME
     +f:TOWER_FLAMETHROWER_DAMAGE
     +f:TOWER_FLAMETHROWER_EXPERIENCE_GENERATION
     +f:TOWER_FLAMETHROWER_EXPERIENCE_MULTIPLIER
     +f:TOWER_FLAMETHROWER_GENERATION_ONE
     +f:TOWER_FLAMETHROWER_GENERATION_THREE
     +f:TOWER_FLAMETHROWER_GENERATION_TWO
     +f:TOWER_FLAMETHROWER_MAX_EXP_LEVEL
     +f:TOWER_FLAMETHROWER_MAX_UPGRADE_LEVEL
     +f:TOWER_FLAMETHROWER_PRICE
     +f:TOWER_FLAMETHROWER_RANGE
     +f:TOWER_FLAMETHROWER_ROTATION_SPEED
     +f:TOWER_FLAMETHROWER_STARTING_LEVEL
     +f:TOWER_FLAMETHROWER_STARTING_PWR
     +f:TOWER_FLAMETHROWER_UPGRADE_PRICE
     +f:TOWER_FREEZING_AUTO_1
     +f:TOWER_FREEZING_AUTO_2
     +f:TOWER_FREEZING_AUTO_3
     +f:TOWER_FREEZING_AUTO_4
     +f:TOWER_FREEZING_AUTO_5
     +f:TOWER_FREEZING_A_EVAPORATION_DAMAGE
     +f:TOWER_FREEZING_A_EVAPORATION_STACK
     +f:TOWER_FREEZING_A_MONITORING_XP
     +f:TOWER_FREEZING_A_SLOW_PERCENT
     +f:TOWER_FREEZING_A_SLOW_SPEED
     +f:TOWER_FREEZING_A_SNOWBALL_MAX_DURATION
     +f:TOWER_FREEZING_A_ULTIMATE_SNOW_BONUS
     +f:TOWER_FREEZING_CHAIN_LIGHTNING_LENGTH_BONUS
     +f:TOWER_FREEZING_EXPERIENCE_GENERATION
     +f:TOWER_FREEZING_EXPERIENCE_MULTIPLIER
     +f:TOWER_FREEZING_FREEZE_PERCENT
     +f:TOWER_FREEZING_FREEZE_SPEED
     +f:TOWER_FREEZING_GENERATION_ONE
     +f:TOWER_FREEZING_GENERATION_THREE
     +f:TOWER_FREEZING_GENERATION_TWO
     +f:TOWER_FREEZING_MAX_EXP_LEVEL
     +f:TOWER_FREEZING_MAX_UPGRADE_LEVEL
     +f:TOWER_FREEZING_POISON_DURATION_BONUS
     +f:TOWER_FREEZING_PRICE
     +f:TOWER_FREEZING_RANGE
     +f:TOWER_FREEZING_STARTING_LEVEL
     +f:TOWER_FREEZING_STARTING_PWR
     +f:TOWER_FREEZING_UPGRADE_PRICE
     +f:TOWER_GAUSS_AUTO_1
     +f:TOWER_GAUSS_AUTO_2
     +f:TOWER_GAUSS_AUTO_3
     +f:TOWER_GAUSS_AUTO_4
     +f:TOWER_GAUSS_AUTO_5
     +f:TOWER_GAUSS_AUTO_6
     +f:TOWER_GAUSS_A_IMPROVEMENT_BURN
     +f:TOWER_GAUSS_A_IMPROVEMENT_DAMAGE
     +f:TOWER_GAUSS_A_IMPROVEMENT_XP
     +f:TOWER_GAUSS_A_NANO_DAMAGE
     +f:TOWER_GAUSS_A_NANO_HP
     +f:TOWER_GAUSS_A_OVERLOAD_DAMAGE
     +f:TOWER_GAUSS_A_OVERLOAD_DURATION
     +f:TOWER_GAUSS_A_OVERLOAD_SHOTS
     +f:TOWER_GAUSS_A_ULTIMATE_MINING_TIME
     +f:TOWER_GAUSS_CHARGING_SPEED
     +f:TOWER_GAUSS_DAMAGE
     +f:TOWER_GAUSS_EXPERIENCE_GENERATION
     +f:TOWER_GAUSS_EXPERIENCE_MULTIPLIER
     +f:TOWER_GAUSS_GAUSS_A_CONDUCTORS_CHARGING_SPEED
     +f:TOWER_GAUSS_GAUSS_A_CONDUCTORS_RESOURCE_CONSUMPTION
     +f:TOWER_GAUSS_GENERATION_ONE
     +f:TOWER_GAUSS_GENERATION_THREE
     +f:TOWER_GAUSS_GENERATION_TWO
     +f:TOWER_GAUSS_MAX_EXP_LEVEL
     +f:TOWER_GAUSS_MAX_UPGRADE_LEVEL
     +f:TOWER_GAUSS_PRICE
     +f:TOWER_GAUSS_RESOURCE_CONSUMPTION
     +f:TOWER_GAUSS_ROTATION_SPEED
     +f:TOWER_GAUSS_STARTING_LEVEL
     +f:TOWER_GAUSS_STARTING_PWR
     +f:TOWER_GAUSS_UPGRADE_PRICE
     +f:TOWER_LASER_AUTO_1
     +f:TOWER_LASER_AUTO_2
     +f:TOWER_LASER_AUTO_3
     +f:TOWER_LASER_AUTO_4
     +f:TOWER_LASER_AUTO_5
     +f:TOWER_LASER_AUTO_6
     +f:TOWER_LASER_A_HIGH_DAMAGE
     +f:TOWER_LASER_A_HIGH_ENEMY_COUNT
     +f:TOWER_LASER_A_IONIZATION_SPEED
     +f:TOWER_LASER_A_IONIZATION_SPEED_REDUCTION
     +f:TOWER_LASER_A_LARGE_DURATION
     +f:TOWER_LASER_A_LARGE_ROTATION_SPEED
     +f:TOWER_LASER_A_MIRRORS_BEAM_ANGLE
     +f:TOWER_LASER_A_MIRRORS_BEAM_COUNT
     +f:TOWER_LASER_A_MIRRORS_DAMAGE
     +f:TOWER_LASER_A_ULTIMATE_DAMAGE_BONUS
     +f:TOWER_LASER_A_ULTIMATE_DURATION
     +f:TOWER_LASER_BATTERIES_CAPACITY
     +f:TOWER_LASER_CHARGING_SPEED
     +f:TOWER_LASER_DAMAGE
     +f:TOWER_LASER_DAMAGE_PER_SECOND_SHOOTING
     +f:TOWER_LASER_EXPERIENCE_GENERATION
     +f:TOWER_LASER_EXPERIENCE_MULTIPLIER
     +f:TOWER_LASER_GENERATION_ONE
     +f:TOWER_LASER_GENERATION_THREE
     +f:TOWER_LASER_GENERATION_TWO
     +f:TOWER_LASER_MAX_EXP_LEVEL
     +f:TOWER_LASER_MAX_UPGRADE_LEVEL
     +f:TOWER_LASER_PRICE
     +f:TOWER_LASER_RANGE
     +f:TOWER_LASER_ROTATION_SPEED
     +f:TOWER_LASER_STARTING_LEVEL
     +f:TOWER_LASER_STARTING_PWR
     +f:TOWER_LASER_UPGRADE_PRICE
     +f:TOWER_MINIGUN_ACCELERATION
     +f:TOWER_MINIGUN_ATTACK_SPEED
     +f:TOWER_MINIGUN_AUTO_1
     +f:TOWER_MINIGUN_AUTO_2
     +f:TOWER_MINIGUN_AUTO_3
     +f:TOWER_MINIGUN_AUTO_4
     +f:TOWER_MINIGUN_AUTO_5
     +f:TOWER_MINIGUN_AUTO_6
     +f:TOWER_MINIGUN_A_FOUNDATION_ROTATION
     +f:TOWER_MINIGUN_A_FOUNDATION_SPECIAL_BONUS
     +f:TOWER_MINIGUN_A_HEAVY_MECH_ACCELERATION
     +f:TOWER_MINIGUN_A_HEAVY_MECH_MAGAZINE
     +f:TOWER_MINIGUN_A_HEAVY_MECH_SPEED
     +f:TOWER_MINIGUN_A_HEAVY_WEAPONS_DAMAGE
     +f:TOWER_MINIGUN_A_HOT_DAMAGE
     +f:TOWER_MINIGUN_A_HOT_DURATION
     +f:TOWER_MINIGUN_A_MICROGUN_ATTACK_SPEED
     +f:TOWER_MINIGUN_A_MICROGUN_BUILD_DELAY
     +f:TOWER_MINIGUN_A_MICROGUN_COUNT
     +f:TOWER_MINIGUN_A_MICROGUN_RANGE
     +f:TOWER_MINIGUN_DAMAGE
     +f:TOWER_MINIGUN_EXPERIENCE_GENERATION
     +f:TOWER_MINIGUN_EXPERIENCE_MULTIPLIER
     +f:TOWER_MINIGUN_GENERATION_ONE
     +f:TOWER_MINIGUN_GENERATION_THREE
     +f:TOWER_MINIGUN_GENERATION_TWO
     +f:TOWER_MINIGUN_MAGAZINE_SIZE
     +f:TOWER_MINIGUN_MAX_EXP_LEVEL
     +f:TOWER_MINIGUN_MAX_UPGRADE_LEVEL
     +f:TOWER_MINIGUN_PRICE
     +f:TOWER_MINIGUN_RANGE
     +f:TOWER_MINIGUN_ROTATION_SPEED
     +f:TOWER_MINIGUN_STARTING_LEVEL
     +f:TOWER_MINIGUN_STARTING_PWR
     +f:TOWER_MINIGUN_UPGRADE_PRICE
     +f:TOWER_MISSILE_ATTACK_SPEED
     +f:TOWER_MISSILE_AUTO_1
     +f:TOWER_MISSILE_AUTO_2
     +f:TOWER_MISSILE_AUTO_3
     +f:TOWER_MISSILE_AUTO_4
     +f:TOWER_MISSILE_AUTO_5
     +f:TOWER_MISSILE_AUTO_6
     +f:TOWER_MISSILE_A_COMPACT_COUNT
     +f:TOWER_MISSILE_A_COMPACT_DAMAGE
     +f:TOWER_MISSILE_A_OVERWEIGHT_DAMAGE
     +f:TOWER_MISSILE_A_OVERWEIGHT_HP
     +f:TOWER_MISSILE_A_ULTIMATE_DAMAGE
     +f:TOWER_MISSILE_A_VERTICAL_MAX_RANGE
     +f:TOWER_MISSILE_A_VERTICAL_ROTATION_BONUS
     +f:TOWER_MISSILE_DAMAGE
     +f:TOWER_MISSILE_EXPERIENCE_GENERATION
     +f:TOWER_MISSILE_EXPERIENCE_MULTIPLIER
     +f:TOWER_MISSILE_EXPLOSION_RANGE
     +f:TOWER_MISSILE_GENERATION_ONE
     +f:TOWER_MISSILE_GENERATION_THREE
     +f:TOWER_MISSILE_GENERATION_TWO
     +f:TOWER_MISSILE_LRM_AIM_SPEED
     +f:TOWER_MISSILE_MAX_EXP_LEVEL
     +f:TOWER_MISSILE_MAX_UPGRADE_LEVEL
     +f:TOWER_MISSILE_PRICE
     +f:TOWER_MISSILE_PROJECTILE_SPEED
     +f:TOWER_MISSILE_RANGE
     +f:TOWER_MISSILE_ROTATION_SPEED
     +f:TOWER_MISSILE_STARTING_LEVEL
     +f:TOWER_MISSILE_STARTING_PWR
     +f:TOWER_MISSILE_UPGRADE_PRICE
     +f:TOWER_MULTISHOT_ATTACK_SPEED
     +f:TOWER_MULTISHOT_AUTO_1
     +f:TOWER_MULTISHOT_AUTO_2
     +f:TOWER_MULTISHOT_AUTO_3
     +f:TOWER_MULTISHOT_AUTO_4
     +f:TOWER_MULTISHOT_AUTO_5
     +f:TOWER_MULTISHOT_AUTO_6
     +f:TOWER_MULTISHOT_A_BACK_MAX_STACK
     +f:TOWER_MULTISHOT_A_BACK_SHOT_DAMAGE
     +f:TOWER_MULTISHOT_A_BUCKSHOT_COINS
     +f:TOWER_MULTISHOT_A_BUCKSHOT_DAMAGE
     +f:TOWER_MULTISHOT_A_COMPACT_ARC_SIZE
     +f:TOWER_MULTISHOT_A_COMPACT_DAMAGE_PER_HIT
     +f:TOWER_MULTISHOT_A_COMPACT_MAX_HIT_COUNT
     +f:TOWER_MULTISHOT_A_COUNTER_DAMAGE
     +f:TOWER_MULTISHOT_A_PENETRATING_DAMAGE
     +f:TOWER_MULTISHOT_DAMAGE
     +f:TOWER_MULTISHOT_EXPERIENCE_GENERATION
     +f:TOWER_MULTISHOT_EXPERIENCE_MULTIPLIER
     +f:TOWER_MULTISHOT_GENERATION_ONE
     +f:TOWER_MULTISHOT_GENERATION_THREE
     +f:TOWER_MULTISHOT_GENERATION_TWO
     +f:TOWER_MULTISHOT_MAX_EXP_LEVEL
     +f:TOWER_MULTISHOT_MAX_UPGRADE_LEVEL
     +f:TOWER_MULTISHOT_PRICE
     +f:TOWER_MULTISHOT_PROJECTILE_COUNT
     +f:TOWER_MULTISHOT_PROJECTILE_SPEED
     +f:TOWER_MULTISHOT_RANGE
     +f:TOWER_MULTISHOT_ROTATION_SPEED
     +f:TOWER_MULTISHOT_SHOOT_ANGLE
     +f:TOWER_MULTISHOT_STARTING_LEVEL
     +f:TOWER_MULTISHOT_STARTING_PWR
     +f:TOWER_MULTISHOT_UPGRADE_PRICE
     +f:TOWER_SNIPER_AIM_SPEED
     +f:TOWER_SNIPER_ATTACK_SPEED
     +f:TOWER_SNIPER_AUTO_1
     +f:TOWER_SNIPER_AUTO_2
     +f:TOWER_SNIPER_AUTO_3
     +f:TOWER_SNIPER_AUTO_4
     +f:TOWER_SNIPER_AUTO_5
     +f:TOWER_SNIPER_A_HEAVY_DAMAGE
     +f:TOWER_SNIPER_A_KILLSHOT_HP
     +f:TOWER_SNIPER_A_KILLSHOT_INTERVAL
     +f:TOWER_SNIPER_A_LONG_RANGE
     +f:TOWER_SNIPER_A_PENETRATION_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_EXPL_DAMAGE
     +f:TOWER_SNIPER_A_ULTIMATE_EXPL_RANGE
     +f:TOWER_SNIPER_CRIT_CHANCE
     +f:TOWER_SNIPER_CRIT_MULTIPLIER
     +f:TOWER_SNIPER_DAMAGE
     +f:TOWER_SNIPER_EXPERIENCE_GENERATION
     +f:TOWER_SNIPER_EXPERIENCE_MULTIPLIER
     +f:TOWER_SNIPER_GENERATION_ONE
     +f:TOWER_SNIPER_GENERATION_THREE
     +f:TOWER_SNIPER_GENERATION_TWO
     +f:TOWER_SNIPER_MAX_EXP_LEVEL
     +f:TOWER_SNIPER_MAX_UPGRADE_LEVEL
     +f:TOWER_SNIPER_PRICE
     +f:TOWER_SNIPER_RANGE
     +f:TOWER_SNIPER_ROTATION_SPEED
     +f:TOWER_SNIPER_SNIPER_A_SHORT_CRIT_MULTIPLIER
     +f:TOWER_SNIPER_SNIPER_A_SHORT_ROTATION_SPEED
     +f:TOWER_SNIPER_STARTING_LEVEL
     +f:TOWER_SNIPER_STARTING_PWR
     +f:TOWER_SNIPER_UPGRADE_PRICE
     +f:TOWER_SPLASH_ACCURACY
     +f:TOWER_SPLASH_ATTACK_SPEED
     +f:TOWER_SPLASH_AUTO_1
     +f:TOWER_SPLASH_AUTO_2
     +f:TOWER_SPLASH_AUTO_3
     +f:TOWER_SPLASH_AUTO_4
     +f:TOWER_SPLASH_AUTO_5
     +f:TOWER_SPLASH_AUTO_6
     +f:TOWER_SPLASH_A_FAST_BULLETS_BONUS_XP
     +f:TOWER_SPLASH_A_FAST_BULLETS_DAMAGE
     +f:TOWER_SPLASH_A_FAST_MECHANISM_SPEED
     +f:TOWER_SPLASH_A_PENETRATING_DAMAGE_CHAIN
     +f:TOWER_SPLASH_A_RIFFLED_DAMAGE
     +f:TOWER_SPLASH_A_RIFFLED_SPEED_MARK
     +f:TOWER_SPLASH_A_ULTIMATE_BASE_DAMAGE
     +f:TOWER_SPLASH_A_ULTIMATE_MAX_CHAIN_LENGTH
     +f:TOWER_SPLASH_A_ULTIMATE_ON_HIT_CHANCE
     +f:TOWER_SPLASH_A_ULTIMATE_SPLINTERS
     +f:TOWER_SPLASH_DAMAGE
     +f:TOWER_SPLASH_EXPERIENCE_GENERATION
     +f:TOWER_SPLASH_EXPERIENCE_MULTIPLIER
     +f:TOWER_SPLASH_GENERATION_ONE
     +f:TOWER_SPLASH_GENERATION_THREE
     +f:TOWER_SPLASH_GENERATION_TWO
     +f:TOWER_SPLASH_MAX_EXP_LEVEL
     +f:TOWER_SPLASH_MAX_UPGRADE_LEVEL
     +f:TOWER_SPLASH_PRICE
     +f:TOWER_SPLASH_PROJECTILE_COUNT
     +f:TOWER_SPLASH_PROJECTILE_SPEED
     +f:TOWER_SPLASH_RANGE
     +f:TOWER_SPLASH_STARTING_LEVEL
     +f:TOWER_SPLASH_STARTING_PWR
     +f:TOWER_SPLASH_UPGRADE_PRICE
     +f:TOWER_TESLA_ATTACK_SPEED
     +f:TOWER_TESLA_AUTO_1
     +f:TOWER_TESLA_AUTO_2
     +f:TOWER_TESLA_AUTO_3
     +f:TOWER_TESLA_AUTO_4
     +f:TOWER_TESLA_AUTO_5
     +f:TOWER_TESLA_AUTO_6
     +f:TOWER_TESLA_A_BALL_DAMAGE
     +f:TOWER_TESLA_A_BATTERIES_DAMAGE
     +f:TOWER_TESLA_A_BATTERIES_SPEED
     +f:TOWER_TESLA_A_CURRENT_DAMAGE
     +f:TOWER_TESLA_A_ULTIMATE_DAMAGE
     +f:TOWER_TESLA_A_ULTIMATE_DURATION
     +f:TOWER_TESLA_A_ULTIMATE_KILL_INTERVAL
     +f:TOWER_TESLA_A_VOLTAGE_LENGTH
     +f:TOWER_TESLA_A_VOLTAGE_MIN_DAMAGE
     +f:TOWER_TESLA_CHAIN_LIGHTNING_DAMAGE
     +f:TOWER_TESLA_CHAIN_LIGHTNING_LENGTH
     +f:TOWER_TESLA_DAMAGE
     +f:TOWER_TESLA_EXPERIENCE_GENERATION
     +f:TOWER_TESLA_EXPERIENCE_MULTIPLIER
     +f:TOWER_TESLA_GENERATION_ONE
     +f:TOWER_TESLA_GENERATION_THREE
     +f:TOWER_TESLA_GENERATION_TWO
     +f:TOWER_TESLA_MAX_EXP_LEVEL
     +f:TOWER_TESLA_MAX_UPGRADE_LEVEL
     +f:TOWER_TESLA_PRICE
     +f:TOWER_TESLA_RANGE
     +f:TOWER_TESLA_ROTATION_SPEED
     +f:TOWER_TESLA_STARTING_LEVEL
     +f:TOWER_TESLA_STARTING_PWR
     +f:TOWER_TESLA_UPGRADE_PRICE
     +f:TOWER_TYPE_AIR
     +f:TOWER_TYPE_BASIC
     +f:TOWER_TYPE_BLAST
     +f:TOWER_TYPE_CANNON
     +f:TOWER_TYPE_CRUSHER
     +f:TOWER_TYPE_FLAMETHROWER
     +f:TOWER_TYPE_FREEZING
     +f:TOWER_TYPE_FREEZING_6
     +f:TOWER_TYPE_GAUSS
     +f:TOWER_TYPE_LASER
     +f:TOWER_TYPE_MINIGUN
     +f:TOWER_TYPE_MISSILE
     +f:TOWER_TYPE_MULTISHOT
     +f:TOWER_TYPE_SNIPER
     +f:TOWER_TYPE_SNIPER_6
     +f:TOWER_TYPE_SPLASH
     +f:TOWER_TYPE_TESLA
     +f:TOWER_TYPE_VENOM
     +f:TOWER_VENOM_ATTACK_SPEED
     +f:TOWER_VENOM_AUTO_1
     +f:TOWER_VENOM_AUTO_2
     +f:TOWER_VENOM_AUTO_3
     +f:TOWER_VENOM_AUTO_4
     +f:TOWER_VENOM_AUTO_5
     +f:TOWER_VENOM_AUTO_6
     +f:TOWER_VENOM_A_CHAIN_CHANCE_MAX
     +f:TOWER_VENOM_A_CHAIN_DURATION
     +f:TOWER_VENOM_A_CHAIN_PROLONG
     +f:TOWER_VENOM_A_CHAIN_RANGE
     +f:TOWER_VENOM_A_CLOUD_DAMAGE_COEFF
     +f:TOWER_VENOM_A_CLOUD_RANGE
     +f:TOWER_VENOM_A_CONCENTRATE_DAMAGE
     +f:TOWER_VENOM_A_FAST_DAMAGE_PER_STACK
     +f:TOWER_VENOM_A_FAST_MAX_DEBUFFS
     +f:TOWER_VENOM_A_FAST_SPEED
     +f:TOWER_VENOM_A_HARD_DAMAGE
     +f:TOWER_VENOM_DAMAGE
     +f:TOWER_VENOM_EXPERIENCE_GENERATION
     +f:TOWER_VENOM_EXPERIENCE_MULTIPLIER
     +f:TOWER_VENOM_GENERATION_ONE
     +f:TOWER_VENOM_GENERATION_THREE
     +f:TOWER_VENOM_GENERATION_TWO
     +f:TOWER_VENOM_MAX_EXP_LEVEL
     +f:TOWER_VENOM_MAX_UPGRADE_LEVEL
     +f:TOWER_VENOM_POISON_DURATION
     +f:TOWER_VENOM_PRICE
     +f:TOWER_VENOM_PROJECTILE_SPEED
     +f:TOWER_VENOM_RANGE
     +f:TOWER_VENOM_ROTATION_SPEED
     +f:TOWER_VENOM_STARTING_LEVEL
     +f:TOWER_VENOM_STARTING_PWR
     +f:TOWER_VENOM_UPGRADE_PRICE
     +f:USER_MAP_MAX_SIZE
     +f:WAVE_INTERVAL
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ResourceType{
     +f:INFIAR
     +f:MATRIX
     +f:SCALAR
     +f:TENSOR
     +f:VECTOR
     +f:toMinerType
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:ShapeType{
     +f:BULLET_SMOKE_MULTI_LINE
     +f:CHAIN_LIGHTNING
     +f:CIRCLE
     +f:MULTI_LINE
     +f:PIE_CHART
     +f:RANGE_CIRCLE
     +f:STRAIGHT_MULTI_LINE
     +f:TRAIL_MULTI_LINE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:SoundType{
     +f:BUILD
     +f:CLICK
     +f:COIN_1
     +f:FAIL
     +f:NO
     +f:QUESTION
     +f:SHOT_AIR
     +f:SHOT_BASIC
     +f:SHOT_BLAST
     +f:SHOT_CANNON
     +f:SHOT_GUN
     +f:SHOT_MISSILE
     +f:SHOT_SNIPER
     +f:SHOT_THUNDER
     +f:SINGLE
     +f:SUCCESS
     +f:UPGRADE
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:SpaceTileBonusType{
     +f:ATTACK_SPEED
     +f:BONUS_COINS
     +f:BONUS_EXPERIENCE
     +f:DAMAGE
     +f:PROJECTILE_SPEED
     +f:PWR_MULTIPLIER
     +f:RANGE
     +f:ROTATION_SPEED
     +f:SELL_REFUND
     +f:UPGRADE_DISCOUNT
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:SpecialDamageType{
     +f:CHAINING
     +f:INSTAKILL
     +f:KILLSHOT
     +f:MISSILE_FIRST_DAMAGE
     +f:NANOPARTICLES
     +f:PIERCING
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:StaticSoundType{
     +f:ABILITY_BALL_LIGHTNING
     +f:ABILITY_BLIZZARD
     +f:ABILITY_BULLET_WALL
     +f:ABILITY_FIREBALL
     +f:ABILITY_FIRESTORM
     +f:ABILITY_LOIC
     +f:ABILITY_LOOP
     +f:ABILITY_MAGNET
     +f:ABILITY_NUKE
     +f:ABILITY_OVERLOAD
     +f:ABILITY_SMOKE_BOMB
     +f:ABILITY_THUNDER
     +f:ABILITY_WINDSTORM
     +f:AUTO_FORCE_WAVE
     +f:BUILDING_BUILT
     +f:BUTTON
     +f:ENEMY_DIE
     +f:ENEMY_REACHED
     +f:EXPLOSION
     +f:FAIL
     +f:GAME_OVER
     +f:LOOT_COMMON
     +f:LOOT_EPIC
     +f:LOOT_LEGENDARY
     +f:LOOT_RARE
     +f:LOOT_VERY_RARE
     +f:NOTIFICATION
     +f:RESEARCH
     +f:SHOT_AIR
     +f:SHOT_BASIC
     +f:SHOT_BLAST
     +f:SHOT_BLAST_QUAKE
     +f:SHOT_CANNON
     +f:SHOT_FLAMETHROWER
     +f:SHOT_GAUSS
     +f:SHOT_GAUSS_CHARGE
     +f:SHOT_LASER
     +f:SHOT_MINIGUN
     +f:SHOT_MISSILE
     +f:SHOT_MULTISHOT
     +f:SHOT_SNIPER
     +f:SHOT_SPLASH
     +f:SHOT_TESLA
     +f:SHOT_VENOM
     +f:SPRING_TENSION_1
     +f:SPRING_TENSION_2
     +f:SPRING_TENSION_RELEASE
     +f:SUCCESS
     +f:TICK
     +f:UPGRADE
     +f:WARNING
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:StatisticsType{
     +f:AFPTG
     +f:BDFTPG
     +f:BDS
     +f:CG
     +f:CG_B
     +f:CG_EK
     +f:CG_PG
     +f:CG_U
     +f:CG_WC
     +f:EB
     +f:EB_BC
     +f:EB_BXP
     +f:EB_CR
     +f:EB_DE
     +f:EB_F
     +f:EB_I
     +f:EB_INV
     +f:EB_P
     +f:EB_S
     +f:EB_SL
     +f:EB_TB
     +f:EB_V
     +f:EK
     +f:EP
     +f:EQCG
     +f:GGIG
     +f:GPG
     +f:GPS
     +f:GS
     +f:GSUM
     +f:KEW_A
     +f:KEW_B
     +f:KEW_E
     +f:KEW_EL
     +f:KEW_F
     +f:KEW_L
     +f:KEW_P
     +f:MB
     +f:MBS
     +f:MB_I
     +f:MB_M
     +f:MB_S
     +f:MB_T
     +f:MB_V
     +f:MMS
     +f:MMS_I
     +f:MMS_M
     +f:MMS_S
     +f:MMS_T
     +f:MMS_V
     +f:MU
     +f:MU_I
     +f:MU_M
     +f:MU_S
     +f:MU_T
     +f:MU_V
     +f:PMS
     +f:PPG
     +f:PQR
     +f:PRT
     +f:PT
     +f:PTCL
     +f:PTEMWD
     +f:RC
     +f:RCL
     +f:RG
     +f:RG_I
     +f:RG_M
     +f:RG_S
     +f:RG_T
     +f:RG_V
     +f:RS
     +f:RS_I
     +f:RS_M
     +f:RS_S
     +f:RS_T
     +f:RS_V
     +f:RVV
     +f:RVW
     +f:SG
     +f:SG_EK
     +f:SG_RM
     +f:SG_WCA
     +f:SG_WCL
     +f:SOP
     +f:TB
     +f:TBS
     +f:TB_A
     +f:TB_B
     +f:TB_BL
     +f:TB_C
     +f:TB_CR
     +f:TB_F
     +f:TB_FL
     +f:TB_G
     +f:TB_L
     +f:TB_M
     +f:TB_MI
     +f:TB_MS
     +f:TB_S
     +f:TB_SP
     +f:TB_T
     +f:TB_V
     +f:TDD
     +f:TDDNC
     +f:TDD_A
     +f:TDD_B
     +f:TDD_BL
     +f:TDD_C
     +f:TDD_CR
     +f:TDD_F
     +f:TDD_FL
     +f:TDD_G
     +f:TDD_L
     +f:TDD_M
     +f:TDD_MI
     +f:TDD_MS
     +f:TDD_S
     +f:TDD_SP
     +f:TDD_T
     +f:TDD_V
     +f:TEK
     +f:TEK_A
     +f:TEK_B
     +f:TEK_BL
     +f:TEK_C
     +f:TEK_CR
     +f:TEK_F
     +f:TEK_FL
     +f:TEK_G
     +f:TEK_L
     +f:TEK_M
     +f:TEK_MI
     +f:TEK_MS
     +f:TEK_S
     +f:TEK_SP
     +f:TEK_T
     +f:TEK_V
     +f:TMS
     +f:TMS_A
     +f:TMS_B
     +f:TMS_BL
     +f:TMS_C
     +f:TMS_CR
     +f:TMS_F
     +f:TMS_FL
     +f:TMS_G
     +f:TMS_L
     +f:TMS_M
     +f:TMS_MI
     +f:TMS_MS
     +f:TMS_S
     +f:TMS_SP
     +f:TMS_T
     +f:TMS_V
     +f:TS
     +f:TS_A
     +f:TS_B
     +f:TS_BL
     +f:TS_C
     +f:TS_CR
     +f:TS_F
     +f:TS_FL
     +f:TS_G
     +f:TS_L
     +f:TS_M
     +f:TS_MI
     +f:TS_MS
     +f:TS_S
     +f:TS_SP
     +f:TS_T
     +f:TS_V
     +f:TU
     +f:TU_A
     +f:TU_B
     +f:TU_BL
     +f:TU_C
     +f:TU_CR
     +f:TU_F
     +f:TU_FL
     +f:TU_G
     +f:TU_L
     +f:TU_M
     +f:TU_MI
     +f:TU_MS
     +f:TU_S
     +f:TU_SP
     +f:TU_T
     +f:TU_V
     +f:WC
     +f:WCGC
     +f:WCGS
     +f:WCST
     +f:WD
     +f:WIP
     +f:XPG_BB
     +f:XPG_EK
     +f:XPG_EM
     +f:XPG_TG
     +f:values
     +m:valueOf:String
     +m:values:
     +m:toString:
    }
    >c:TileType{
     +f:BOSS
     +f:CORE
     +f:DUMMY
     +f:EQUALIZER
     +f:GAME_VALUE
     +f:PLATFORM
     +f:QUAD
     +f:ROAD
     +f:SCRIPT
     +f:SOURCE
     +f:SPAWN
     +f:TARGET
     +f:XM_MUSIC_TRACK
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:TowerStatType{
     +f:AIM_SPEED
     +f:ATTACK_SPEED
     +f:CHAIN_LIGHTNING_DAMAGE
     +f:CHARGING_SPEED
     +f:DAMAGE
     +f:DURATION
     +f:EXPERIENCE_GENERATION
     +f:EXPERIENCE_MULTIPLIER
     +f:FREEZE_PERCENT
     +f:FREEZE_SPEED
     +f:MAX_EXP_LEVEL
     +f:MAX_UPGRADE_LEVEL
     +f:MIN_RANGE
     +f:PRICE
     +f:PROJECTILE_SPEED
     +f:RANGE
     +f:RESOURCE_CONSUMPTION
     +f:ROTATION_SPEED
     +f:STARTING_LEVEL
     +f:STARTING_POWER
     +f:STUN_CHANCE
     +f:UPGRADE_PRICE
     +f:U_ACCELERATION
     +f:U_BATTERIES_CAPACITY
     +f:U_BONUS_COINS
     +f:U_BONUS_EXPERIENCE
     +f:U_BURNING_TIME
     +f:U_BURN_CHANCE
     +f:U_BURN_DAMAGE
     +f:U_CHAIN_LIGHTNING_BONUS_LENGTH
     +f:U_CHAIN_LIGHTNING_LENGTH
     +f:U_CRIT_CHANCE
     +f:U_CRIT_MULTIPLIER
     +f:U_DAMAGE_MULTIPLY
     +f:U_DIRECT_FIRE_DAMAGE
     +f:U_EXPLOSION_RANGE
     +f:U_LRM_AIM_SPEED
     +f:U_MAGAZINE_SIZE
     +f:U_PIERCING
     +f:U_POISON_DURATION
     +f:U_POISON_DURATION_BONUS
     +f:U_PROJECTILE_COUNT
     +f:U_QUAKE_CHARGE_SPEED
     +f:U_SHARED_DAMAGE
     +f:U_SHOOT_ANGLE
     +f:U_STUN_DURATION
     +f:defaultValues
     +f:uniqueValues
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:TowerType{
     +f:AIR
     +f:BASIC
     +f:BLAST
     +f:CANNON
     +f:CRUSHER
     +f:FLAMETHROWER
     +f:FREEZING
     +f:GAUSS
     +f:LASER
     +f:MINIGUN
     +f:MISSILE
     +f:MULTISHOT
     +f:SNIPER
     +f:SPLASH
     +f:TESLA
     +f:VENOM
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:TriggeredActionType{
     +f:DUMMY
     +f:GIVE_COINS
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:TrophyType{
     +f:MINER_INFIAR
     +f:MINER_MATRIX
     +f:MINER_SCALAR
     +f:MINER_TENSOR
     +f:MINER_VECTOR
     +f:MODIFIER_ATTACK_SPEED
     +f:MODIFIER_BALANCE
     +f:MODIFIER_BOUNTY
     +f:MODIFIER_DAMAGE
     +f:MODIFIER_EXPERIENCE
     +f:MODIFIER_MINING_SPEED
     +f:MODIFIER_POWER
     +f:MODIFIER_SEARCH
     +f:RESOURCE_INFIAR
     +f:RESOURCE_MATRIX
     +f:RESOURCE_SCALAR
     +f:RESOURCE_TENSOR
     +f:RESOURCE_VECTOR
     +f:SPECIAL_DEVELOPER
     +f:SPECIAL_MASTER
     +f:SPECIAL_MILLION
     +f:SPECIAL_STORYLINE
     +f:TOWER_AIR
     +f:TOWER_BASIC
     +f:TOWER_BLAST
     +f:TOWER_CANNON
     +f:TOWER_FLAMETHROWER
     +f:TOWER_FREEZING
     +f:TOWER_LASER
     +f:TOWER_MINIGUN
     +f:TOWER_MISSILE
     +f:TOWER_MULTISHOT
     +f:TOWER_SNIPER
     +f:TOWER_SPLASH
     +f:TOWER_TESLA
     +f:TOWER_VENOM
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:UnitType{
     +f:BALL_LIGHTNING
     +f:DISORIENTED
     +f:ICE_FIELD
     +f:MICROGUN
     +f:MINE
     +f:SNOWBALL
     +f:values
     +m:valueOf:String
     +m:values:
    }
   }
   >p:events{
    >p:game{
     >c:AbilitiesConfigChange{
      +x:
     }
     >c:AbilityApply{
      +x:Ability,int,int
      +m:getAbility:
      +m:getX:
      +m:getY:
      +m:setX:int
      +m:setY:int
     }
     >c:AbilityStart{
      +x:Ability
      +m:getAbility:
     }
     >c:AbilityUseStart{
      +x:
     }
     >c:AbilityUseStop{
      +x:
     }
     >c:AddBuffToEnemy{
      +x:
      +m:getBuff:
      +m:getEnemy:
      +m:isCancelled:
      +m:reset:
      +m:setBuff:Buff
      +m:setCancelled:boolean
      +m:setEnemy:Enemy
      +m:setup:Enemy,Buff
     }
     >c:BaseHealthChange{
      +x:int
      +m:getOldValue:
      +m:setOldValue:int
     }
     >c:BestReplayLoadFromServer{
      +x:
     }
     >c:BonusPointsUpdate{
      +x:
     }
     >c:BonusSelect{
      +x:int
      +m:getStageNumber:
     }
     >c:BonusStageRequirementMet{
      +x:BonusStage
      +m:getStage:
     }
     >c:BonusStagesConfigSet{
      +x:
     }
     >c:BonusesReRoll{
      +x:
     }
     >c:BuildingRemove{
      +x:Building,PlatformTile
      +m:getBuilding:
      +m:getOldTile:
     }
     >c:CoinsChange{
      +x:int,boolean
      +m:getOldValue:
      +m:isGained:
      +m:setGained:boolean
      +m:setOldValue:int
     }
     >c:CoreTileLevelUp{
      +x:CoreTile
      +m:getCoreTile:
     }
     >c:CoreTileUpgradeInstall{
      +x:CoreTile,int,int
      +m:getCol:
      +m:getCoreTile:
      +m:getRow:
     }
     >c:EnemyDespawn{
      +x:Enemy
      +m:getEnemy:
      +m:setEnemy:Enemy
     }
     >c:EnemyDie{
      +x:DamageRecord
      +m:getLastDamage:
      +m:isCancelled:
      +m:setCancelled:boolean
     }
     >c:EnemyLootAdd{
      +x:Item,int
      +m:getCount:
      +m:getItem:
      +m:setCount:int
      +m:setItem:Item
     }
     >c:EnemyReachTarget{
      +x:Enemy,float,int
      +m:getBaseDamage:
      +m:getEnemy:
      +m:getFactDamage:
      +m:isCancelled:
      +m:setBaseDamage:float
      +m:setCancelled:boolean
      +m:setEnemy:Enemy
      +m:setFactDamage:int
     }
     >c:EnemySpawn{
      +x:Enemy
      +m:getEnemy:
      +m:setEnemy:Enemy
     }
     >c:EnemyTakeDamage{
      +x:
      +m:getRecord:
      +m:reset:
      +m:setup:DamageRecord
     }
     >c:ForceWaveAvailabilityChange{
      +x:
     }
     >c:GameOver{
      +x:
     }
     >c:GamePaused{
      +x:
     }
     >c:GameResumed{
      +x:
     }
     >c:GameSpeedChange{
      +x:
     }
     >c:GameStateTick{
      +x:float
      +m:getDeltaTime:
      +m:setDeltaTime:float
     }
     >c:GameValuesRecalculate{
      +x:double[]
      +m:getOldValues:
     }
     >c:GateChange{
      +x:int,int,boolean,Gate,Gate
      +m:getNewGate:
      +m:getOldGate:
      +m:getX:
      +m:getY:
      +m:isLeftSide:
     }
     >c:GiveDamageToEnemy{
      +x:DamageRecord
      +m:getRecord:
     }
     >c:IssuedItemsAdd{
      +x:IssuedItems,ItemStack,float,float,int
      +m:getFlyAlign:
      +m:getIssuedItems:
      +m:getItemStack:
      +m:getStageX:
      +m:getStageY:
      +m:setFlyAlign:int
      +m:setIssuedItems:IssuedItems
      +m:setItemStack:ItemStack
      +m:setStageX:float
      +m:setStageY:float
     }
     >c:MapDrawModeChange{
      +x:
     }
     >c:MapElementHover{
      +x:MapElementPos,MapElementPos
      +m:getCurrent:
      +m:getPrevious:
     }
     >c:MapElementSelect{
      +x:MapElementPos,MapElementPos
      +m:getCurrent:
      +m:getPrevious:
     }
     >c:MapSizeChange{
      +x:
     }
     >c:MdpsUpdate{
      +x:double
      +m:getOldValue:
     }
     >c:MinedResourcesChange{
      +x:ResourceType,int,boolean
      +m:getOldValue:
      +m:getType:
      +m:isGained:
      +m:setGained:boolean
      +m:setOldValue:int
      +m:setType:ResourceType
     }
     >c:MinerBuild{
      +x:Miner,int
      +m:getBuildPrice:
      +m:getMiner:
     }
     >c:MinerMineItem{
      +x:Miner,ResourceType,ItemStack,float,RarityType,float
      +m:getItemStack:
      +m:getMiner:
      +m:getQuality:
      +m:getRarity:
      +m:getRarityQuality:
      +m:getResourceType:
      +m:isAddAndShowActualLoot:
      +m:isAddToEmptyItemSlot:
      +m:isCancelled:
      +m:isCountTowardsInventoryStatistics:
      +m:setAddAndShowActualLoot:boolean
      +m:setAddToEmptyItemSlot:boolean
      +m:setCancelled:boolean
      +m:setCountTowardsInventoryStatistics:boolean
      +m:setItemStack:ItemStack
      +m:setMiner:Miner
      +m:setQuality:float
      +m:setRarity:RarityType
      +m:setRarityQuality:float
      +m:setResourceType:ResourceType
     }
     >c:MinerPlace{
      +x:Miner
      +m:getMiner:
     }
     >c:MinerRemove{
      +x:Miner,SourceTile
      +m:getMiner:
      +m:getOldTile:
     }
     >c:MinerResourceChange{
      +x:Miner,ResourceType,int,boolean
      +m:getDelta:
      +m:getMiner:
      +m:getResourceType:
      +m:isCancelled:
      +m:isMined:
      +m:setCancelled:boolean
      +m:setDelta:int
      +m:setMined:boolean
      +m:setMiner:Miner
      +m:setResourceType:ResourceType
     }
     >c:MinerSell{
      +x:Miner,int
      +m:getMiner:
      +m:getReturnedCoins:
     }
     >c:MinerUpgrade{
      +x:Miner,int
      +m:getMiner:
      +m:getUpgradePrice:
     }
     >c:ModifierBuild{
      +x:Modifier,int
      +m:getModifier:
      +m:getPrice:
     }
     >c:ModifierCustomButtonPress{
      +x:Modifier
      +m:getModifier:
     }
     >c:ModifierPlace{
      +x:Modifier
      +m:getModifier:
     }
     >c:ModifierSell{
      +x:Modifier,int
      +m:getModifier:
      +m:getReturnedCoins:
     }
     >c:MouseClick{
      +x:float,float,int,int
      +m:getButton:
      +m:getMapX:
      +m:getMapY:
      +m:getPointer:
     }
     >c:MouseMove{
      +x:float,float,int
      +m:getMapX:
      +m:getMapY:
      +m:getPointer:
     }
     >c:NextWaveForce{
      +x:int,int,float
      +m:getBonusMoney:
      +m:getBonusScore:
      +m:getTime:
     }
     >c:PathfindingRebuild{
      +x:boolean
      +m:isDefaultPathsAffected:
     }
     >c:ProjectileDespawn{
      +x:Projectile
      +m:getProjectile:
     }
     >c:ProjectileSpawn{
      +x:Projectile
      +m:getProjectile:
      +m:setProjectile:Projectile
     }
     >c:RemoveBuffFromEnemy{
      +x:Enemy,Buff
      +m:getBuff:
      +m:getEnemy:
     }
     >c:Render{
      +x:float,float
      +m:getInGameDeltaTime:
      +m:getInterpolatedTime:
      +m:getRealDeltaTime:
      +m:setInGameDeltaTime:float
      +m:setInterpolatedTime:float
      +m:setRealDeltaTime:float
     }
     >c:RewardingAdBecameAvailable{
      +x:
     }
     >c:RewardingAdRegistered{
      +x:
     }
     >c:ScoreChange{
      +x:long,boolean,StatisticsType
      +m:getOldValue:
      +m:getReason:
      +m:isGained:
      +m:setGained:boolean
      +m:setOldValue:long
      +m:setReason:StatisticsType
     }
     >c:SystemsDispose{
      +x:
     }
     >c:SystemsPostSetup{
      +x:
     }
     >c:SystemsSetup{
      +x:
     }
     >c:SystemsStateRestore{
      +x:
     }
     >c:TileChange{
      +x:int,int,Tile,Tile
      +m:getNewTile:
      +m:getOldTile:
      +m:getX:
      +m:getY:
     }
     >c:TowerAbilityChange{
      +x:Tower,int,boolean
      +m:getAbilityIndex:
      +m:getTower:
      +m:isInstalled:
     }
     >c:TowerAimStrategyChange{
      +x:Tower
      +m:getTower:
     }
     >c:TowerBuild{
      +x:Tower,int
      +m:getPrice:
      +m:getTower:
     }
     >c:TowerCustomButtonPress{
      +x:Tower
      +m:getTower:
     }
     >c:TowerExperienceChange{
      +x:Tower,float
      +m:getDelta:
      +m:getTower:
     }
     >c:TowerLevelUp{
      +x:Tower
      +m:getTower:
     }
     >c:TowerPlace{
      +x:Tower
      +m:getTower:
     }
     >c:TowerPreSell{
      +x:Tower,int
      +m:getReturnedCoins:
      +m:getTower:
     }
     >c:TowerSell{
      +x:Tower,int
      +m:getReturnedCoins:
      +m:getTower:
     }
     >c:TowerUpgrade{
      +x:Tower,int
      +m:getPrice:
      +m:getTower:
     }
     >c:TowersDefaultAimStrategyChange{
      +x:
     }
     >c:UnitDespawn{
      +x:Unit
      +m:getUnit:
     }
     >c:UnitDie{
      +x:Unit,Enemy
      +m:getKiller:
      +m:getUnit:
     }
     >c:UnitSpawn{
      +x:Unit
      +m:getUnit:
     }
     >c:WaveComplete{
      +x:Wave
      +m:getWave:
     }
     >c:WaveStart{
      +x:Wave
      +m:getWave:
     }
     >c:WaveStatusChange{
      +x:Status
      +m:getOldStatus:
     }
    }
    >p:global{
     >c:GameDispose{
      +x:
     }
     >c:GameLoad{
      +x:
     }
     >c:GameStartLoad{
      +x:
     }
     >c:PostRender{
      +x:float
      +m:getDeltaTime:
     }
     >c:PreRender{
      +x:float
      +m:getDeltaTime:
     }
     >c:Render{
      +x:float
      +m:getDeltaTime:
     }
     >c:ScreenResize{
      +x:int,int
      +m:getHeight:
      +m:getWidth:
     }
     >c:StartRender{
      +x:
      +m:getDeltaTime:
      +m:setDeltaTime:float
     }
     >c:VisibleDisplayFrameChange{
      +x:
     }
    }
    >p:mapEditor{
     >c:HistoryUpdate{
      +x:
     }
     >c:InventoryItemAdd{
      +x:Item,int
      +m:getCount:
      +m:getItem:
      +m:isCancelled:
      +m:setCancelled:boolean
      +m:setCount:int
      +m:setItem:Item
     }
     >c:InventoryItemRemove{
      +x:Item,int,int
      +m:getAvailableCount:
      +m:getCount:
      +m:getItem:
      +m:setCount:int
     }
     >c:InventoryStackChange{
      +x:ItemStack,int
      +m:getDelta:
      +m:getItemStack:
     }
     >c:ItemDragPositionChange{
      +x:
     }
     >c:ItemDragStart{
      +x:
     }
     >c:ItemDragStop{
      +x:
     }
     >c:MapEditorSelectionChange{
      +x:
     }
     >c:MapValidationFail{
      +x:InvalidMapException
      +m:getException:
     }
     >c:SelectionChange{
      +x:
     }
    }
    >c:Event{
     +z
     +m:isStopped:
     +m:stop:
    }
    >c:Listener{
     +z
     +m:handleEvent:Event
    }
    >c:CancellableStoppableEvent{
     +m:cancel:
     +m:isCancelled:
    }
    >c:EventDispatcher{
     +x:
     -f:CLASS_COMPARATOR
     +m:describe:
     +m:getClassToId:
     +m:getListenerGroups:
     +m:getListeners:Class
     +m:getQueuedEvents:
     +m:hasQueuedEvents:
     +m:queue:Event
     -m:read:Kryo,Input
     +m:reset:boolean
     +m:trigger:Event
     -m:write:Kryo,Output
    }
    >c:EventListeners{
     >c:Entry{
      >c:EntryMetaData{
       +x:
       +m:flagsMatch:byte
       +m:getFlags:
       -m:read:Kryo,Input
       +m:setFlag:byte,boolean
       -m:write:Kryo,Output
      }
      +x:
      +f:COMPARATOR
      +m:getDescription:
      +m:getListener:
      +m:getMetaData:
      +m:getName:
      +m:getPriority:
      +m:isAutoPriority:
      +m:isPersistent:
      +m:isStateAffecting:
      -m:read:Kryo,Input
      +m:remove:
      +m:reset:
      +m:setDescription:String
      +m:setName:String
      +m:setPersistent:boolean
      +m:setPersistentToTrue:
      +m:toString:
      -m:write:Kryo,Output
     }
     -c:Serializer
     +x:Class
     -f:CLASS_COMPARATOR
     +f:FLAG_AFFECTS_STATE
     +f:FLAG_AUTO_PRIORITY
     +f:FLAG_PERSISTENT
     +f:PRIORITY_DEFAULT
     +f:PRIORITY_HIGH
     +f:PRIORITY_HIGHEST
     +f:PRIORITY_LOW
     +f:PRIORITY_LOWEST
     +f:PRIORITY_STEP
     +f:PRIORITY_VERY_HIGH
     +f:PRIORITY_VERY_LOW
     +m:add:Listener
     +m:addStateAffecting:Listener
     +m:addStateAffectingWithPriority:Listener,int
     +m:addWithFlags:Listener,int
     +m:addWithFlagsAndPriority:Listener,int,int
     +m:addWithPriority:Listener,int
     +m:clear:
     +m:contains:Listener
     +m:describe:
     +m:getEntriesBackingArray:
     +m:getEventClass:
     +m:getEventsStopped:
     +m:getEventsTriggered:
     +m:getLoops:
     +m:getNonStateAffectingEntriesCount:
     +m:getStateAffectingEntriesCount:
     +m:getStateHash:
     +m:remove:Listener
     +m:size:
     +m:trigger:Event
    }
    -c:EventListenersDeepClassComparator
    >c:SignalEvent{
     +m:isStopped:
     +m:stop:
    }
    >c:StoppableEvent{
     +m:isStopped:
     +m:stop:
    }
   }
   >p:explosions{
    >c:AirFallExplosion{
     >c:AirFallExplosionFactory{
      +x:
     }
     +m:enemyAffected:Enemy,float,float
     +m:explode:
     +m:isDone:
     +m:setup:Tower,float,float,float,float
    }
    >c:CannonExplosion{
     >c:CannonExplosionFactory{
      +x:
     }
     +f:throwBackDistance
     +m:enemyAffected:Enemy,float,float
     +m:explode:
     +m:isDone:
     -m:read:Kryo,Input
     +m:setup:Tower,float,float,float,float,int,float,float
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:FireballExplosion{
     >c:FireballExplosionFactory{
      +x:
      +m:setupAssets:
     }
     +m:enemyAffected:Enemy,float,float
     +m:explode:
     +m:getDamage:
     +m:getFireDamage:
     -m:read:Kryo,Input
     +m:setup:float,float,float,float,float,FireballAbility
     -m:write:Kryo,Output
    }
    >c:GenericExplosion{
     >c:GenericExplosionFactory{
      +x:
     }
     +m:cpy:
     +m:enemyAffected:Enemy,float,float
     +m:explode:
     +m:isDone:
     -m:read:Kryo,Input
     +m:setup:Tower,float,float,float,float,int,float,float,Color,Color
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MissileExplosion{
     >c:MissileExplosionFactory{
      +x:
     }
     +m:enemyAffected:Enemy,float,float
     +m:explode:
     +m:setup:Tower,float,float,float,float
    }
   }
   >p:gameplayMods{
    >p:mods{
     >c:AbstractGameValueMod{
      +f:additionalCategory
      +f:baseValue
      +f:deltaPerPower
      +f:gvType
      +f:isFinalMultiplier
      +f:mainCategory
      +f:roundToInt
      +m:applyConfig:JsonValue
      +m:getAdditionalCategory:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      +m:setRegisteredPower:int
      -m:write:Kryo,Output
     }
     >c:AddAllAbilityCharges{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:AddRandomCoreTile{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:getRarityType:
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:AddRandomPlatform{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:getPlatformCount:
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:AllAbilitiesForRandomTower{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:getAlreadyActiveTowers:GameSystemProvider
      +m:getSuitableTowers:GameSystemProvider
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:BaseExplodesOnEnemyPass{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseCooldown
      +f:baseDamage
      +f:baseRange
      +f:cooldownPerPower
      +f:damagePerPower
      +f:rangePerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getAdditionalCategory:
      +m:getCategory:
      +m:getCooldown:
      +m:getDamage:
      +m:getDescription:
      +m:getIcon:
      +m:getRange:
      -m:handleEvent:EnemyReachTarget
      -m:handleEvent:Event
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:BoostExistingEnemiesWithLoot{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getAdditionalCategory:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:BuildRandomMiner{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:doubleSpeedDuration
      +f:minerCount
      +f:upgradeLevel
      +m:getSuitablePlaces:GameSystemProvider
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:CriticalDamage{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseChance
      +f:baseDamage
      +f:chancePerPower
      +f:damagePerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getChanceMultiplier:
      +m:getDamageMultiplier:
      +m:getDescription:
      +m:getIcon:
      -m:handleEvent:Event
      -m:handleEvent:GiveDamageToEnemy
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:DebuffsLastLonger{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseDuration
      +f:durationPerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getDurationMultiplier:
      +m:getIcon:
      -m:handleEvent:AddBuffToEnemy
      -m:handleEvent:Event
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:DepositCoinsGeneration{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:configure:GameSystemProvider
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      +m:setRegisteredPower:int
      -m:write:Kryo,Output
     }
     >c:DoubleMiningSpeed{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getDuration:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:EnemiesDropResources{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseEnemyInterval
      +f:enemyIntervalDeltaPerPower
      +f:maxResourcesPerPower
      +f:minEnemyInterval
      +f:resourceCountDispersion
      +f:resourceCountMultiplier
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getEnemyInterval:
      +m:getIcon:
      +m:getMaxTotalResourcesPercentage:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:ExtraDamagePerBuff{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDamage:
      +m:getDescription:
      +m:getIcon:
      -m:handleEvent:Event
      -m:handleEvent:GiveDamageToEnemy
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:FirstEnemiesInWaveExplode{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseDamage
      +f:baseEnemyCount
      +f:damagePerPower
      +f:enemyCountPerPower
      +f:explosionRange
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDamage:
      +m:getDescription:
      +m:getEnemyCount:
      +m:getIcon:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:GV_AbilitiesEnergy{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:AbilityType,int,GameValueType,float,float
      +m:configure:GameSystemProvider
      +m:cpy:
      +m:getId:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:GV_AbilitiesMaxEnergy{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:cpy:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
     }
     >c:GV_BountiesNearby{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:cpy:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
     }
     >c:GV_DisableBountyModifierHarm{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:cpy:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
     }
     >c:GV_MinersMaxUpgradeLevel{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:configure:GameSystemProvider
      +m:cpy:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
     }
     >c:GV_TowersMaxExpLevel{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:cpy:
     }
     >c:IncreaseSelectedBonusesPower{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:getSuitableMods:Array
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:IncreasedTowerToEnemyEfficiency{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:TowerType,EnemyType
      +f:DEFAULT_PAIRS
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getId:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      +m:setRegisteredPower:int
      +m:toString:
      -m:write:Kryo,Output
     }
     >c:LastEnemiesInWaveDealNoDamage{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseEnemyCount
      +f:enemyCountPerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getEnemyCount:
      +m:getIcon:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:LightningStrikeOnTowerLevelUp{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      -c:OnTowerLevelUp
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getMdpsMultiplier:
      +m:getStrikeCount:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      +m:resetStrikeLevelLimits:
      +m:strike:int,int,int
      -m:write:Kryo,Output
     }
     >c:LowHpEnemiesDealNoDamage{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      -c:OnEnemyReachTarget
      +x:
      +f:baseHp
      +f:hpPerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getHpThreshold:
      +m:getIcon:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:MineLegendaryItems{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:isAlwaysUseless:GameSystemProvider
      +m:register:GameSystemProvider,String
     }
     >c:MinedItemsTurnIntoDust{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseBonus
      +f:bonusPerPower
      +f:stackSize
      +f:stackSizePerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getBonusMultiplier:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:getStackSize:
      -m:handleEvent:Event
      -m:handleEvent:MinerMineItem
      +m:isAlwaysUseless:GameSystemProvider
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:MinersSpawnEnemies{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      -c:OnEnemySpawn
      +x:
      +f:actualWaveDiffMax
      +f:actualWaveDiffMin
      +f:coinsMultiplier
      +f:difficultyMultiplier
      +f:enabled
      +f:enemiesSpawned
      +f:enemyCountLimit
      +f:enemyCountLimitPerPower
      +f:enemyQueue
      +f:enemyQueueWaves
      +f:healthMultiplier
      +f:intervalCounter
      +f:lootMultiplier
      +f:onlyAllowedEnemies
      +f:realEnemiesCounter
      +f:resourceInterval
      +f:resourceIntervalPerPower
      +f:scoreMultiplier
      +f:sharedWaveNumber
      +f:startingWave
      +f:waveTemplatesPerResource
      +f:xpMultiplier
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getAdditionalCategory:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      -m:handleEvent:Event
      -m:handleEvent:MinerResourceChange
      +m:isAlwaysUseless:GameSystemProvider
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:MoreBonusVariantsNextTime{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:register:GameSystemProvider,String
     }
     >c:MultiplyLootedItems{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:canMultiplyItem:Item
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:MultiplyMdps{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:NukeOnBonusStage{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      -c:OnBonusStageRequirementMet
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:nuke:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:ReceiveCoins{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:configure:GameSystemProvider
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:ReceiveGreenPapers{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
       +m:provideFallback:BonusStagesConfig,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:configure:GameSystemProvider
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:SellAllTowers{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:configure:GameSystemProvider
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isImmediateAndNotListed:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:SpawnZombiesFromBase{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +f:baseCount
      +f:countPerPower
      +f:hp
      +f:hpPerPower
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getCountPerWave:
      +m:getDescription:
      +m:getHpMultiplier:
      +m:getIcon:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:SummonLootBoss{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      -c:OnEnemySpawn
      -c:OnWaveComplete
      +x:
      +f:bossHp
      +f:coinMultiplier
      +f:damageToBase
      +f:itemCount
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      +m:isAlwaysUseless:GameSystemProvider
      +m:isImmediateAndNotListed:
      +m:onEnemySpawn:EnemySpawn
      +m:onWaveCompleted:Wave
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
     >c:TowersAttackSpeed{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getStatMultiplier:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      +m:setRegisteredPower:int
      -m:write:Kryo,Output
     }
     >c:TowersDamage{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getStatMultiplier:
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      +m:setRegisteredPower:int
      -m:write:Kryo,Output
     }
     >c:TriggerRandomAbility{
      >c:BonusProvider{
       +x:
       +m:getInstance:
       +m:provide:int,BonusStagesConfig,Array,Array
      }
      +x:
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getCategory:
      +m:getDescription:
      +m:getIcon:
      +m:getInterval:
      +m:getMdpsMultiplier:
      +m:getNotSatisfiedPreconditions:GameSystemProvider
      -m:handleEvent:Event
      -m:handleEvent:GameStateTick
      +m:isAlwaysUseless:GameSystemProvider
      -m:read:Kryo,Input
      +m:register:GameSystemProvider,String
      -m:write:Kryo,Output
     }
    }
    >c:GameplayMod{
     +z
     +m:allowsMultipleInstancesFromDifferentSources:
     +m:configure:GameSystemProvider
     +m:cpy:
     +m:getAdditionalCategory:
     +m:getCategory:
     +m:getDescription:
     +m:getIcon:
     +m:getId:
     +m:getMaxPower:
     +m:getNotSatisfiedPreconditions:GameSystemProvider
     +m:getPower:
     +m:getReplacesUnsatisfiedMod:
     +m:isAlwaysUseless:GameSystemProvider
     +m:isImmediateAndNotListed:
     +m:isPowerLevelUpgradedByOtherMod:int
     +m:markPowerLevelUpgradedByOtherMod:int
     +m:register:GameSystemProvider,String
     +m:setRegisteredPower:int
     +m:setReplacesUnsatisfiedMod:GameplayMod
    }
    >c:ProbableBonusesProvider{
     >c:BonusProviderConfig{
      +x:
      +x:float
      +x:float,float,int,int,float
      +f:maxStage
      +f:minStage
      +f:powerUpProbabilityMultiplier
      +f:probability
      +f:probabilityMultiplierPerStage
      +m:applyConfig:JsonValue
      +m:cpy:
      +m:getMinStage:
      +m:setMaxStage:int
      +m:setMinStage:int
      +m:setPowerUpProbabilityMultiplier:float
      +m:setProbability:float
      +m:setProbabilityMultiplierPerStage:float
     }
     +z
     +f:_TAG
     -f:logger
     +m:addOrModify:GenericGameplayMod,int,Array,BonusProviderConfig
     +m:provide:int,BonusStagesConfig,Array,Array
    }
    >c:BonusStagesConfig{
     +x:
     +f:DEFAULT_BONUS_PROVIDERS
     +f:DEFAULT_CONFIG_FILE_PATH
     +f:GENERIC_PROVIDER_CLASS_PATH
     +f:SEED_RANDOM
     +f:SEED_TAKE_FROM_DAILY_QUEST
     +f:SEED_TAKE_FROM_LEVEL
     +f:activeBonusesSlotLimit
     +f:bonusProviderListClassNames
     +f:bonusesConfig
     +f:chainReRoll
     +f:endlessStageRequirement
     +f:endlessStageRequirementPerStage
     +f:forceImmediateSelection
     +f:ignoreImpossiblePreconditions
     +f:immediateBonusesChance
     +f:isFillWithDefaultBonusProviders
     +f:maxReRollsAllTime
     +f:maxReRollsPerStage
     +f:persistentBonusesChance
     +f:probableBonusesProviders
     +f:reRollEnabled
     +f:reRollMaxPrice
     +f:reRollMinPrice
     +f:reRollPrice
     +f:reRollPricePerStage
     +f:replaceBonusesWithNotSatisfiedPreconditions
     +f:seed
     +f:selectedBonusAffectsRandom
     +f:stageRequirements
     +m:fromJson:JsonValue
     +m:fromJsonString:String
     +m:cpy:
     +m:fillWithDefaultBonusProviders:
     +m:getBonusConfig:String
     +m:getMaxReRollsAllTime:
     +m:getMaxReRollsPerStage:
     +m:getMaxStages:
     +m:getProbableBonuses:int,GameSystemProvider
     +m:getReRollPrice:int,GameSystemProvider
     +m:getStageRequirement:int
     -m:read:Kryo,Input
     +m:setBonusesConfig:JsonValue
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:GameplayModCategory{
     +f:DEFENSIVE
     +f:ECONOMICS
     +f:LOOTING
     +f:OFFENSIVE
     +f:OTHER
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:GenericGameplayMod{
     +f:maxPower
     +f:multipleInstances
     +f:power
     +f:powerLevelsUpgradedByMods
     +f:replacedMod
     +m:allowsMultipleInstancesFromDifferentSources:
     +m:applyConfig:JsonValue
     +m:getId:
     +m:getMaxPower:
     +m:getPower:
     +m:getReplacesUnsatisfiedMod:
     +m:isPowerLevelUpgradedByOtherMod:int
     +m:markPowerLevelUpgradedByOtherMod:int
     -m:read:Kryo,Input
     +m:setRegisteredPower:int
     +m:setReplacesUnsatisfiedMod:GameplayMod
     -m:write:Kryo,Output
    }
    >c:ProbableBonus{
     +x:GameplayMod,int
     +f:DEFAULT
     +m:getBonus:
     +m:getProbability:
     -m:read:Kryo,Input
     +m:setProbability:int
     -m:write:Kryo,Output
    }
   }
   >p:gates{
    >c:BarrierHealthGate{
     >c:BarrierHealthGateFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:setupAssets:
     }
     +f:moreThanHalf
     +m:addSellItems:Array
     +m:canEnemyPass:EnemyType
     +m:cloneGate:
     +m:drawStatic:Batch,float,float,float,float
     +m:generateIcon:float,boolean
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:sameAs:Gate
     +m:toJson:Json
     +m:toString:
    }
    >c:BarrierTypeGate{
     >c:BarrierTypeGateFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:setupAssets:
     }
     +m:addSellItems:Array
     +m:canEnemyPass:EnemyType
     +m:cloneGate:
     +m:drawStatic:Batch,float,float,float,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:generateIcon:float,boolean
     +m:getBlockedEnemyTypeCount:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:isEnemyBlocked:EnemyType
     -m:read:Kryo,Input
     +m:sameAs:Gate
     +m:setEnemyBlocked:EnemyType,boolean
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:TeleportGate{
     >c:TeleportGateFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:setupAssets:
     }
     +f:INDEX_COLORS
     +f:INDEX_NAMES
     +f:MAX_INDEX
     +f:MAX_INDEX_FOR_LOOT
     +f:index
     +m:addSellItems:Array
     +m:cloneGate:
     +m:drawBatch:Batch,float,float,float,float,float
     +m:drawStatic:Batch,float,float,float,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:generateIcon:float,boolean
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     -m:read:Kryo,Input
     +m:sameAs:Gate
     +m:setUnregistered:
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
   }
   >p:ibxm{
    >c:Channel{
     +x:Module,int,GlobalVol
     +f:LINEAR
     +f:NEAREST
     +f:SINC
     +f:plRow
     +m:exp2:int
     +m:log2:int
     +m:resample:int[],int,int,int,int
     +m:reset:
     +m:row:Note
     +m:tick:
     +m:updateSampleIdx:int,int
    }
    >c:Data{
     +x:byte[]
     +x:InputStream
     +m:sByte:int
     +m:samS16:int,int
     +m:samS16D:int,int
     +m:samS8:int,int
     +m:samS8D:int,int
     +m:samU16:int,int
     +m:samU8:int,int
     +m:strCp850:int,int
     +m:strLatin1:int,int
     +m:uByte:int
     +m:ubeShort:int
     +m:uleInt:int
     +m:uleShort:int
    }
    >c:Envelope{
     +x:
     +x:Envelope
     +f:enabled
     +f:loopEndTick
     +f:loopStartTick
     +f:looped
     +f:numPoints
     +f:pointsAmpl
     +f:pointsTick
     +f:sustain
     +f:sustainTick
     +m:calculateAmpl:int
     +m:nextTick:int,boolean
     +m:toStringBuffer:StringBuffer
    }
    >c:GlobalVol{
     +x:
     +f:volume
    }
    >c:IBXM{
     +x:Module,int
     +f:VERSION
     +f:channels
     +f:interpolation
     +f:lastSeqPos
     +m:calculateSongDuration:
     +m:getAmplitudes:int
     +m:getAudio:int[]
     +m:getGlobalVol:
     +m:getMixBufferLength:
     +m:getModule:
     +m:getRow:
     +m:getSampleRate:
     +m:getSequencePos:
     +m:seek:int
     +m:seekSequencePos:int,int
     +m:setInterpolation:int
     +m:setMuted:int,boolean
     +m:setSampleRate:int
     +m:setSequencePos:int
     +m:setSequencePosApplyEffects:int
    }
    >c:Instrument{
     +x:
     +x:Instrument
     +f:keyToSample
     +f:name
     +f:numSamples
     +f:panningEnvelope
     +f:samples
     +f:vibratoDepth
     +f:vibratoRate
     +f:vibratoSweep
     +f:vibratoType
     +f:volumeEnvelope
     +f:volumeFadeOut
     +m:toStringBuffer:StringBuffer
    }
    >c:Module{
     >c:TrackInfoEntry{
      >c:EntryType{
       +f:AUTHOR
       +f:GROUP
       +f:LINK
       +f:TEXT
       +f:values
       +m:valueOf:String
       +m:values:
      }
      +x:
      +x:EntryType,String
      +f:type
      +f:value
      +m:getCompleteLink:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +x:Data
     +x:Module
     +x:byte[]
     +x:InputStream
     +f:c2Rate
     +f:defaultGVol
     +f:defaultPanning
     +f:defaultSpeed
     +f:defaultTempo
     +f:fastVolSlides
     +f:gain
     +f:instruments
     +f:linearPeriods
     +f:numChannels
     +f:numInstruments
     +f:numPatterns
     +f:patterns
     +f:restartPos
     +f:sequence
     +f:sequenceLength
     +f:songName
     +m:fromZipInputStream:InputStream
     +m:toZippedBase64:byte[]
     +m:getFileExtension:
     +m:getInfoFromInstrumentNames:
     +m:getVolumeMultiplierFromInstrumentNames:
     +m:moduleHashCode:
     +m:toStringBuffer:StringBuffer
    }
    >c:Note{
     +x:
     +f:effect
     +f:instrument
     +f:key
     +f:param
     +f:volume
     +m:toChars:char[]
     +m:toString:
    }
    >c:Pattern{
     +x:Pattern
     +x:int,int
     +f:data
     +f:numRows
     +m:getNote:int,Note
     +m:toString:
     +m:toStringBuffer:StringBuffer
    }
    >c:Sample{
     +x:
     +x:Sample
     +f:C2_NTSC
     +f:C2_PAL
     +f:FP_MASK
     +f:FP_ONE
     +f:FP_SHIFT
     +f:fineTune
     +f:name
     +f:panning
     +f:relNote
     +f:sampleData
     +f:volume
     +m:looped:
     +m:normaliseSampleIdx:int
     +m:resampleLinear:int,int,int,int,int,int[],int,int
     +m:resampleNearest:int,int,int,int,int,int[],int,int
     +m:resampleSinc:int,int,int,int,int,int[],int,int
     +m:setSampleData:short[],int,int,boolean
     +m:toStringBuffer:StringBuffer
    }
    >c:WavInputStream{
     >c:Mode{
      +f:FULL_SONG
      +f:INTRO_PART
      +f:LOOPING_PART
      +f:values
      +m:valueOf:String
      +m:values:
     }
     +x:IBXM,int,Mode
     +f:header
     +m:readInt32:byte[],int
     +m:writeInt32:byte[],int,int
     +m:available:
     +m:getRemain:
     +m:read:
     +m:read:byte[],int,int
    }
   }
   >p:items{
    >c:AbilityItem{
     >c:AbilityItemFactory{
      +x:
      +m:create:AbilityType
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:abilityType
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
    }
    >c:AbilityTokenItem{
     >c:AbilityTokenItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
    }
    >c:AcceleratorItem{
     >c:AcceleratorItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
    }
    >c:BitDustItem{
     >c:BitDustItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getIconDrawable:
     +m:getPriceInAcceleratorsForResearchReset:int
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
    }
    >c:BlueprintItem{
     >c:BlueprintItemFactory{
      +x:
      +m:create:BlueprintType
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:addSellItems:Array
     +m:canBeSold:
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getBlueprintType:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getIconDrawable:
     +m:getPriceInAcceleratorsForResearchReset:int
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
     +m:toString:
    }
    >c:CaseItem{
     >c:CaseItemFactory{
      +x:
      +m:create:CaseType,boolean
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     +f:caseType
     +f:containsPapers
     +m:canBeUnpacked:
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCasePriceInAccelerators:
     +m:getCasePriceInKeys:
     +m:getCasePriceInPapers:
     +m:getCategory:
     +m:getColor:
     +m:getData:
     +m:getDecryptionTime:
     +m:getDescription:
     +m:getGuaranteedItemType:
     +m:getIconDrawable:
     +m:getItemCount:
     +m:getItemRarityChances:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:openPack:InventoryStatistics
     -m:read:Kryo,Input
     +m:sameAs:Item
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:CaseKeyItem{
     >c:CaseKeyItemFactory{
      +x:
      +m:create:CaseType
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:caseType
     +m:addSellItems:Array
     +m:autoUseWhenAdded:
     +m:canBeSold:
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
     +m:useItem:
     +m:useItemNeedsConfirmation:
    }
    >c:DatPaperItem{
     >c:DatPaperItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
    }
    >c:DoubleGainShardItem{
     >c:DoubleGainShardItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     +f:DEFAULT_DURATION
     +f:duration
     +m:getAcceleratorsForDuration:int
     +m:addSellItems:Array
     +m:autoUseWhenAdded:
     +m:canBeSold:
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     -m:read:Kryo,Input
     +m:sameAs:Item
     +m:toJson:Json
     +m:useItem:
     +m:useItemNeedsConfirmation:
     -m:write:Kryo,Output
    }
    >c:GameValueGlobalItem{
     >c:GameValueGlobalItemFactory{
      +x:
      +m:create:GameValueType,double
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:delta
     +f:gameValueType
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
    }
    >c:GameValueLevelItem{
     >c:GameValueLevelItemFactory{
      +x:
      +m:create:GameValueType,double,String
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:delta
     +f:gameValueType
     +f:levelName
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
    }
    >c:GateItem{
     >c:GateItemFactory{
      +x:
      +m:create:Gate
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:gate
     +m:addSellItems:Array
     +m:canBeSold:
     +m:cpy:
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
     +m:toString:
    }
    >c:GreenPaperItem{
     >c:GreenPaperItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getIconDrawable:
     +m:getPriceInAcceleratorsForResearchReset:int
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
    }
    >c:LootBoostItem{
     >c:LootBoostItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:EFFECT_DURATION
     +f:PERCENTAGE_BONUS
     +m:autoUseWhenAdded:
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:useItem:
     +m:useItemNeedsConfirmation:
    }
    >c:LuckyShotTokenItem{
     >c:LuckyShotTokenItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
    }
    >c:OpenedResearchItem{
     >c:OpenedResearchItemFactory{
      +x:
      +m:create:ResearchType
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:researchType
     +m:cpy:
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
    }
    >c:PrestigeDustItem{
     >c:PrestigeDustItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:RAW_PRESTIGE_COUNT_MULTIPLIER
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
    }
    >c:PrestigeTokenItem{
     >c:PrestigeTokenItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:autoUseWhenAdded:
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getPriceInAcceleratorsForResearchReset:int
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:useItem:
     +m:useItemNeedsConfirmation:
    }
    >c:RandomBarrierItem{
     >c:RandomBarrierItemFactory{
      +x:
      +m:create:float
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:quality
     +m:canBeUnpacked:
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:openPack:InventoryStatistics
     +m:sameAs:Item
     +m:toJson:Json
    }
    >c:RandomTeleportItem{
     >c:RandomTeleportItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:canBeUnpacked:
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:openPack:InventoryStatistics
    }
    >c:RandomTileItem{
     >c:RandomTileItemFactory{
      +x:
      +m:create:float
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:quality
     +m:addSellItems:Array
     +m:canBeSold:
     +m:canBeUnpacked:
     +m:cpy:
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:openPack:InventoryStatistics
     +m:sameAs:Item
     +m:toJson:Json
    }
    >c:RarityBoostItem{
     >c:RarityBoostItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:PERCENTAGE_BONUS
     +m:autoUseWhenAdded:
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:useItem:
     +m:useItemNeedsConfirmation:
    }
    >c:ResearchTokenItem{
     >c:ResearchTokenItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:autoUseWhenAdded:
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:useItem:
     +m:useItemNeedsConfirmation:
    }
    >c:ResearchTokenUsedItem{
     >c:ResearchTokenUsedItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
    }
    >c:ResourceItem{
     >c:ResourceItemFactory{
      +x:
      +m:create:ResourceType
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     -c:Serializer
     +f:resourceType
     +m:addSellItems:Array
     +m:canBeSold:
     +m:cpy:
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getIconDrawable:
     +m:getPriceInAcceleratorsForResearchReset:int
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isAffectedByDoubleGain:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
     +m:toString:
    }
    >c:SkillPointItem{
     -c:Serializer
     >c:SkillPointItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
    }
    >c:StarItem{
     -c:Serializer
     >c:StarItemFactory{
      +x:
      +m:create:
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
    }
    >c:TileItem{
     -c:Serializer
     >c:TileItemFactory{
      +x:
      +m:create:Tile
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     +f:tile
     +m:addSellItems:Array
     +m:affectedByLuckyWheelMultiplier:
     +m:canBeSold:
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillWithInfo:Table,float
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
     +m:toString:
    }
    >c:TrophyItem{
     -c:Serializer
     >c:TrophyItemFactory{
      +x:
      +m:create:TrophyType
      +m:createDefault:
      +m:fromJson:JsonValue
      +m:setup:
     }
     +f:trophyType
     +m:cpy:
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:from:Item
     +m:generateIcon:float,boolean
     +m:getAnalyticName:
     +m:getCategory:
     +m:getData:
     +m:getDescription:
     +m:getRarity:
     +m:getSubcategory:
     +m:getTitle:
     +m:getType:
     +m:isCountable:
     +m:sameAs:Item
     +m:toJson:Json
    }
   }
   >p:managers{
    >p:music{
     -c:CachedMusicManager
     -c:DesktopCachedMusicManager
     >c:LiveMusicManager{
      -c:RestartableAudioDevice
      >c:PcmBuffer{
       +x:
       +f:data
       +f:length
      }
      >c:PlaybackStatus{
       +f:ACTIVE
       +f:SLEEP_APP_INACTIVE
       +f:SLEEP_NOT_PLAYING
       +f:SLEEP_NO_AUDIO_DEVICE
       +f:SLEEP_NO_BUFFER
       +f:STARTING
       +f:STOPPED
       +m:valueOf:String
       +m:values:
      }
      >c:SynthesizerStatus{
       +f:ACTIVE
       +f:NOT_ACTIVE
       +f:RESTART_PLAYBACK
       +f:SLEEP_APP_INACTIVE
       +f:SLEEP_NOT_PLAYING
       +f:SLEEP_NO_AUDIO_DATA
       +f:SLEEP_NO_FREE_BUFFER
       +f:SLEEP_NO_IBXM
       +m:valueOf:String
       +m:values:
      }
      -x:
      -f:ibxm
      -m:dispose:
      +m:getPlaybackStatus:
      +m:getPlayingMusic:
      +m:getSampleRate:
      +m:getSynthesizerStatus:
      +m:playMusic:Module
      -m:preRender:float
      +m:setBackendVolume:float
      -m:setup:
      +m:simulateSpectrums:
      +m:stopMusic:
     }
     -c:RecordedSpectrum
    }
    >p:preferences{
     >p:categories{
      >p:progress{
       -c:PP_Achievement
       -c:PP_Auth
       -c:PP_BasicLevel
       >c:PP_Custom{
        -x:
        +f:MAX_ENTRIES
        +f:MAX_ENTRY_LENGTH
        +m:getKeys:
        +m:getValue:String,String
        -m:load:PrefMap
        -m:save:PrefMap
        +m:setValue:String,String
       }
       -c:PP_DailyQuest
       -c:PP_Enemy
       -c:PP_Inventory
       -c:PP_Message
       -c:PP_Progress
       -c:PP_Purchase
       -c:PP_Research
       -c:PP_SecretCode
       -c:PP_Statistics
       -c:PP_UserMaps
      }
      -p:settings
      -c:ProgressPrefs
      -c:SettingsPrefs
     }
     -c:PrefMap
     -c:PrefSubcategory
     -c:LegacyPreferences
     -c:PrefCategory
     -c:RegularPrefMap
    }
    >p:script{
     >p:autocompletion{
      >c:LuaScriptParser{
       >c:Block{
        +x:
        +f:children
        +f:end
        +f:parent
        +f:start
        +f:startChar
        +m:describe:String
        +m:isString:
       }
       +x:String
       +f:root
       -m:main:String[]
       +m:getACStringAt:int
      }
     }
     >p:fs{
      >c:SFileHandle{
       -c:Serializer
       +x:String
       +m:assertAccessible:String
       +m:isAccessible:String
       +m:child:String
       +m:copyTo:SFileHandle
       +m:delete:
       +m:deleteDirectory:
       +m:emptyDirectory:
       +m:emptyDirectory:boolean
       +m:equals:Object
       +m:exists:
       +m:extension:
       +m:hashCode:
       +m:isDirectory:
       +m:lastModified:
       +m:length:
       +m:list:
       -m:list:FileFilter
       -m:list:FilenameFilter
       +m:list:String
       +m:map:
       -m:map:MapMode
       +m:mkdirs:
       +m:moveTo:SFileHandle
       +m:name:
       +m:nameWithoutExtension:
       +m:parent:
       +m:path:
       +m:pathWithoutExtension:
       +m:read:
       +m:read:int
       +m:readBytes:
       +m:readBytes:byte[],int,int
       +m:readString:
       +m:readString:String
       +m:reader:
       +m:reader:String
       +m:reader:int
       +m:reader:int,String
       +m:sibling:String
       +m:toString:
       +m:write:InputStream,boolean
       +m:write:boolean
       +m:write:boolean,int
       +m:writeBytes:byte[],boolean
       +m:writeBytes:byte[],int,int,boolean
       +m:writeString:String,boolean
       +m:writeString:String,boolean,String
       +m:writer:boolean
       +m:writer:boolean,String
      }
     }
     -c:ClassTreeLuaTable
     -c:GlobalCLuaTable
     >c:MathEnvironment{
      >c:PreparedMathExpression{
       +m:eval:
       +m:eval:double
       +m:eval:double,double
       +m:eval:double,double,double
      }
      +x:
      +m:cached:String
      +m:prepare:String
     }
     -c:ReadOnlyLuaTable
     -c:ScriptEnvironment
     -c:Whitelist
    }
    >c:AbilityManager{
     >c:Factories{
      +x:
      +f:BALL_LIGHTNING
      +f:BLIZZARD
      +f:BULLET_WALL
      +f:FIREBALL
      +f:FIRESTORM
      +f:LOIC
      +f:MAGNET
      +f:NUKE
      +f:OVERLOAD
      +f:REPEAT
      +f:SMOKE_BOMB
      +f:THUNDER
      +f:WINDSTORM
     }
     -c:Serializer
     -x:
     +f:F
     +m:getEnergyCostGameValueType:AbilityType
     +m:getFactory:AbilityType
     +m:getMaxPerGameGameValueType:AbilityType
     +m:isAnyAbilityOpened:
     -m:setup:
     -m:test:
    }
    >c:AchievementManager{
     >c:AchievementConfig{
      +x:
      +f:hidden
      +f:required
      +f:rewards
     }
     -c:Serializer
     -x:
     +f:configs
     +m:countAchievementsToRedeem:
     -m:dispose:
     +m:getCurrentProgress:AchievementType
     +m:getDescription:AchievementType
     +m:getName:AchievementType
     +m:isRedeemed:AchievementType
     +m:isRequirementMet:AchievementType
     +m:redeem:AchievementType
     +m:setProgress:AchievementType,int
     -m:setup:
     +m:syncAchievementsWithPlatform:
     +m:updateGlobal:
    }
    -c:AnalyticsManager
    >c:AssetManager{
     -c:Serializer
     >c:TextureRegions{
      -x:
      +f:blank
      +f:buffHealthBarIconArmor
      +f:buffHealthBarIconBlastThrowBack
      +f:buffHealthBarIconBlizzard
      +f:buffHealthBarIconBonusCoins
      +f:buffHealthBarIconBonusXp
      +f:buffHealthBarIconBurn
      +f:buffHealthBarIconChainReaction
      +f:buffHealthBarIconDeathExplosion
      +f:buffHealthBarIconFreezing
      +f:buffHealthBarIconInvulnerability
      +f:buffHealthBarIconNoBonusSystemPoints
      +f:buffHealthBarIconNoDamage
      +f:buffHealthBarIconPoison
      +f:buffHealthBarIconPoisonThree
      +f:buffHealthBarIconPoisonTwo
      +f:buffHealthBarIconRegeneration
      +f:buffHealthBarIconSlipping
      +f:buffHealthBarIconSnowball
      +f:buffHealthBarIconStun
      +f:buffHealthBarIconVulnerability
      +f:bulletTraceThin
      +f:crosshairSmall
      +f:enemyDialog
      +f:flyingPaper100_1
      +f:flyingPaper1_1
      +f:flyingPaper1_2
      +f:flyingPaper1_3
      +f:flyingPaper1_4
      +f:flyingPaper20_1
      +f:flyingPaper5_1
      +f:gateOutlineHorizontalActive
      +f:gateOutlineHorizontalHover
      +f:gateOutlineVerticalActive
      +f:gateOutlineVerticalHover
      +f:iconLoop
      +f:iconOrgan
      +f:iconPickaxe
      +f:iconSmokeBomb
      +f:muzzleFlash1
      +f:muzzleFlash2
      +f:muzzleFlashCompensator1
      +f:muzzleFlashCompensator2
      +f:muzzleFlashSmall
      +f:overloadImpulseA
      +f:overloadImpulseB
      +f:overloadImpulseC
      +f:overloadImpulseD
      +f:particlePentagon
      +f:roundedSmallRect
      +f:smallCircle
      +f:tileOutlineActive
      +f:tileOutlineHover
      +m:i:
     }
     -c:WebTextureRegion
     -x:
     +f:BLANK_REGION_NAME
     +f:blendedMaterial
     +f:normalMaterial
     +m:clearCacheDir:
     -m:localOrInternalFile:String
     -m:addRegionCharsToFont:BitmapFont,int
     +m:createDefaultWindowStyle:
     -m:dispose:
     +m:getBannerTexture:
     +m:getBlankWhiteTextureRegion:
     +m:getColor:String
     +m:getDamageNumbersEspeciallyEffectiveFont:
     +m:getDamageNumbersFont:
     +m:getDamageNumbersOverTimeFont:
     +m:getDebugFont:boolean
     +m:getDebugLabelStyle:
     +m:getDrawable:String
     +m:getFont:int
     +m:getFontScaleMultiplier:int
     +m:getFontWithMarkup:int,boolean
     +m:getLabelStyle:int
     +m:getLargeDebugFont:boolean
     +m:getMenuXmSoundTrack:
     -m:getModel:String,ObjectConsumer
     +m:getOverlayBackground:
     +m:getParticleEffectPool:String
     +m:getParticleEffectPoolWithTemplate:String,ParticleEffect
     +m:getQuad:String
     +m:getQuadOrNull:String
     -m:getSceneModel:ObjectConsumer
     +m:getSceneModelIfLoaded:
     +m:getScrollPaneStyle:float
     +m:getSelectBoxStyle:BitmapFont,boolean
     +m:getSmallDebugFont:
     +m:getSmallDebugFontNoMarkup:
     +m:getSmallDebugLabelStyle:
     +m:getSound:StaticSoundType
     +m:getTextFieldStyle:int
     +m:getTextFieldStyleWithFontAndVariant:BitmapFont,boolean
     +m:getTextFieldStyleWithVariant:int,boolean
     +m:getTextureRegion:String
     +m:getTextureRegionSetThrowing:String,boolean
     +m:getTextureRegions:String
     -m:loadWebTexture:String
     -m:loadWebTexture:String,boolean
     +m:replaceRegionAliasesWithChars:CharSequence
     -m:setup:
     -m:test:
    }
    >c:AuthManager{
     -c:AuthManagerListener
     -c:ConfirmEmailResult
     -c:GoogleSignInResult
     -c:HttpQueuedRequest
     -c:NewsResponse
     -c:PasswordResetResult
     -c:PasteBinResponse
     -c:ProfileStatus
     -c:ReceivedIssuedItemsResponse
     -c:SaveGameResult
     -c:Serializer
     -c:SignInResponse
     -c:SignInResult
     >c:SignInStatus{
      +f:NOT_SIGNED_IN
      +f:SIGNED_IN
      +f:SIGNED_IN_OFFLINE
      +m:valueOf:String
      +m:values:
     }
     -c:SignUpResult
     -c:XpStatus
     -x:
     -f:gameUpdateNotificationShown
     -f:lastStateUpdateTimestamp
     -f:localXpPlayedLevels
     -m:checkIncorrectSessionIdApiResponse:JsonValue
     -m:addProfileStatusLocal:String,String,int
     -m:anyRequestRunning:
     -m:backupProgressToServer:
     -m:clearLocalSessionData:
     -m:confirmEmail:ObjectConsumer
     -m:createPasteBin:String,String,ObjectConsumer
     -m:deleteGameFromServer:int,ObjectConsumer
     -m:fallBackToOfflineCache:
     +m:getAvatar:int
     +m:getAvatarWebUrl:String,int
     -m:getCloudSaveSlotId:
     -m:getCloudSaveSlotTimestamp:
     -m:getCloudSavedGamesList:ObjectConsumer
     -m:getEmailHint:
     +m:getInviteCode:
     -m:getInvitedById:
     -m:getLastLoadFromCloudTimestamp:
     -m:getMaxCloudSaveSlots:
     -m:getNews:ObjectConsumer
     +m:getNickname:
     +m:getPlayerId:
     +m:getPlayerIdCached:
     +m:getProfileLevelTextures:int
     -m:getProgressOwnerPlayerId:
     -m:getProgressOwnerPlayerNickname:
     -m:getSessionData:
     -m:getSessionId:
     +m:getSignInStatus:
     -m:getSteamAccountId:
     -m:handleAutoSave:
     -m:hasUnsavedProgressForCloud:
     -m:isAutoSavesEnabled:
     -m:isPasswordSet:
     -m:isProfileStatusActive:String
     +m:isSignedIn:
     -m:linkAccountStatus:String,ObjectConsumer
     -m:linkSteamAccount:ObjectConsumer
     -m:loadSavedGameFromServer:int
     -m:loadStateFromServer:String,Runnable
     -m:notifyNeedCloudSave:boolean
     -m:onSteamAuthFinished:
     -m:postRender:float
     -m:queueRequest:HttpQueuedRequest
     -m:receiveIssuedItemsFromServer:ObjectConsumer
     -m:reloadPlayerId:
     -m:requestNicknameChange:String,ObjectConsumer
     -m:resetPassword:String,ObjectConsumer
     -m:saveGameToServer:int,ObjectConsumer
     -m:setAutoSavesEnabled:boolean
     -m:setPassword:String,ObjectConsumer
     -m:setup:
     -m:signIn:String,String,ObjectConsumer
     -m:signInEnterOTP:String,String,ObjectConsumer
     -m:signInShowOtpForm:String,String,ObjectConsumer
     -m:signInWithGoogle:String,ObjectConsumer
     -m:signInWithSteam:ObjectConsumer
     -m:signOut:
     -m:signUp:String,String,String,String,ObjectConsumer
     -m:signUpWithGoogle:String,String,ObjectConsumer
     -m:signUpWithSteam:String,String,String,ObjectConsumer
    }
    >c:BasicLevelManager{
     >c:BasicLevelManagerListener{
      +z
     }
     >c:QuestsPrestigeMilestone{
      +x:int,int
      +f:percentage
      +f:tokensCount
     }
     -c:Serializer
     -x:
     +f:PREVIEW_HEIGHT
     +f:PREVIEW_WIDTH
     +f:defaultLevelNames
     +f:levelsOrdered
     +f:resourceBonusLevelMultipliers
     +f:stagesOrdered
     +m:addListener:BasicLevelManagerListener
     +m:addStage:BasicLevelStage
     +m:canBePurchased:BasicLevel
     -m:dispose:
     +m:getGainedStars:
     +m:getGainedStarsOnLevel:BasicLevel
     +m:getGainedStarsOnStage:BasicLevelStage
     +m:getLevel:String
     +m:getLevelStage:String
     +m:getMasteredLevels:
     +m:getMaxReachedWave:String
     +m:getMaxStars:BasicLevelStage,boolean
     +m:getMaxStarsCount:
     +m:getNextLevel:BasicLevel
     +m:getNextVisibleLevel:BasicLevel
     +m:getPrestigeCompletedQuests:
     +m:getPrestigeMaxCompletedQuests:
     +m:getQuestSkipPrice:BasicLevelQuestConfig
     +m:getQuestsPrestigeMilestones:
     +m:getRegularQuestById:String
     +m:getStage:String
     -m:handleGameOverBonusLoot:GameSystemProvider,String,Array
     +m:isLevelVisible:BasicLevel
     +m:isMastered:BasicLevel
     +m:isOpened:BasicLevel
     +m:isQuestCompleted:String
     +m:isQuestEverCompleted:String
     +m:isStageVisible:BasicLevelStage
     +m:levelsResourceReport:
     +m:loadAndRegisterLevelFromJson:JsonValue
     +m:mapEditingAvailable:
     +m:playedBefore:BasicLevel
     +m:registerLevel:BasicLevel
     +m:removeListener:BasicLevelManagerListener
     +m:removeStage:BasicLevelStage
     +m:resetQuestsForPrestige:
     -m:saveStagesConfigOnDisk:
     +m:selectLootBonusLevelForResource:BasicLevelLootBonusType,ResourceType,Array,RandomXS128,ObjectMap
     +m:setMap:BasicLevel,Map
     +m:setPurchased:BasicLevel
     +m:setQuestCompleted:String,boolean
     +m:skipQuest:BasicLevelQuestConfig
     -m:test:
     +m:unloadLevel:String
    }
    >c:BuffManager{
     >c:Factories{
      +x:
      +f:ARMOR
      +f:BLIZZARD
      +f:BONUS_COINS
      +f:BONUS_XP
      +f:BURN
      +f:CHAIN_REACTION
      +f:DEATH_EXPLOSION
      +f:FREEZING
      +f:INVULNERABILITY
      +f:NO_BONUS_SYSTEM_POINTS
      +f:NO_DAMAGE
      +f:POISON
      +f:REGENERATION
      +f:SLIPPING
      +f:SNOWBALL
      +f:STUN
      +f:THROW_BACK
      +f:VULNERABILITY
     }
     -c:Serializer
     -x:
     +f:F
     -m:dispose:
     +m:getFactory:BuffType
     -m:setup:
    }
    >c:CursorGraphicsManager{
     >c:CustomCursorActorListener{
      +x:String,ObjectSupplier
      +m:enter:InputEvent,float,float,int,Actor
      +m:exit:InputEvent,float,float,int,Actor
     }
     -c:Serializer
     -x:
     +m:contains:String
     -m:preRender:float
     +m:remove:String
     +m:setActorCustomMouseCursor:Actor,SystemCursor
     +m:setActorCustomMouseCursorConditional:Actor,ObjectSupplier
    }
    >c:DailyQuestManager{
     >c:DailyLootDayConfig{
      +x:
      +f:count
      +f:item
      +f:monthlyBonus
      +m:fromJson:JsonValue
      +m:getCount:int
     }
     >c:DailyQuestLeaderboards{
      +x:boolean,String,String
      +f:date
      +f:entries
      +f:player
      +f:playerId
      +f:requestTimestamp
      +f:success
     }
     >c:DailyQuestLevel{
      +x:
      +f:endTimestamp
      +f:forDate
      +f:forDateTimestamp
      +f:isLocalFallback
      +f:prizesFirstPlace
      +f:prizesSecondPlace
      +f:prizesThirdPlace
      +f:prizesTop10Percent
      +f:prizesTop30Percent
      +f:prizesTop3Percent
      +f:questId
      +m:getForDate:
      +m:getForDateTimestamp:
      +m:getLevelName:
      +m:getQuestName:
      +m:getQuestRewards:
      -m:read:Kryo,Input
      +m:setCompleted:
      +m:setForDate:String
      +m:validate:
      +m:wasCompleted:
      -m:write:Kryo,Output
     }
     >c:LeaderboardsRank{
      +f:boardDate
      +f:isAdvance
      +f:playerId
      +f:rank
      +f:requestTimestamp
      +f:score
      +f:success
      +f:total
     }
     -c:Serializer
     -x:
     +f:LEVEL_NAME_PREFIX
     +f:RESET_QUESTS_QUEST_ID
     +f:dailyLootDayConfigs
     +f:dailyLootMaxBonusPerMonth
     +f:dailyLootMinBonusPerMonth
     +m:getCurrentDayDate:
     +m:getCurrentDayLevel:ObjectConsumer
     +m:getDailyLootCurrentDayIndex:
     +m:getDailyLootCurrentMonthIndex:
     +m:getDailyLootCurrentQuest:
     +m:getDailyQuestHash:int
     -m:getDailyQuestHashFromServer:int,ObjectConsumer
     +m:getDailyQuestLevelCache:
     +m:getLeaderboards:String,ObjectConsumer
     +m:getNextDayDate:
     +m:getSecondsTillNextDailyLoot:
     +m:isTodayDailyLootQuestCompleted:
     -m:loadAndStoreDailyQuestFromServer:int,ObjectConsumer
     +m:removeLoadedDailyQuestMapIfMd5HashDiffers:int,String
     +m:setDailyLootQuestCompleted:
     +m:setLastCompletedDailyQuestTimestamp:int
     -m:setup:
     +m:startDailyLevel:
    }
    >c:DebugManager{
     -c:Serializer
     -x:
     +f:RANDOM_COLORS
     +f:glProfiler
     -m:dispose:
     +m:isEnabled:
     -m:postRender:float
     -m:preRender:float
     +m:registerFrameDrawTimeAndMemory:long
     +m:registerFrameJob:String,long
     +m:registerGameStateUpdate:
     +m:registerValue:String
     -m:setup:
     -m:test:
     +m:unregisterValue:String
    }
    >c:EnemyManager{
     >c:Factories{
      +x:
      +f:ARMORED
      +f:BOSS
      +f:BROOT_BOSS
      +f:CONSTRUCTOR_BOSS
      +f:FAST
      +f:FIGHTER
      +f:GENERIC
      +f:HEALER
      +f:HELI
      +f:ICY
      +f:JET
      +f:LIGHT
      +f:METAPHOR_BOSS
      +f:METAPHOR_BOSS_CREEP
      +f:MOBCHAIN_BOSS_BODY
      +f:MOBCHAIN_BOSS_CREEP
      +f:MOBCHAIN_BOSS_HEAD
      +f:REGULAR
      +f:SNAKE_BOSS_BODY
      +f:SNAKE_BOSS_HEAD
      +f:SNAKE_BOSS_TAIL
      +f:STRONG
      +f:TOXIC
     }
     -c:Serializer
     -x:
     +f:F
     -m:dispose:
     +m:getBossEnemyType:BossType
     +m:getDamageTypeIcon:DamageType
     +m:getFactory:EnemyType
     +m:getIceOverlayTexture:int
     +m:isEnemyTypeNewForPlayer:EnemyType,boolean
     +m:markEnemyTypeAsNotNewForPlayer:EnemyType
     -m:setup:
     -m:test:
    }
    >c:GameValueManager{
     >c:GameValueManagerListener{
      +z
      +m:gameValuesRecalculated:
     }
     >c:GameValueEffect{
      >c:Source{
       +f:BASE_TILE
       +f:BOSS_TILE
       +f:CORE_TILE
       +f:CUSTOM
       +f:GV_TILE
       +f:LEVEL_QUEST
       +f:LEVEL_STOCK
       +f:LEVEL_WAVE_QUEST
       +f:RESEARCH
       +f:STOCK
       +f:TROPHY
       +f:values
       +m:valueOf:String
       +m:values:
      }
      +x:
      +x:GameValueEffect
      +x:GameValueType,double
      +f:delta
      +f:questId
      +f:researchType
      +f:source
      +f:trophyType
      +f:type
      +m:from:GameValueEffect
      -m:read:Kryo,Input
      +m:sameAs:GameValueEffect
      +m:setup:GameValueType,double,Source
      +m:toString:
      -m:write:Kryo,Output
     }
     >c:GameValueStockConfig{
      +x:
      +f:disabledTitleAlias
      +f:stockValue
      +f:titleAlias
      +f:type
      +f:units
      +m:createIconForBackground:Color
      +m:createIconForBackgroundWithColor:Color,Color
      +m:getIcon:
     }
     >c:GameValuesSnapshot{
      +x:
      +x:GameValuesSnapshot
      +f:effects
      +f:hash
      +f:values
      +m:fromJson:String
      +m:from:GameValuesSnapshot
      +m:getBooleanValue:GameValueType
      +m:getDifferences:GameValuesSnapshot
      +m:getFloatValue:GameValueType
      +m:getFloatValueSum:GameValueType,GameValueType
      +m:getIntValue:GameValueType
      +m:getIntValueSum:GameValueType,GameValueType
      +m:getPercentValueAsMultiplier:GameValueType
      +m:getPercentValueAsMultiplierSum:GameValueType,GameValueType
      +m:getPercentValueAsMultiplierSumAll:GameValueType[]
      +m:getValue:GameValueType
      +m:printDifferences:String,String,GameValuesSnapshot,StringBuilder
      -m:read:Kryo,Input
      +m:toJson:
      +m:toString:
      -m:write:Kryo,Output
     }
     >c:GvSnapDiff{
      >c:Type{
       +f:GLOBAL_HASH
       +f:GV_COUNT
       +f:GV_NOT_IN_ORIG
       +f:GV_NOT_IN_TO
       +f:GV_RESULT
       +m:valueOf:String
       +m:values:
      }
      +x:Type,GameValueEffect
      +x:Type,double,double
      +f:effect
      +f:type
      +f:vOrig
      +f:vTo
     }
     -c:Serializer
     >c:ValueUnits{
      +f:BOOLEAN
      +f:PERCENTS
      +f:PERCENTS_PER_SECOND
      +f:SECONDS
      +f:UNITS
      +f:UNITS_PER_SECOND
      +m:valueOf:String
      +m:values:
     }
     -x:
     +f:ICON_BACKGROUND_COLOR
     +m:createSnapshot:GameValuesSnapshot,DifficultyMode,boolean,BasicLevel,boolean,boolean,ProgressSnapshotForState
     +m:addListener:GameValueManagerListener
     +m:formatEffectTitleValue:double,GameValueType
     +m:formatEffectValue:double,ValueUnits
     +m:getCheatingReason:Array
     +m:getCurrentEffects:
     +m:getDisabledTitle:GameValueType
     +m:getEndlessSnapshot:
     +m:getSnapshot:
     +m:getStockValueConfig:GameValueType
     +m:getTitle:GameValueType
     +m:getUnits:GameValueType
     +m:removeListener:GameValueManagerListener
     +m:requireRecalculation:
     -m:setup:
     -m:test:
    }
    >c:GateManager{
     >c:Factories{
      -x:
      +f:BARRIER_HEALTH
      +f:BARRIER_TYPE
      +f:TELEPORT
     }
     -c:Serializer
     -x:
     +f:F
     +m:createGateFromJson:JsonValue
     +m:createRandomGate:GateType,float,RandomXS128
     +m:getFactory:GateType
     -m:setup:
    }
    -c:HttpManager
    >c:ItemManager{
     -c:Serializer
     -x:
     +f:ENCRYPTED_CASES_QUEUE
     +f:craftRecipes
     +m:generateItemByRarity:RandomXS128,RarityType,float,float,float,float,float,float,float,boolean,InventoryStatistics
     +m:getCategoryNameAlias:ItemCategoryType
     +m:getCraftRecipes:Item
     +m:getFactory:ItemType
     +m:getQueuedEncryptedCaseType:int
     +m:getSubcategoryColor:ItemSubcategoryType
     +m:getSubcategoryIconAlias:ItemSubcategoryType
     +m:getSubcategoryName:ItemSubcategoryType
     -m:setup:
    }
    >c:LeaderBoardManager{
     >c:BasicLevelsTopLeaderboards{
      +x:boolean
      +f:difficultyMode
      +f:leaderboards
      +f:requestTimestamp
      +f:success
      +m:fromJson:JsonValue
      +m:toJson:Json
     }
     >c:LeaderboardsEntry{
      +x:String,String,long,int,boolean,int
      +f:badgeIconColor
      +f:badgeIconTexture
      +f:badgeOverlayColor
      +f:badgeOverlayTexture
      +f:hasProfilePicture
      +f:nickname
      +f:playerId
      +f:profileLevel
      +f:rank
      +f:score
      +m:fromJson:JsonValue
      +m:toJson:Json
     }
     >c:LeaderboardsRankResult{
      +f:difficultyMode
      +f:gameMode
      +f:isAdvance
      +f:mapName
      +f:mode
      +f:playerId
      +f:rank
      +f:requestTimestamp
      +f:score
      +f:success
      +f:total
      +m:fromJson:JsonValue
      +m:toJson:Json
     }
     >c:LeaderboardsResult{
      +f:difficultyMode
      +f:entries
      +f:gameMode
      +f:mapName
      +f:mode
      +f:player
      +f:playerId
      +f:requestTimestamp
      +f:success
      +m:fromJson:JsonValue
      +m:toJson:Json
     }
     -c:Serializer
     >c:SkillPointsLeaderboardsRank{
      +f:playerId
      +f:requestTimestamp
      +f:score
      +f:success
     }
     >c:SkillPointsLeaderboardsResult{
      +f:entries
      +f:player
      +f:playerId
      +f:requestTimestamp
      +f:success
     }
     -x:
     +m:getBasicLevelsTopLeaderboards:ObjectConsumer
     +m:getLeaderboards:GameMode,DifficultyMode,String,LeaderboardsMode,ObjectConsumer
     +m:getLeaderboardsAdvanceRank:GameMode,DifficultyMode,String,LeaderboardsMode,long,ObjectConsumer
     +m:getLeaderboardsRank:GameMode,DifficultyMode,String,LeaderboardsMode,ObjectConsumer
     +m:getSkillPointLeaderboards:ObjectConsumer
     +m:removeBasicLevelsTopLeaderboardsRetriever:ObjectConsumer
     -m:setup:
    }
    >c:LocaleManager{
     >c:LocaleManagerListener{
      +z
      +m:localeChanged:
     }
     >c:Locale{
      +x:String,String
      +f:alias
      +f:localeLanguage
      +f:name
     }
     -c:Serializer
     -x:
     +f:i18n
     +m:addListener:LocaleManagerListener
     -m:dispose:
     -m:downloadFreshTranslationsAsync:
     +m:formatNthEnemy:int
     +m:formatNthShot:int
     +m:getAllLocalesChars:
     +m:getAllLocalesCharsPerFile:
     +m:getAvailableLocales:
     +m:getLocale:
     +m:reload:
     +m:setLocale:String,boolean
     -m:setup:
     -m:test:
    }
    >c:MapManager{
     >c:MapPreview{
      +m:dispose:
      +m:generate:
      +m:getTextureRegion:
      +m:isDisposed:
     }
     -c:Serializer
     -x:
     +f:PREVIEW_HEIGHT
     +f:PREVIEW_WIDTH
     +f:coreHighlightParticlesPool
     +f:highlightParticlesPool
     +f:tileWarningParticlePool
     +m:generatePreview:Map
     -m:postRender:float
     +m:unloadMapPreviews:
    }
    >c:MessageManager{
     -c:MessageManagerListener
     >c:Message{
      +x:
      +f:contents
      +f:customIcon
      +f:date
      +f:id
      +f:items
      +f:local
      +f:notDeletable
      +f:notReadable
      +f:onItemsReceive
      +f:title
      +f:userData
      +m:toString:
     }
     -c:Serializer
     -x:
     +m:addMessage:Message
     +m:deleteMessage:Message
     +m:getMessage:String
     +m:getMessages:
     +m:getTotalMessageCount:
     +m:getUnreadMessageCount:
     +m:isMessageEverDeleted:String
     +m:isMessageItemsReceived:String
     +m:isMessageRead:String
     -m:isRequestingServer:
     +m:markMessageRead:Message
     -m:processLocalMessages:
     +m:receiveMessageItems:Message
     +m:removeMessage:Message
     -m:requestMessagesFromServer:
     -m:setup:
    }
    >c:MinerManager{
     >c:Factories{
      +x:
      +f:INFIAR
      +f:MATRIX
      +f:SCALAR
      +f:TENSOR
      +f:VECTOR
     }
     -c:Serializer
     -x:
     +f:F
     +f:SHORT_MINER_ALIASES
     +f:doubleSpeedParticleEffectPool
     +f:highlightParticles
     +f:minedResourceParticleEffectPool
     -m:dispose:
     +m:fromJson:JsonValue
     +m:getBuiltStatisticType:MinerType
     +m:getFactory:MinerType
     +m:getInstallDurationGameValueType:MinerType
     +m:getMoneySpentStatisticType:MinerType
     +m:getTitle:MinerType
     +m:getUpgradedStatisticType:MinerType
     +m:isMinerOpened:MinerType,GameValueProvider
     +m:minersAndEnergyAvailable:
     -m:setup:
     -m:test:
    }
    >c:ModifierManager{
     >c:Factories{
      +x:
      +f:ATTACK_SPEED
      +f:BALANCE
      +f:BOUNTY
      +f:DAMAGE
      +f:EXPERIENCE
      +f:MINING_SPEED
      +f:POWER
      +f:SEARCH
     }
     -c:Serializer
     -x:
     +f:F
     +m:fromJson:JsonValue
     +m:getCountGameValue:ModifierType
     +m:getDescriptionAlias:ModifierType
     +m:getFactory:ModifierType
     +m:getTitleAlias:ModifierType
     +m:getTitleFancyAlias:ModifierType
     -m:setup:
    }
    >c:MusicManager{
     >c:FrequencyRange{
      +x:
      +x:float,float
      +f:max
      +f:min
      +f:multiplier
      -m:read:Kryo,Input
      +m:sameAs:FrequencyRange
      +m:setMultiplier:float
      -m:write:Kryo,Output
     }
     >c:ModuleCacheConfig{
      +x:
      +f:hash
      +f:lastUsed
      +f:module
      +f:size
     }
     >c:MusicSource{
      +x:MusicSourceType,String
      +f:DEFAULT
      +f:id
      +f:repeats
      +f:type
      +m:fromJson:JsonValue
      +m:getBase64:
      +m:getModule:
      +m:sameAs:MusicSource
      +m:toJson:Json
      +m:toString:
     }
     >c:MusicSourceType{
      +f:BASIC_LEVEL
      +f:DEFAULT
      +f:USER_MAP
      +f:values
      +m:valueOf:String
      +m:values:
     }
     -c:Serializer
     >c:SpectrumConfig{
      +x:
      +x:Array
      +f:DEFAULT
      +f:fixedMaxValue
      +f:frequencies
      +f:maxValueEasing
      +f:spectrumLeft
      +f:spectrumLock
      +f:spectrumRight
      +m:copySpectrum:float[],boolean
      +m:getSpectrumSize:
      -m:read:Kryo,Input
      +m:sameAs:SpectrumConfig
      +m:toString:
      -m:write:Kryo,Output
      +m:zeroSpectrums:
     }
     +f:DEFAULT_VOLUME_CHANGE_SPEED
     +f:lastSoundTimestamp
     -m:createSelfSetuppingDummy:
     +m:addMenuMusicSource:MusicSource
     +m:continuePlayingMenuMusicTrack:
     +m:getCurrentlyPlayingMenuThemeSource:
     +m:getFactVolume:float
     +m:getInterpolation:
     +m:getMainVolume:
     +m:getMenuMusicSourceRepeatCount:MusicSource
     +m:getMenuThemeSources:
     +m:getModule:String
     +m:getMusicB64hash:String
     +m:getPlayingMusic:
     +m:getSpectrumConfig:SpectrumConfig
     -m:getSpectrumSim:
     +m:isMenuMusicSourceEnabled:MusicSource
     +m:isMusicThumbsUp:int
     +m:playMusic:Module
     -m:preRender:float
     +m:removeMenuMusicSource:MusicSource
     +m:setVolume:float,float,boolean
     +m:setVolumeToStartNewTrack:
     -m:setup:
     +m:showSongNotification:Module,float
     +m:simulateSpectrums:
     +m:stopMusic:
     +m:voteThumbsUp:int,boolean
    }
    >c:NetworkManager{
     -c:KryoForState
     -c:NetBundle
     -c:NetReqConnect
     -c:NetRespBroadcast
     -c:NetRespConnect
     -c:Serializer
     -x:
     -f:registeredClasses
     -m:prepareNetworkKryo:KryoForState
     +m:bytesToObject:byte[]
     -m:dispose:
     -m:getFullKryo:
     +m:objectToBytes:Object
     -m:prepareMultiplayerKryo:Kryo
     -m:setup:
    }
    -c:PreferencesManager
    >c:ProgressManager{
     >c:ProgressManagerListener{
      >c:ProgressManagerListenerAdapter{
       +m:developerConsoleEnabled:
       +m:doubleGainEnabled:
       +m:itemsChanged:Item,int,int
      }
      +z
      +m:developerConsoleEnabled:
      +m:doubleGainEnabled:
      +m:itemsChanged:Item,int,int
     }
     >c:ConditionalCompensation{
      +f:id
      +m:handle:
     }
     >c:CraftingQueueItem{
      +x:
      +f:count
      +f:duration
      +f:ingredients
      +f:result
      +f:timePassed
      +m:fromJson:JsonValue
      +m:getCraftedCount:
      +m:getTimeLeft:
      +m:getTimePassed:
      +m:getTotalTime:
      +m:toJson:Json
     }
     >c:InventoryStatistics{
      +x:
      +f:byTileType
      +f:lootBoostTimeLeft
      +f:rarityBoostsCount
      +m:countItem:Item,int
      +m:cpy:
      -m:read:Kryo,Input
      +m:reset:
      -m:write:Kryo,Output
     }
     >c:ProgressSnapshotForState{
      +x:
      +f:statsPlayRealTime
      +f:statsPlayTimeCasesLoot
      +f:statsQueuedCasesGiven
      +m:fromBytes:byte[],int,int
      +m:getResearchCount:
      +m:getResearchInstalledLevel:ResearchType
      +m:getResearchLevelsCount:
      +m:isQuestEverCompleted:String
      +m:isTrophyReceived:TrophyType
      -m:read:Kryo,Input
      +m:sameAs:ProgressSnapshotForState
      +m:toBytes:
      +m:validate:
      -m:write:Kryo,Output
     }
     -c:Serializer
     >c:ShopOffer{
      +x:
      +x:ItemStack,ItemStack
      +x:ItemStack,ItemStack,int
      +f:discountPercent
      +f:increasedDueToLowPrice
      +f:item
      +f:price
      +f:purchased
      +f:reducedDueToLargePrice
      +m:fromJson:JsonValue
      +m:toJson:Json
     }
     >c:VideoAdViewBonus{
      +x:int,ItemStack
      +x:int,ItemStack,boolean
      +f:doubleGain
      +f:item
      +f:views
     }
     -x:
     +f:CONDITIONAL_COMPENSATIONS
     +f:DIFFICULTY_MULTIPLIER_EASY
     +f:DIFFICULTY_MULTIPLIER_NORMAL
     +f:ITEM_RARITY_COMPARATOR
     +f:VIDEO_AD_BONUSES_CYCLE_LENGTH
     +f:VIDEO_WATCHES_FOR_DOUBLE_GAIN
     +f:VIDEO_WATCHES_FOR_LUCKY_SHOT
     +f:videoAdViewBonuses
     +m:addItemToStacksArray:Array,Item,int
     +m:clampModeDifficulty:DifficultyMode,int,BasicLevel,boolean,boolean,ProgressSnapshotForState
     +m:clampModeDifficultyGVP:DifficultyMode,int,GameValueProvider
     +m:compressStacksArray:Array
     +m:getDifficultyModePrizeMultiplier:DifficultyMode
     +m:getItemStackFromArray:Array,Item
     +m:getMaxQuality:RarityType
     +m:getMinQuality:RarityType
     +m:getRarityFromQuality:float
     +m:globalQualityToRarityQualuty:float
     +m:removeItemFromStacksArray:Array,Item,int
     +m:addAccelerators:int,String
     +m:addGreenPapers:int,String
     +m:addIssuedPrizes:IssuedItems,boolean
     +m:addItemArray:Array,String
     +m:addItemStack:ItemStack,String
     +m:addItems:Item,int,String
     +m:addListener:ProgressManagerListener
     +m:addResources:ResourceType,int,String
     +m:areAbilitiesOpened:
     +m:areModifiersOpened:
     -m:calculateProgressHash:
     +m:checkSpecialTrophiesGiven:
     +m:countAcceleratorsNeeded:int
     +m:createProgressSnapshotForState:
     +m:difficultyModeAvailable:DifficultyMode
     -m:disableDoubleGainTemp:
     -m:enableDeveloperMode:
     -m:enableDoubleGainPermanently:
     -m:enableDoubleGainTemporary:int
     +m:existsAnyProgress:
     +m:generateNewLuckyWheel:
     +m:generateNewShopOffers:
     +m:getAbilities:AbilityType
     +m:getAccelerators:
     +m:getAcceleratorsRequiredToShortenTime:float
     +m:getCustomKeys:
     +m:getCustomValue:String,String
     +m:getDifficultyMode:
     +m:getDifficultyModeColor:DifficultyMode
     +m:getDifficultyModeDiffMultiplier:DifficultyMode
     +m:getDifficultyName:DifficultyMode
     -m:getExtraDecryptingSlotsCount:
     +m:getGameStartGameVersion:
     +m:getGameStartHash:
     +m:getGameStartTimestamp:
     +m:getGreenPapers:
     +m:getInventoryStatistics:
     +m:getIssuedItems:
     +m:getIssuedPrizes:
     +m:getItem:Item
     +m:getItemsByCategory:ItemCategoryType
     +m:getItemsBySubcategory:ItemSubcategoryType
     +m:getItemsByType:ItemType
     +m:getItemsCount:Item
     +m:getLootBoostTimeLeft:
     +m:getLuckyWheelOptions:
     +m:getLuckyWheelRespinPriceAccelerators:
     +m:getLuckyWheelRespinPriceTokens:
     -m:getMaxCraftQueueSize:
     +m:getRarityBrightColor:RarityType
     +m:getRarityBrightColors:
     +m:getRarityColor:RarityType
     +m:getRarityColors:
     +m:getRarityIcon:RarityType
     +m:getRarityName:RarityType
     +m:getRegularRewardingAdItems:int
     +m:getResources:ResourceType
     +m:getSecondsPlayedCorrectedForShop:
     +m:getSecondsTillLuckyWheelSpinAvailable:
     +m:getShopOffers:
     +m:getTempDoubleGainDurationLeft:
     +m:getVideoAdViewBonuses:
     -m:giveDoubleGainIfNecessary:
     -m:givePendingBonuses:
     +m:handleGameOverShopOffersRotation:GameSystemProvider
     +m:hasAnyItem:
     +m:hasPermanentDoubleGain:
     +m:hasTemporaryDoubleGain:
     +m:isDeveloperModeEnabled:
     +m:isDoubleGainEnabled:
     +m:isLuckyWheelSpinAvailable:
     +m:isPremiumStatusActive:
     +m:isResourceOpened:ResourceType
     +m:isStarred:Item
     +m:openPack:Item,int,boolean,boolean
     -m:postRender:float
     +m:removeAbilities:AbilityType,int
     +m:removeAccelerators:int
     +m:removeAllItems:
     +m:removeGreenPapers:int
     +m:removeIssuedItemsLog:
     +m:removeItems:Item,int
     +m:removeListener:ProgressManagerListener
     +m:removeResources:ResourceType,int
     +m:sellItems:Item,int
     +m:setAbilities:AbilityType,int
     +m:setCustomValue:String,String
     +m:setDifficultyMode:DifficultyMode
     +m:setStarred:Item,boolean
     -m:setup:
     +m:showNewlyIssuedPrizesPopup:
     +m:startCrafting:CraftRecipe,Array,int
    }
    -c:PurchaseManager
    -c:RatingManager
    >c:RenderingManager{
     -c:Serializer
     -x:
     +f:batch
     +f:modelBatch
     +f:shapeRenderer
     +m:createDefaultShapeRendererShader:
     +m:createDefaultSpriteBatchShader:
     +m:createShader:String
     +m:isAdditiveBatch:Batch
     +m:prepareBatch:Batch,boolean
     +m:setBatchAdditiveBlending:Batch,boolean
     +m:addDebugPoint:float,float,float,Color
     -m:dispose:
     +m:endFBO:String
     +m:getCurrentFBO:
     +m:getCurrentRenderTargetHeight:
     +m:getCurrentRenderTargetWidth:
     +m:getMSAASampleCount:
     -m:postRender:float
     -m:preRender:float
     +m:resetTransformState:
     -m:setup:
     +m:startFBO:FrameBuffer,String
     +m:stopAnyBatchDrawing:
    }
    >c:ReplayManager{
     >c:LeaderboardsMode{
      +f:score
      +f:values
      +f:waves
      +m:valueOf:String
      +m:values:
     }
     >c:ReplayHeader{
      +f:abilitiesConfiguration
      +f:actions
      +f:actionsCount
      +f:basicLevelName
      +f:build
      +f:canLootCases
      +f:continuedGameApproxStateHash
      +f:customMapBossTypes
      +f:dailyQuestLevel
      +f:difficultyMode
      +f:gameMode
      +f:gameStartTs
      +f:inventoryStatistics
      +f:lootBoostEnabled
      +f:modeDifficultyMultiplier
      +f:playRealTime
      +f:progressSnapshot
      +f:rarityBoostEnabled
      +f:seed
      +f:updateNumber
      +f:userMapId
      +f:userMapSeed
      +m:fromBytes:Input
     }
     >c:ReplayRecord{
      >c:ChartFrames{
       >c:FrameValues{
        +x:
        +f:cBounties
        +f:cKilledEnemies
        +f:cOther
        +f:cWaveCalls
        +f:mdps
        +f:sKilledEnemies
        +f:sMining
        +f:sWaveCalls
        +f:sWavesCleared
        +f:wave
        +m:cpy:
        +m:read:FixedInput
        +m:write:FixedOutput
       }
       +x:
       +f:MAX_FRAME_COUNT
       +f:frames
       +f:version
       +m:fromBytes:FixedInput
       +m:generateFrameValues:GameSystemProvider
       +m:addFrame:GameSystemProvider
       +m:cpy:
       +m:read:FixedInput
       -m:read:Kryo,Input
       +m:write:FixedOutput
       -m:write:Kryo,Output
      }
      +x:
      +f:build
      +f:chartFrames
      +f:defeatedWaves
      +f:difficultyMode
      +f:gameMode
      +f:id
      +f:levelName
      +f:modeDifficultyMultiplier
      +f:playRealTime
      +f:profileXp
      +f:saveTimestamp
      +f:score
      +f:startTimestamp
      +f:statistics
      +f:version
      +m:fromBytes:byte[],int,int
      +m:fromCompactString:String
      +m:fromState:GameSystemProvider
      +m:getStateBytes:
      +m:saveLocally:
      +m:toBytes:
      +m:toCompactString:
     }
     >c:ReplaySendStatus{
      +x:
      +f:bonusXpGained
      +f:bonusXpLeft
      +f:regularXpGained
      +f:regularXpLeft
     }
     -c:Serializer
     -x:
     -f:helperOutput
     +m:deleteAllReplays:
     +m:getAllRecordIds:
     +m:getRecord:String
     -m:loadAndStoreBestReplayFromServer:String,ObjectConsumer
     -m:saveReplay:GameSystemProvider
     -m:sendReplayToServer:String,ObjectConsumer
     -m:sendUnsentReplaysToTheServer:
     -m:setup:
    }
    >c:ResearchManager{
     >c:ResearchManagerListener{
      >c:ResearchManagerListenerAdapter{
       +m:researchCompleted:Research
       +m:researchStarted:Research,long
       +m:researchesUpdated:
      }
      +z
      +m:researchCompleted:Research
      +m:researchStarted:Research,long
      +m:researchesUpdated:
     }
     >c:PolygonConfig{
      +x:
      +f:sprite
      +f:visibleWith
      -m:fromJson:JsonParser
     }
     -c:Serializer
     >c:StartResearchFailReason{
      +f:MAX_LEVEL
      +f:NOT_ENOUGH_ITEMS
      +f:NOT_ENOUGH_MONEY
      +f:NOT_ENOUGH_RESOURCES
      +f:NOT_ENOUGH_STARS
      +f:NOT_VISIBLE
      +f:OTHER_RESEARCH_IN_PROGRESS
      +f:REQUIREMENT_NOT_SATISFIED
      +f:REQUIRES_PREVIOUS_RESEARCHES
      +f:values
      +m:valueOf:String
      +m:values:
     }
     >c:StartResearchingException{
      -x:
      +f:reasons
     }
     -x:
     +f:MAP_SIZE
     +m:isLinkedToRoot:Research,IntIntMap,ObjectSet
     +m:addListener:ResearchManagerListener
     +m:canResearchForToken:Research,boolean
     +m:canStartResearching:Research,boolean
     +m:checkResearchesStatus:boolean
     -m:create3dGraphModel:
     -m:dispose:
     +m:finishCurrentResearch:
     +m:getAfforableResearchesCount:
     +m:getCategory:ResearchCategoryType
     +m:getCurrentResearching:
     +m:getInstalledLevel:ResearchType
     +m:getInstance:ResearchType
     +m:getInstancePreSetup:ResearchType
     +m:getInstances:
     +m:getLinks:
     +m:getLoadedConfigHash:
     +m:getMapHeight:
     +m:getMapMaxX:
     +m:getMapMaxY:
     +m:getMapMinX:
     +m:getMapMinY:
     +m:getMapWidth:
     +m:getMillisToResearchingEnd:
     +m:getPolygonSprites:
     +m:getResearchInstance:ResearchType
     +m:getResearchingDuration:Research
     +m:getResetStarResearchesAcceleratorPrice:
     +m:getUnusedStarsCount:
     +m:hasInstalledParents:Research
     +m:installAllEndlessResearches:
     +m:installAllResearches:
     +m:installRecursiveFree:int
     +m:isLinkedToRoot:Research,ObjectSet
     +m:isSetUp:
     +m:isVisible:Research
     -m:preRender:float
     +m:reload:
     +m:reloadNew:
     +m:removeListener:ResearchManagerListener
     +m:researchForToken:Research
     +m:resetResearchForAccelerators:Research
     +m:resetStarResearches:
     +m:setInstalledLevel:ResearchType,int,boolean
     -m:setup:
     +m:startResearching:Research,boolean
     -m:test:
     +m:tryStartResearching:Research,boolean,StartResearchingException
     +m:updateAfforableResearchesCount:
     +m:updateAndValidateStarBranch:
    }
    >c:ResourceManager{
     -c:Serializer
     -x:
     +f:SHORT_RESOURCE_ALIASES
     +m:getColor:ResourceType
     +m:getGainedCountStatistic:ResourceType
     +m:getName:ResourceType
    }
    >c:ScreenManager{
     >c:ScreenManagerListener{
      +z
      +m:screenChanged:
     }
     -c:Serializer
     -x:
     +m:addListener:ScreenManagerListener
     -m:dispose:
     +m:getCurrentScreen:
     +m:goToAboutScreen:
     +m:goToAccountSettingsScreen:
     +m:goToCrashReportScreen:String,String,String,String
     +m:goToCustomMapSelectScreen:
     +m:goToHotkeyEditorScreen:
     +m:goToLanguageSelectScreen:
     +m:goToLevelSelectScreen:
     +m:goToLevelSelectScreenShowLevel:BasicLevel
     +m:goToLoadingScreen:GameSyncLoader
     +m:goToMainMenu:
     +m:goToMainMenuJustLaunched:boolean
     +m:goToMapEditorScreenBasicLevel:BasicLevel
     +m:goToMapEditorScreenUserMap:UserMap
     +m:goToMoneyScreen:
     +m:goToResearchesScreen:
     +m:goToResearchesScreenFocusOnResearch:ResearchType
     +m:goToSettingsScreen:
     +m:goToSettingsScreenAndScroll:float
     +m:goToSimulationScreen:
     +m:goToStatisticsScreen:
     +m:setNoScreen:
     +m:setScreen:Screen
     +m:startNewBasicLevel:BasicLevel,SelectedAbilitiesConfiguration
     +m:startNewDailyLevel:DailyQuestLevel
     +m:startNewLevelWithAbilitySelection:GameMode,String
     +m:startNewUserLevel:UserMap,SelectedAbilitiesConfiguration
    }
    -c:ScriptManager
    -c:SecretCodeManager
    >c:SettingsManager{
     >c:SettingsManagerListener{
      >c:SettingsManagerListenerAdapter{
       +m:customValueChanged:CustomValueType,double
       +m:dynamicSettingsChanged:
       +m:settingsChanged:
      }
      +z
      +m:customValueChanged:CustomValueType,double
      +m:dynamicSettingsChanged:
      +m:settingsChanged:
     }
     >c:CustomValueType{
      +f:BACKGROUND_ENABLED
      +f:BETA_ITEMS_GIVEN_1_9_0
      +f:BUG_REPORTS_ENABLED
      +f:CAMERA_SHAKE_ENABLED
      +f:CAMERA_TOOLS_ENABLED
      +f:COLORBLIND_MODE
      +f:CORE_HINT_SHOWN
      +f:DAMAGE_PARTICLES_ENABLED
      +f:DAMAGE_PARTICLES_MORE
      +f:DBG_ALWAYS_DRAW_TILE_EXTRAS
      +f:DBG_BETA_ITEMS_ISSUE_TS
      +f:DBG_COLLISIONS
      +f:DBG_CONSOLE_DISABLED
      +f:DBG_CONSOLE_LINE_COUNT
      +f:DBG_DIRTY_TILES
      +f:DBG_DISABLE_ADDITIVE_BLENDING
      +f:DBG_DISABLE_PATH_RENDERING
      +f:DBG_DISABLE_TILE_HOVERING
      +f:DBG_DISABLE_UI_TOUCH_LOG
      +f:DBG_DRAW_BUILDING_INFO
      +f:DBG_DRAW_CURSOR_POS
      +f:DBG_DRAW_ENEMIES_AABB
      +f:DBG_DRAW_ENEMIES_COUNT_AABB
      +f:DBG_DRAW_ENEMIES_INFO
      +f:DBG_DRAW_ENEMY_PATHS
      +f:DBG_DRAW_PATHFINDING
      +f:DBG_DRAW_PROBLEMATIC_PROJECTILES
      +f:DBG_DRAW_TILE_INFO
      +f:DBG_DRAW_TILE_POS
      +f:DBG_DRAW_TOWER_XP
      +f:DBG_DRAW_UNITS_BBOX
      +f:DBG_PERFORMANCE_SURVEY_REQUESTED
      +f:DBG_PERFORMANCE_SURVEY_SUBMITTED
      +f:DBG_PRINT_FULL_LUA_STACKTRACES
      +f:DBG_RAYCASTS
      +f:DBG_SHOW_FPS
      +f:DBG_SHOW_TILE_COORDINATES_IN_MENU
      +f:DBG_SIMULATE_VISIBLE_DISPLAY_FRAME
      +f:DBG_SYNC_VALIDATION
      +f:DBG_VIEWPORT_CULLING
      +f:DEBUG_DETAILED_MODE
      +f:DEBUG_MODE
      +f:DOUBLE_GAIN_DISABLED_MANUALLY
      +f:DPS_CHART_ENABLED
      +f:DRAW_TOWER_TARGET
      +f:ENABLE_PAUSE_AD_ICON
      +f:ENABLE_REWARDING_ADS
      +f:ENDLESS_LEADERBOARD_HINT_SHOWN
      +f:ENDLESS_MODE_DIFFICULTY
      +f:EXPLOSIONS_DRAWING
      +f:FLYING_COINS_ENABLED
      +f:GL3ASWN
      +f:GRAPHICS_INTERPOLATION_ENABLED
      +f:IGNORE_MAP_MUSIC
      +f:INSTANT_AUTO_WAVE_CALL
      +f:INSTANT_HOLD_BUTTON_ON_RMB
      +f:LARGE_FONTS_ENABLED
      +f:LAST_AUTO_SHOWN_NEWS_ID
      +f:LIVE_LEADERBOARDS
      +f:LOOT_ICONS_ENABLED
      +f:MULTITHREADING
      +f:MUSIC_CACHE_MAX_SIZE
      +f:MUSIC_SPECTRUM_ENABLED
      +f:MUSIC_VOLUME
      +f:PARTICLES_DRAWING
      +f:PARTICLE_COUNT
      +f:PERSONALIZED_ADS
      +f:PERSONALIZED_ADS_CONSENT_CONFIRMED
      +f:POSTPROCESSING
      +f:PP_CLEAN_DETAILED_MODE
      +f:PP_EFFECTS_SCALE
      +f:PP_GRAPHICS_SCALE
      +f:PREMIUM_STATUS_DISABLED_MANUALLY
      +f:PROJECTILES_DRAWING
      +f:PROJECTILE_TRAILS_DRAWING
      +f:SEND_NOTIFICATIONS
      +f:SHOOTING_SOUNDS_VOLUME
      +f:SHOW_BONUS_SELECTION_IMMEDIATELY
      +f:SLOW_MOTION_PAUSE
      +f:SMOOTH_MUSIC
      +f:SOUND_VOLUME
      +f:STAINS_ENABLED
      +f:STATE_AUTO_SAVE_INTERVAL
      +f:STATE_EDITOR_ENABLED
      +f:STATISTICS_CHART_ENABLED
      +f:THREE_DEE_MODELS_ENABLED
      +f:TOUCHES_STOP_CAMERA_SCENARIOS
      +f:TT_MODIFIER_TAB_SHOWN
      +f:UI_ANIMATIONS_ENABLED
      +f:UI_DETAILED_MODE_ENABLED
      +f:UI_HOT_KEY_HINTS
      +f:UI_LIVE_LEADERBOARDS_VISIBLE
      +f:UI_QUEST_LIST_VISIBLE
      +f:UI_SCALE
      +f:UI_STATISTICS_CHART_VISIBLE
      +f:UNLOCK_ALL_LOCALES
      +f:values
      +m:valueOf:String
      +m:values:
     }
     -c:DynamicSetting
     >c:HotkeyAction{
      +f:ABILITY_1
      +f:ABILITY_2
      +f:ABILITY_3
      +f:ABILITY_4
      +f:ABILITY_5
      +f:ABILITY_6
      +f:AIM_MODE_SWITCH_NEXT
      +f:AIM_MODE_SWITCH_PREVIOUS
      +f:BUILD_MINER_INFIAR
      +f:BUILD_MINER_MATRIX
      +f:BUILD_MINER_SCALAR
      +f:BUILD_MINER_TENSOR
      +f:BUILD_MINER_VECTOR
      +f:BUILD_MODIFIER_ATTACK_SPEED
      +f:BUILD_MODIFIER_BALANCE
      +f:BUILD_MODIFIER_BOUNTY
      +f:BUILD_MODIFIER_DAMAGE
      +f:BUILD_MODIFIER_EXPERIENCE
      +f:BUILD_MODIFIER_MINING_SPEED
      +f:BUILD_MODIFIER_POWER
      +f:BUILD_MODIFIER_SEARCH
      +f:BUILD_TOWER_AIR
      +f:BUILD_TOWER_BASIC
      +f:BUILD_TOWER_BLAST
      +f:BUILD_TOWER_CANNON
      +f:BUILD_TOWER_CRUSHER
      +f:BUILD_TOWER_FLAMETHROWER
      +f:BUILD_TOWER_FREEZING
      +f:BUILD_TOWER_GAUSS
      +f:BUILD_TOWER_LASER
      +f:BUILD_TOWER_MINIGUN
      +f:BUILD_TOWER_MISSILE
      +f:BUILD_TOWER_MULTISHOT
      +f:BUILD_TOWER_SNIPER
      +f:BUILD_TOWER_SPLASH
      +f:BUILD_TOWER_TESLA
      +f:BUILD_TOWER_VENOM
      +f:CALL_WAVE
      +f:PANIC
      +f:PAUSE_GAME
      +f:SELL_BUILDING
      +f:SPEED_DOWN
      +f:SPEED_UP
      +f:SWITCH_DRAW_MODE
      +f:TOGGLE_AUTO_WAVE_CALL
      +f:TOGGLE_LEADERBOARD
      +f:TOGGLE_QUEST_LIST
      +f:TOGGLE_STATS_PANE
      +f:TOGGLE_TILE_MENU
      +f:TOGGLE_TOWER_ENABLED
      +f:TOWER_ABILITY_1
      +f:TOWER_ABILITY_2
      +f:TOWER_ABILITY_3
      +f:TOWER_ABILITY_4
      +f:TOWER_ABILITY_5
      +f:TOWER_ABILITY_6
      +f:TOWER_ABILITY_ALL_1
      +f:TOWER_ABILITY_ALL_2
      +f:TOWER_ABILITY_ALL_3
      +f:TOWER_ABILITY_ALL_4
      +f:TOWER_ABILITY_ALL_5
      +f:TOWER_ABILITY_ALL_6
      +f:UPGRADE_ALL_BUILDINGS
      +f:UPGRADE_BUILDING
      +f:ZOOM_1X
      +f:ZOOM_FIT_MAP
      +f:values
      +m:valueOf:String
      +m:values:
     }
     -c:InitConfig
     -c:Serializer
     -x:
     +f:DEFAULT_HOT_KEYS
     +m:getBestFullscreenMode:int,int
     +m:getBestFullscreenModeWithPrefDimensions:int,int,int,int
     +m:getGameSessionFingerprint:String,String
     +m:addListener:SettingsManagerListener
     +m:cvdFriendlyColors:
     +m:getBoolCustomValue:CustomValueType
     +m:getCustomValue:CustomValueType
     +m:getDefaultHotKey:HotkeyAction
     -m:getDynamicSetting:DynamicSetting
     +m:getHoldingHotKeys:
     +m:getHotKey:HotkeyAction
     +m:getHotKeyActions:IntArray
     +m:getHotKeyName:HotkeyAction
     +m:getHotkeyGroupTitle:HotkeyAction
     +m:getHotkeysJustPressed:
     +m:getScaledViewportHeight:
     +m:isBugReportsEnabled:
     +m:isDefaultHotKey:HotkeyAction
     +m:isEscButtonJustPressed:
     +m:isExplosionsDrawing:
     +m:isFlyingCoinsEnabled:
     +m:isHotkeyJustPressed:HotkeyAction
     +m:isInDebugDetailedMode:
     +m:isInDebugMode:
     +m:isInstantAutoWaveCallEnabled:
     +m:isLargeFontsEnabled:
     +m:isMusicEnabled:
     +m:isParticlesDrawing:
     +m:isProjectileTrailsDrawing:
     +m:isProjectilesDrawing:
     +m:isSecretCodesEnabled:
     +m:isSoundEnabled:
     +m:isStainsEnabled:
     +m:isThreeDeeModelsEnabled:
     +m:isUiAnimationsEnabled:
     -m:preRender:float
     +m:removeListener:SettingsManagerListener
     +m:setBoolCustomValue:CustomValueType,boolean
     +m:setBugReportsEnabled:boolean
     +m:setCustomValue:CustomValueType,double
     +m:setDebugDetailedMode:boolean
     +m:setDebugMode:boolean
     +m:setExplosionsDrawing:boolean
     +m:setFlyingCoinsEnabled:boolean
     +m:setHotKey:HotkeyAction,int[]
     +m:setInstantAutoWaveCallEnabled:boolean
     +m:setLargeFontsEnabled:boolean
     +m:setMusicVolume:double
     +m:setParticlesDrawing:boolean
     +m:setProjectileTrailsDrawing:boolean
     +m:setProjectilesDrawing:boolean
     +m:setSoundVoulme:double
     +m:setStainsEnabled:boolean
     +m:setThreeDeeModelsEnabled:boolean
     +m:setUiAnimationsEnabled:boolean
     -m:setup:
     +m:unsetCustomValue:CustomValueType
    }
    >c:ShapeManager{
     >c:Factories{
      -x:
      +f:BULLET_SMOKE_MULTI_LINE
      +f:CHAIN_LIGHTNING
      +f:CIRCLE
      +f:MULTI_LINE
      +f:PIE_CHART
      +f:RANGE_CIRCLE
      +f:STRAIGHT_MULTI_LINE
      +f:TRAIL_MULTI_LINE
     }
     -c:Serializer
     -x:
     +f:F
     -m:dispose:
     +m:getFactory:ShapeType
     -m:setup:
    }
    >c:SoundManager{
     >c:PlayingSoundStat{
      +x:
      +f:durationLeft
      +f:type
     }
     -c:Serializer
     -x:
     +f:playingSoundStats
     +f:soundsToPlay
     +m:getRarity:RarityType
     +m:playRarity:RarityType
     +m:playStatic:StaticSoundType
     +m:playStaticParameterized:StaticSoundType,float,float,float,boolean
    }
    >c:StatisticsManager{
     -c:Serializer
     -x:
     +m:formatStatisticsValue:StatisticsType,double
     +m:getAllTime:StatisticsType
     +m:getMaxOneGame:StatisticsType
     +m:getStatisticsTitle:StatisticsType
     +m:getTimeSpentInGameSinceStart:
     +m:registerDelta:StatisticsType,double
     +m:registerMaxOneGame:StatisticsType,double
     +m:registerValue:StatisticsType,double
    }
    >c:TileManager{
     >c:Factories{
      +x:
      +f:BOSS
      +f:CORE
      +f:DUMMY
      +f:EQUALIZER
      +f:GAME_VALUE
      +f:PLATFORM
      +f:QUAD
      +f:ROAD
      +f:SCRIPT
      +f:SOURCE
      +f:SPAWN
      +f:TARGET
      +f:XM_MUSIC_TRACK
     }
     -c:Serializer
     -x:
     +f:F
     +m:createRandomTile:float,RandomXS128,InventoryStatistics
     +m:createTileFromJson:JsonValue
     +m:createTileFromJsonString:String
     -m:dispose:
     +m:getFactory:TileType
     +m:getRoadTexture:Tile,Tile,Tile,Tile
     -m:setup:
    }
    >c:TowerManager{
     >c:Factories{
      +x:
      +f:AIR
      +f:BASIC
      +f:BLAST
      +f:CANNON
      +f:CRUSHER
      +f:FLAMETHROWER
      +f:FREEZING
      +f:GAUSS
      +f:LASER
      +f:MINIGUN
      +f:MISSILE
      +f:MULTISHOT
      +f:SNIPER
      +f:SPLASH
      +f:TESLA
      +f:VENOM
     }
     -c:Serializer
     >c:TowerStatConfig{
      +x:
      +f:gameValueMultipliers
      +f:maxValue
      +f:minValue
      +f:pwrFactor
      +f:pwrPowerFactor
      +f:rounding
      +f:unique
      +f:values
      +m:toString:
     }
     -x:
     +f:STAT_ROUNDING_CEIL
     +f:STAT_ROUNDING_FLOOR
     +f:STAT_ROUNDING_MIDDLE
     +f:STAT_ROUNDING_NONE
     +f:F
     +f:SHORT_TOWER_ALIASES
     +f:abilityAvailableParticleEffectPool
     +f:canTowerAttackEnemy
     +f:highlightParticles
     +f:lvlUpParticles
     +f:towerEnemyDamageMultiplier
     +f:upgradeParticles
     +m:clampStat:TowerType,TowerStatType,float
     -m:dispose:
     +m:fromJson:JsonValue
     +m:getAimStrategyColor:AimStrategy
     +m:getAimStrategyIcon:AimStrategy
     +m:getAimStrategyIconAlias:AimStrategy
     +m:getAimStrategyName:AimStrategy
     +m:getBuiltStatisticType:TowerType
     +m:getDamageDealtStatisticType:TowerType
     +m:getDescription:TowerType
     +m:getEnemiesKilledStatisticsType:TowerType
     +m:getExperienceGenerationGameValueType:TowerType
     +m:getExperienceMultiplierGameValueType:TowerType
     +m:getFactory:TowerType
     +m:getGeneralizedTowerStatColor:GeneralizedTowerStatType
     +m:getGeneralizedTowerStatName:GeneralizedTowerStatType
     +m:getMaxExpLevelGameValueType:TowerType
     +m:getMaxUpgradeLevelGameValueType:TowerType
     +m:getMoneySpentStatisticType:TowerType
     +m:getPowerfulAbilityGameValueType:TowerType
     +m:getPplAfter10GameValueType:TowerType
     +m:getPplTill10GameValueType:TowerType
     +m:getPriceGameValueType:TowerType
     +m:getSoldStatisticType:TowerType
     +m:getStartingLevelGameValueType:TowerType
     +m:getStartingPwrGameValueType:TowerType
     +m:getStatBarCoeff:TowerStatType,float,float
     +m:getStatConfig:TowerType,TowerStatType
     +m:getStatFromConfig:TowerType,TowerStatType,int,int,GameValueProvider
     +m:getStatTypes:TowerType
     +m:getTitle:TowerType
     +m:getTowerGameValueType:TowerType
     +m:getUniqueStatDescription:TowerType
     +m:getUpgradePrice:TowerType,int,GameValueProvider
     +m:getUpgradePriceGameValueType:TowerType
     +m:getUpgradePriceMultiplier:TowerType
     +m:getUpgradedStatisticType:TowerType
     +m:hasStat:TowerType,TowerStatType
     +m:reloadTowerStats:
     -m:setup:
    }
    >c:TowerStatManager{
     -c:Serializer
     >c:TowerStat{
      +x:
      +f:unitsAlias
      +m:getColor:
      +m:getFormattedValue:float,boolean
      +m:getIconDrawableAlias:
      +m:getName:
      +m:getType:
      +m:isVisible:
      +m:setVisible:boolean
     }
     -x:
     +m:getInstance:TowerStatType
     -m:setup:
     -m:test:
    }
    >c:TriggeredActionManager{
     -c:Serializer
     -x:
     -m:dispose:
     +m:generateIcon:TriggeredActionType,float,Color
     +m:getTitleAlias:TriggeredActionType
     +m:perform:GameSystemProvider,TriggeredActionType,float
     -m:postRender:float
     -m:preRender:float
     -m:setup:
     -m:test:
    }
    >c:TrophyManager{
     -c:Serializer
     >c:TrophyConfig{
      +f:gameValues
      +f:type
      +m:getIconTexture:
      +m:getTitle:
      +m:getWhiteTexture:
      +m:isReceived:
     }
     -x:
     +m:getConfig:TrophyType
     +m:getConfigs:
     +m:getHowToObtainHint:TrophyType
     +m:getReceivedTrophies:
     +m:renderPreviews:String,int,float
     -m:setup:
     -m:test:
    }
    >c:UiManager{
     >c:UiComponent{
      >c:Adapter{
       +m:dispose:
       +m:isPersistent:
       +m:postRender:float
       +m:preRender:float
      }
      +z
      +m:hide:
      +m:isPersistent:
      +m:postRender:float
      +m:preRender:float
     }
     >c:MainUiLayer{
      +f:OVERLAY
      +f:SCREEN
      +f:SHARED_COMPONENTS
      +f:values
      +m:valueOf:String
      +m:values:
     }
     -c:Serializer
     >c:UiLayer{
      +f:followVisibleFrame
      +f:ignoreSafeMargin
      +f:ignoreVisibleFrame
      +f:mainUiLayer
      +f:name
      +f:userdata
      +f:zIndex
      +m:getTable:
     }
     -x:
     +f:itemCellFlashParticles
     +f:itemCellShapes
     +f:layers
     +f:mainLayerGroups
     +f:stage
     +f:viewport
     +m:addHighlight:Actor
     +m:addLayer:MainUiLayer,int,String
     +m:addLayerIgnoreSafeArea:MainUiLayer,int,String,boolean
     +m:addWindow:Window
     -m:dispose:
     +m:disposeComponent:Class
     +m:dumpActorsHierarchy:Group,int
     +m:findActor:String
     +m:findDuplicateActorNames:
     +m:getActorLayer:Actor
     +m:getComponent:Class
     +m:getItemCellRarityCoat:RarityType,int
     +m:getRegularLayerWidth:
     +m:getScreenHeight:
     +m:getScreenSafeMargin:
     +m:getScreenWidth:
     +m:getTextInput:TextInputListener,String,String,String
     +m:getWindowsLayer:
     +m:hideAllComponents:
     +m:isComponentInit:Class
     +m:isStageKeyPressed:int
     -m:preRender:float
     +m:rebuildLayers:
     +m:removeAllHighlights:
     +m:removeHighlight:HighlightActor
     +m:removeLayer:UiLayer
     -m:render:float
     +m:runOnStageAct:Runnable
     +m:runOnStageActOnce:Runnable
     +m:setAsInputHandler:
     +m:setLogTouchDownsEnabled:boolean
     -m:setup:
     +m:updateLayersYAccordingToVisibleFrame:
    }
    >c:UnitManager{
     >c:Factories{
      +x:
      +f:BALL_LIGHTNING
      +f:DISORIENTED
      +f:ICE_FIELD
      +f:MICROGUN
      +f:MINE
      +f:SNOWBALL
     }
     -c:Serializer
     -x:
     +f:F
     +m:getFactory:UnitType
     -m:setup:
    }
    >c:UserMapManager{
     -c:Serializer
     -x:
     +m:addUserMap:String
     +m:getDefaultBosses:
     +m:getMaxMapSize:
     +m:getUserMap:String
     +m:getUserMaps:
     +m:isMapEditorAvailable:
     +m:prestigeSellMap:MapPrestigeConfig
     +m:removeUserMap:String
     +m:rename:UserMap,String
    }
   }
   >p:miners{
    >c:InfiarMiner{
     >c:InfiarMinerFactory{
      +x:
      +m:canMineResource:ResourceType
      +m:create:
      +m:getBaseBuildPrice:GameValueProvider
      +m:getBaseMiningSpeed:GameValueProvider
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float,float,float,float,DrawMode
     +m:getBaseUpgradePrice:int
    }
    >c:MatrixMiner{
     >c:MatrixMinerFactory{
      +x:
      +m:canMineResource:ResourceType
      +m:create:
      +m:getBaseBuildPrice:GameValueProvider
      +m:getBaseMiningSpeed:GameValueProvider
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float,float,float,float,DrawMode
     +m:getBaseUpgradePrice:int
    }
    >c:ScalarMiner{
     >c:ScalarMinerFactory{
      +x:
      +m:canMineResource:ResourceType
      +m:create:
      +m:getBaseBuildPrice:GameValueProvider
      +m:getBaseMiningSpeed:GameValueProvider
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float,float,float,float,DrawMode
     +m:getBaseUpgradePrice:int
    }
    >c:TensorMiner{
     >c:TensorMinerFactory{
      +x:
      +m:canMineResource:ResourceType
      +m:create:
      +m:getBaseBuildPrice:GameValueProvider
      +m:getBaseMiningSpeed:GameValueProvider
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float,float,float,float,DrawMode
     +m:getBaseUpgradePrice:int
    }
    >c:VectorMiner{
     >c:VectorMinerFactory{
      +x:
      +m:canMineResource:ResourceType
      +m:create:
      +m:getBaseBuildPrice:GameValueProvider
      +m:getBaseMiningSpeed:GameValueProvider
      +m:getTexture:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float,float,float,float,DrawMode
     +m:getBaseUpgradePrice:int
    }
   }
   >p:modifiers{
    >p:processors{
     >c:BountyModifierProcessor{
      -c:OnWaveComplete
      +x:
      -m:read:Kryo,Input
      +m:setRegistered:GameSystemProvider
      +m:setUnregistered:
      -m:write:Kryo,Output
     }
    }
    >c:AttackSpeedModifier{
     >c:AttackSpeedModifierFactory{
      +x:
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     +m:connectsToMiners:
    }
    >c:BalanceModifier{
     >c:BalanceModifierFactory{
      +x:
      +f:orbTexture
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:setupAssets:
     }
     >c:Mode{
      +f:BALANCE
      +f:EVOLVE
      +f:values
      +m:valueOf:String
      +m:values:
     }
     >c:NeighbourXpConfig{
      +x:
      +m:reset:
     }
     +f:MAX_LEVEL
     +f:SPEED_BY_LEVEL
     +f:XP_FOR_LEVEL
     +f:mode
     +m:connectsToMiners:
     +m:customButtonAction:int,int
     +m:drawBatch:Batch,float,DrawMode
     +m:fillModifierMenu:Group,ObjectMap
     +m:getLevel:
     +m:getSpeed:
     +m:getXpEvolveRequirement:
     +m:hasCustomButton:
     +m:isCustomButtonNeedMapPoint:
     -m:read:Kryo,Input
     +m:setLevel:int
     +m:update:float
     +m:updateCustomButton:ComplexButton,boolean
     -m:write:Kryo,Output
    }
    >c:BountyModifier{
     >c:BountyModifierFactory{
      +x:
      +m:canBePlacedNear:ModifierType,GameValueProvider
      +m:create:
      +m:createProcessor:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     +f:ABILITY_BOOST_MULTIPLIER
     +f:boostedByAbility
     +f:coinsGained
     +m:connectsToMiners:
     +m:drawBatch:Batch,float,DrawMode
     +m:fillModifierMenu:Group,ObjectMap
     -m:read:Kryo,Input
     +m:removedFromMap:
     -m:write:Kryo,Output
    }
    >c:DamageModifier{
     >c:DamageModifierFactory{
      +x:
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     +m:connectsToMiners:
    }
    >c:ExperienceModifier{
     >c:ExperienceModifierFactory{
      +x:
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     -c:OnMinerResourceChange
     +f:minerActive
     +m:fillModifierMenu:Group,ObjectMap
     -m:read:Kryo,Input
     +m:setRegistered:GameSystemProvider
     +m:setUnregistered:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MiningSpeedModifier{
     >c:MiningSpeedModifierFactory{
      +x:
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     +m:createEfficiencyTable:GameSystemProvider,int
     +m:fillModifierMenu:Group,ObjectMap
    }
    >c:PowerModifier{
     >c:PowerModifierFactory{
      +x:
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     +m:connectsToMiners:
     -m:read:Kryo,Input
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:SearchModifier{
     >c:SearchModifierFactory{
      +x:
      +m:create:
      +m:getBaseTexture:
      +m:getBuildPrice:GameSystemProvider,int
      +m:getDescription:GameValueProvider
      +m:setupAssets:
     }
     +m:connectsToMiners:
    }
   }
   >p:pathfinding{
    >c:PathNode{
     +z
     +m:getTeleports:
     +m:getX:
     +m:getY:
    }
    >c:SideFunction{
     +z
     +m:position:float,Vector2
     +m:rotation:float
     +m:speedMultiplier:
    }
    >c:BezierSideFunction{
     +m:position:float,Vector2
     +m:rotation:float
     +m:speedMultiplier:
    }
    >c:HeavyPathNode{
     +x:
     +f:connections
     +f:cost
     +f:index
     +f:teleportIndices
     +f:x
     +f:y
     +m:equals:Object
     +m:hashCode:
     -m:read:Kryo,Input
     +m:setup:int,short,short,float
     +m:toLightNode:
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:LinearSideFunction{
     +m:position:float,Vector2
     +m:rotation:float
     +m:speedMultiplier:
    }
    >c:MoveDirection{
     +f:BOTTOM
     +f:CENTER
     +f:LEFT
     +f:MOVE_SIDE_BY_DIRECTIONS
     +f:RIGHT
     +f:TOP
     +f:VALUES_COUNT
     +m:assertValid:byte
     +m:getMoveSideByDirections:byte,byte
     +m:getName:byte
     +m:valueOf:String
    }
    >c:MoveSide{
     +f:BOTTOM_CENTER
     +f:BOTTOM_LEFT
     +f:BOTTOM_RIGHT
     +f:BOTTOM_TOP
     +f:CENTER_BOTTOM
     +f:CENTER_LEFT
     +f:CENTER_RIGHT
     +f:CENTER_TOP
     +f:LEFT_BOTTOM
     +f:LEFT_CENTER
     +f:LEFT_RIGHT
     +f:LEFT_TOP
     +f:REVERSE
     +f:RIGHT_BOTTOM
     +f:RIGHT_CENTER
     +f:RIGHT_LEFT
     +f:RIGHT_TOP
     +f:TOP_BOTTOM
     +f:TOP_CENTER
     +f:TOP_LEFT
     +f:TOP_RIGHT
     +f:VALUES_COUNT
     +m:areConnected:byte,byte
     +m:assertValid:byte
     +m:calculateMoveSides:PathNode,PathNode,PathNode
     +m:getName:byte
     +m:getNextNodeShift:byte
     +m:isStraightLine:byte
     +m:valueOf:String
    }
    >c:Path{
     -c:Serializer
     +x:Array
     +x:HeavyPathNode[]
     +x:DefaultGraphPath
     +x:HeavyPathNode[],byte[]
     +f:EMPTY
     +f:SIDE_FUNCTIONS
     +f:SIDE_SIMPLE_FUNCTIONS
     +m:copyWithCustomMoveSides:int[]
     +m:copyWithStartingMoveSide:byte
     +m:debugDump:
     +m:describe:
     +m:equals:Object
     +m:getByIdx:int
     +m:getByPassedTiles:float
     +m:getCount:
     +m:getLengthInTiles:
     +m:getMoveSideByIdx:int
     +m:getMoveSideByPassedTiles:float
     +m:getMoveSides:
     +m:getNodeIdxByPassedTiles:float
     +m:getNodes:
     +m:getPassedTilesDelta:float,float,int,float
     +m:getPosition:float,int,Vector2
     +m:getPositionSimpleSegmentsForGraphics:int,Array
     +m:getRotation:float,int
     +m:getSpeedMultiplier:float,int
     +m:getSpeedMultiplierByNodeIdx:int,int
     +m:hashCode:
     +m:isPassedTilesOnPath:float
     +m:passesThroughTileType:Map,TileType
    }
    >c:PathConnection{
     -c:Serializer
     +x:Array,int,int,boolean,float
     +f:cost
     +f:fromIdx
     +f:isTeleport
     +f:pathNodes
     +f:toIdx
     +m:getCost:
     +m:getFromNode:
     +m:getToNode:
    }
    >c:PathNodeWithTeleports{
     -c:Serializer
     +x:short,short,int[]
     +m:equals:Object
     +m:getTeleports:
     +m:getX:
     +m:getY:
     +m:hashCode:
    }
    >c:PathNodeWithoutTeleports{
     -c:Serializer
     +x:short,short
     +m:equals:Object
     +m:getTeleports:
     +m:getX:
     +m:getY:
     +m:hashCode:
    }
    >c:PathSegmentForRendering{
     >c:Direction{
      +f:BOTTOM
      +f:LEFT
      +f:RIGHT
      +f:TOP
      +m:valueOf:String
      +m:values:
     }
     +x:
     +f:direction
     +f:distanceFromStart
     +f:length
     +f:x1
     +f:x2
     +f:y1
     +f:y2
     +m:getDirection:float,float,float,float
    }
    >c:SharpCornerSideFunction{
     +m:position:float,Vector2
     +m:rotation:float
     +m:speedMultiplier:
    }
    >c:SideShift{
     +f:MIDDLE_SIDE_SHIFT
     +f:SIDE_SHIFTS_COUNT
     +f:SIDE_SHIFT_BY_COUNT
     +f:SIDE_SHIFT_DISTANCE
    }
   }
   >p:projectiles{
    >c:AirProjectile{
     >c:AirProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     +m:getBurnChance:
     +m:getBurnDamage:
     +m:getBurningTime:
     +m:hit:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:AirTower,Enemy,float,Vector2,float,float,float,float
     -m:write:Kryo,Output
    }
    >c:BasicProjectile{
     >c:BasicProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     +m:hit:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:Tower,Enemy,float,Vector2,float
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:BuffProjectile{
     >c:BuffProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +f:buffs
     +m:draw:Batch,float
     +m:hit:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:Enemy,Array,Vector2,float
     -m:write:Kryo,Output
    }
    >c:BulletWallProjectile{
     >c:MultishotProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:float,Vector2,Vector2,float
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:CannonProjectile{
     >c:CannonProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:Tower,Enemy,float,float,Vector2,float,int,float,float
     -m:write:Kryo,Output
    }
    >c:ChainLightningProjectile{
     >c:ChainLightningProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:applyDrawInterpolation:float
     +m:draw:Batch,float
     +m:hasReachedTarget:
     +m:isDone:
     -m:read:Kryo,Input
     +m:reset:
     +m:setup:Tower,Enemy,float,float,float,float,Vector2
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:LaserProjectile{
     >c:LaserProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +f:penetrationCount
     +m:applyDrawInterpolation:float
     +m:draw:Batch,float
     +m:getDuration:
     +m:getEndX:
     +m:getEndY:
     +m:getStartX:
     +m:getStartY:
     +m:handleCollisions:float
     +m:hasReachedTarget:
     +m:isDone:
     -m:read:Kryo,Input
     +m:reset:
     +m:setDuration:float
     +m:setEndPos:float,float
     +m:setStartPos:float,float
     +m:setUnregistered:
     +m:setup:Tower,float,float,float,float,float,float,int
     +m:stop:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MissileProjectile{
     >c:MissileProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     +m:getTower:
     -m:read:Kryo,Input
     +m:reset:
     +m:setTarget:Enemy
     +m:setUnregistered:
     +m:setup:MissileTower,Enemy,float,float,Vector2,float,float,float,float
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MultishotProjectile{
     >c:MultishotProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +f:drawScale
     +f:flyingBack
     +m:draw:Batch,float
     +m:isDone:
     +m:onDone:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:Tower,float,Vector2,Vector2,float,boolean,boolean,float
     -m:write:Kryo,Output
    }
    >c:SplashProjectile{
     >c:SplashProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +f:chainKillGeneration
     +f:hitCount
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:Tower,float,Vector2,Vector2,float
     -m:write:Kryo,Output
    }
    >c:SplinterProjectile{
     >c:SplinterProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     +m:isDone:
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:Tower,float,Vector2,Vector2,float,Color
     -m:write:Kryo,Output
    }
    >c:VenomProjectile{
     >c:VenomProjectileFactory{
      +x:
      +m:setupAssets:
     }
     +m:draw:Batch,float
     +m:hit:
     +m:multiplyDamage:float
     -m:read:Kryo,Input
     +m:reset:
     +m:setUnregistered:
     +m:setup:VenomTower,Enemy,PoisonBuff,Vector2,float
     -m:write:Kryo,Output
    }
   }
   >p:scene2d{
    >p:actions{
     >c:Actions{
      +x:
      +m:action:Class
      +m:addAction:Action
      +m:addAction:Action,Actor
      +m:addListener:EventListener,boolean
      +m:addListener:EventListener,boolean,Actor
      +m:after:Action
      +m:alpha:float
      +m:alpha:float,float
      +m:alpha:float,float,Interpolation
      +m:color:Color
      +m:color:Color,float
      +m:color:Color,float,Interpolation
      +m:delay:float
      +m:delay:float,Action
      +m:fadeIn:float
      +m:fadeIn:float,Interpolation
      +m:fadeOut:float
      +m:fadeOut:float,Interpolation
      +m:forever:Action
      +m:hide:
      +m:layout:boolean
      +m:moveBy:float,float
      +m:moveBy:float,float,float
      +m:moveBy:float,float,float,Interpolation
      +m:moveTo:float,float
      +m:moveTo:float,float,float
      +m:moveTo:float,float,float,Interpolation
      +m:moveToAligned:float,float,int
      +m:moveToAligned:float,float,int,float
      +m:moveToAligned:float,float,int,float,Interpolation
      +m:parallel:
      +m:parallel:Action
      +m:parallel:Action,Action
      +m:parallel:Action,Action,Action
      +m:parallel:Action,Action,Action,Action
      +m:parallel:Action,Action,Action,Action,Action
      +m:parallel:Action[]
      +m:removeAction:Action
      +m:removeAction:Action,Actor
      +m:removeActor:
      +m:removeActor:Actor
      +m:removeListener:EventListener,boolean
      +m:removeListener:EventListener,boolean,Actor
      +m:repeat:int,Action
      +m:rotateBy:float
      +m:rotateBy:float,float
      +m:rotateBy:float,float,Interpolation
      +m:rotateTo:float
      +m:rotateTo:float,float
      +m:rotateTo:float,float,Interpolation
      +m:run:Runnable
      +m:scaleBy:float,float
      +m:scaleBy:float,float,float
      +m:scaleBy:float,float,float,Interpolation
      +m:scaleTo:float,float
      +m:scaleTo:float,float,float
      +m:scaleTo:float,float,float,Interpolation
      +m:sequence:
      +m:sequence:Action
      +m:sequence:Action,Action
      +m:sequence:Action,Action,Action
      +m:sequence:Action,Action,Action,Action
      +m:sequence:Action,Action,Action,Action,Action
      +m:sequence:Action[]
      +m:show:
      +m:sizeBy:float,float
      +m:sizeBy:float,float,float
      +m:sizeBy:float,float,float,Interpolation
      +m:sizeTo:float,float
      +m:sizeTo:float,float,float
      +m:sizeTo:float,float,float,Interpolation
      +m:targeting:Actor,Action
      +m:timeScale:float,Action
      +m:touchable:Touchable
      +m:visible:boolean
     }
     >c:AddAction{
      +x:
      +m:act:float
      +m:getAction:
      +m:reset:
      +m:restart:
      +m:setAction:Action
     }
     >c:AddListenerAction{
      +x:
      +m:act:float
      +m:getCapture:
      +m:getListener:
      +m:reset:
      +m:setCapture:boolean
      +m:setListener:EventListener
     }
     >c:AfterAction{
      +x:
      +m:restart:
      +m:setTarget:Actor
     }
     >c:AlphaAction{
      +x:
      +m:getAlpha:
      +m:getColor:
      +m:reset:
      +m:setAlpha:float
      +m:setColor:Color
     }
     >c:ColorAction{
      +x:
      +m:getColor:
      +m:getEndColor:
      +m:reset:
      +m:setColor:Color
      +m:setEndColor:Color
     }
     >c:CountdownEventAction{
      +x:Class,int
      +m:handle:Event
     }
     >c:DelayAction{
      +x:
      +x:float
      +m:finish:
      +m:getDuration:
      +m:getTime:
      +m:restart:
      +m:setDuration:float
      +m:setTime:float
     }
     >c:DelegateAction{
      +m:act:float
      +m:getAction:
      +m:reset:
      +m:restart:
      +m:setAction:Action
      +m:setActor:Actor
      +m:setTarget:Actor
      +m:toString:
     }
     >c:EventAction{
      +m:act:float
      +m:handle:Event
      +m:isActive:
      +m:restart:
      +m:setActive:boolean
      +m:setTarget:Actor
     }
     >c:FloatAction{
      +x:
      +x:float,float
      +x:float,float,float
      +x:float,float,float,Interpolation
      +m:getEnd:
      +m:getStart:
      +m:getValue:
      +m:setEnd:float
      +m:setStart:float
      +m:setValue:float
     }
     >c:IntAction{
      +x:
      +x:int,int
      +x:int,int,float
      +x:int,int,float,Interpolation
      +m:getEnd:
      +m:getStart:
      +m:getValue:
      +m:setEnd:int
      +m:setStart:int
      +m:setValue:int
     }
     >c:LayoutAction{
      +x:
      +m:act:float
      +m:isEnabled:
      +m:setLayoutEnabled:boolean
      +m:setTarget:Actor
     }
     >c:MoveByAction{
      +x:
      +m:getAmountX:
      +m:getAmountY:
      +m:setAmount:float,float
      +m:setAmountX:float
      +m:setAmountY:float
     }
     >c:MoveToAction{
      +x:
      +m:getAlignment:
      +m:getStartX:
      +m:getStartY:
      +m:getX:
      +m:getY:
      +m:reset:
      +m:setAlignment:int
      +m:setPosition:float,float
      +m:setPosition:float,float,int
      +m:setStartPosition:float,float
      +m:setX:float
      +m:setY:float
     }
     >c:ParallelAction{
      +x:
      +x:Action
      +x:Action,Action
      +x:Action,Action,Action
      +x:Action,Action,Action,Action
      +x:Action,Action,Action,Action,Action
      +m:act:float
      +m:addAction:Action
      +m:getActions:
      +m:reset:
      +m:restart:
      +m:setActor:Actor
      +m:toString:
     }
     >c:RemoveAction{
      +x:
      +m:act:float
      +m:getAction:
      +m:reset:
      +m:setAction:Action
     }
     >c:RemoveActorAction{
      +x:
      +m:act:float
      +m:restart:
     }
     >c:RemoveListenerAction{
      +x:
      +m:act:float
      +m:getCapture:
      +m:getListener:
      +m:reset:
      +m:setCapture:boolean
      +m:setListener:EventListener
     }
     >c:RepeatAction{
      +x:
      +f:FOREVER
      +m:finish:
      +m:getCount:
      +m:restart:
      +m:setCount:int
     }
     >c:RotateByAction{
      +x:
      +m:getAmount:
      +m:setAmount:float
     }
     >c:RotateToAction{
      +x:
      +x:boolean
      +m:getRotation:
      +m:isUseShortestDirection:
      +m:setRotation:float
      +m:setUseShortestDirection:boolean
     }
     >c:RunnableAction{
      +x:
      +m:act:float
      +m:getRunnable:
      +m:reset:
      +m:restart:
      +m:run:
      +m:setRunnable:Runnable
     }
     >c:ScaleByAction{
      +x:
      +m:getAmountX:
      +m:getAmountY:
      +m:setAmount:float
      +m:setAmount:float,float
      +m:setAmountX:float
      +m:setAmountY:float
     }
     >c:ScaleToAction{
      +x:
      +m:getX:
      +m:getY:
      +m:setScale:float
      +m:setScale:float,float
      +m:setX:float
      +m:setY:float
     }
     >c:SequenceAction{
      +x:
      +x:Action
      +x:Action,Action
      +x:Action,Action,Action
      +x:Action,Action,Action,Action
      +x:Action,Action,Action,Action,Action
      +m:act:float
      +m:restart:
     }
     >c:SizeByAction{
      +x:
      +m:getAmountHeight:
      +m:getAmountWidth:
      +m:setAmount:float,float
      +m:setAmountHeight:float
      +m:setAmountWidth:float
     }
     >c:SizeToAction{
      +x:
      +m:getHeight:
      +m:getWidth:
      +m:setHeight:float
      +m:setSize:float,float
      +m:setWidth:float
     }
     >c:TemporalAction{
      +m:act:float
      +m:finish:
      +m:getDuration:
      +m:getInterpolation:
      +m:getTime:
      +m:isComplete:
      +m:isReverse:
      +m:reset:
      +m:restart:
      +m:setDuration:float
      +m:setInterpolation:Interpolation
      +m:setReverse:boolean
      +m:setTime:float
     }
     >c:TimeScaleAction{
      +x:
      +m:getScale:
      +m:setScale:float
     }
     >c:TouchableAction{
      +x:
      +m:act:float
      +m:getTouchable:
      +m:setTouchable:Touchable
     }
     >c:VisibleAction{
      +x:
      +m:act:float
      +m:isVisible:
      +m:setVisible:boolean
     }
    }
    >p:ui{
     >c:Button{
      >c:ButtonStyle{
       +x:
       +x:ButtonStyle
       +x:Drawable,Drawable,Drawable
       +f:checked
       +f:checkedDown
       +f:checkedFocused
       +f:checkedOffsetX
       +f:checkedOffsetY
       +f:checkedOver
       +f:disabled
       +f:down
       +f:focused
       +f:over
       +f:pressedOffsetX
       +f:pressedOffsetY
       +f:unpressedOffsetX
       +f:unpressedOffsetY
       +f:up
      }
      +x:
      +x:Drawable
      +x:ButtonStyle
      +x:Actor,ButtonStyle
      +x:Drawable,Drawable
      +x:Drawable,Drawable,Drawable
      +m:draw:Batch,float
      +m:getButtonGroup:
      +m:getClickListener:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getStyle:
      +m:isChecked:
      +m:isDisabled:
      +m:isOver:
      +m:isPressed:
      +m:setChecked:boolean
      +m:setDisabled:boolean
      +m:setProgrammaticChangeEvents:boolean
      +m:setStyle:ButtonStyle
      +m:toggle:
     }
     >c:ButtonGroup{
      +x:
      +x:Button[]
      +m:add:Button
      +m:add:Button[]
      +m:clear:
      +m:getAllChecked:
      +m:getButtons:
      +m:getChecked:
      +m:getCheckedIndex:
      +m:remove:Button
      +m:remove:Button[]
      +m:setChecked:String
      +m:setMaxCheckCount:int
      +m:setMinCheckCount:int
      +m:setUncheckLast:boolean
      +m:uncheckAll:
     }
     >c:Cell{
      +x:
      +m:defaults:
      +m:align:int
      +m:bottom:
      +m:center:
      +m:clearActor:
      +m:colspan:int
      +m:expand:
      +m:expand:boolean,boolean
      +m:expand:int,int
      +m:expandX:
      +m:expandY:
      +m:fill:
      +m:fill:boolean
      +m:fill:boolean,boolean
      +m:fill:float,float
      +m:fillX:
      +m:fillY:
      +m:getActor:
      +m:getActorHeight:
      +m:getActorWidth:
      +m:getActorX:
      +m:getActorY:
      +m:getAlign:
      +m:getColspan:
      +m:getColumn:
      +m:getComputedPadBottom:
      +m:getComputedPadLeft:
      +m:getComputedPadRight:
      +m:getComputedPadTop:
      +m:getExpandX:
      +m:getExpandY:
      +m:getFillX:
      +m:getFillY:
      +m:getMaxHeight:
      +m:getMaxHeightValue:
      +m:getMaxWidth:
      +m:getMaxWidthValue:
      +m:getMinHeight:
      +m:getMinHeightValue:
      +m:getMinWidth:
      +m:getMinWidthValue:
      +m:getPadBottom:
      +m:getPadBottomValue:
      +m:getPadLeft:
      +m:getPadLeftValue:
      +m:getPadRight:
      +m:getPadRightValue:
      +m:getPadTop:
      +m:getPadTopValue:
      +m:getPadX:
      +m:getPadY:
      +m:getPrefHeight:
      +m:getPrefHeightValue:
      +m:getPrefWidth:
      +m:getPrefWidthValue:
      +m:getRow:
      +m:getSpaceBottom:
      +m:getSpaceBottomValue:
      +m:getSpaceLeft:
      +m:getSpaceLeftValue:
      +m:getSpaceRight:
      +m:getSpaceRightValue:
      +m:getSpaceTop:
      +m:getSpaceTopValue:
      +m:getTable:
      +m:getUniformX:
      +m:getUniformY:
      +m:grow:
      +m:growX:
      +m:growY:
      +m:hasActor:
      +m:height:Value
      +m:height:float
      +m:isEndRow:
      +m:left:
      +m:maxHeight:Value
      +m:maxHeight:float
      +m:maxSize:Value
      +m:maxSize:Value,Value
      +m:maxSize:float
      +m:maxSize:float,float
      +m:maxWidth:Value
      +m:maxWidth:float
      +m:minHeight:Value
      +m:minHeight:float
      +m:minSize:Value
      +m:minSize:Value,Value
      +m:minSize:float
      +m:minSize:float,float
      +m:minWidth:Value
      +m:minWidth:float
      +m:pad:Value
      +m:pad:Value,Value,Value,Value
      +m:pad:float
      +m:pad:float,float,float,float
      +m:padBottom:Value
      +m:padBottom:float
      +m:padLeft:Value
      +m:padLeft:float
      +m:padRight:Value
      +m:padRight:float
      +m:padTop:Value
      +m:padTop:float
      +m:prefHeight:Value
      +m:prefHeight:float
      +m:prefSize:Value
      +m:prefSize:Value,Value
      +m:prefSize:float
      +m:prefSize:float,float
      +m:prefWidth:Value
      +m:prefWidth:float
      +m:reset:
      +m:right:
      +m:row:
      +m:setActor:Actor
      +m:setActorBounds:float,float,float,float
      +m:setActorHeight:float
      +m:setActorWidth:float
      +m:setActorX:float
      +m:setActorY:float
      +m:setTable:Table
      +m:size:Value
      +m:size:Value,Value
      +m:size:float
      +m:size:float,float
      +m:space:Value
      +m:space:Value,Value,Value,Value
      +m:space:float
      +m:space:float,float,float,float
      +m:spaceBottom:Value
      +m:spaceBottom:float
      +m:spaceLeft:Value
      +m:spaceLeft:float
      +m:spaceRight:Value
      +m:spaceRight:float
      +m:spaceTop:Value
      +m:spaceTop:float
      +m:toString:
      +m:top:
      +m:uniform:
      +m:uniform:boolean
      +m:uniform:boolean,boolean
      +m:uniformX:
      +m:uniformY:
      +m:width:Value
      +m:width:float
     }
     >c:CheckBox{
      >c:CheckBoxStyle{
       +x:
       +x:CheckBoxStyle
       +x:Drawable,Drawable,BitmapFont,Color
       +f:checkboxOff
       +f:checkboxOffDisabled
       +f:checkboxOn
       +f:checkboxOnDisabled
       +f:checkboxOnOver
       +f:checkboxOver
      }
      +x:String,CheckBoxStyle
      +m:draw:Batch,float
      +m:getImage:
      +m:getImageCell:
      +m:getStyle:
      +m:setStyle:ButtonStyle
     }
     >c:Container{
      +x:
      +x:Actor
      +m:align:int
      +m:background:Drawable
      +m:bottom:
      +m:center:
      +m:clip:
      +m:clip:boolean
      +m:draw:Batch,float
      +m:drawDebug:ShapeRenderer
      +m:fill:
      +m:fill:boolean
      +m:fill:boolean,boolean
      +m:fill:float,float
      +m:fillX:
      +m:fillY:
      +m:getActor:
      +m:getAlign:
      +m:getBackground:
      +m:getClip:
      +m:getFillX:
      +m:getFillY:
      +m:getMaxHeight:
      +m:getMaxHeightValue:
      +m:getMaxWidth:
      +m:getMaxWidthValue:
      +m:getMinHeight:
      +m:getMinHeightValue:
      +m:getMinWidth:
      +m:getPadBottom:
      +m:getPadBottomValue:
      +m:getPadLeft:
      +m:getPadLeftValue:
      +m:getPadRight:
      +m:getPadRightValue:
      +m:getPadTop:
      +m:getPadTopValue:
      +m:getPadX:
      +m:getPadY:
      +m:getPrefHeight:
      +m:getPrefHeightValue:
      +m:getPrefWidth:
      +m:getPrefWidthValue:
      +m:height:Value
      +m:height:float
      +m:hit:float,float,boolean
      +m:layout:
      +m:left:
      +m:maxHeight:Value
      +m:maxHeight:float
      +m:maxSize:Value
      +m:maxSize:Value,Value
      +m:maxSize:float
      +m:maxSize:float,float
      +m:maxWidth:Value
      +m:maxWidth:float
      +m:minHeight:Value
      +m:minHeight:float
      +m:minSize:Value
      +m:minSize:Value,Value
      +m:minSize:float
      +m:minSize:float,float
      +m:minWidth:Value
      +m:minWidth:float
      +m:pad:Value
      +m:pad:Value,Value,Value,Value
      +m:pad:float
      +m:pad:float,float,float,float
      +m:padBottom:Value
      +m:padBottom:float
      +m:padLeft:Value
      +m:padLeft:float
      +m:padRight:Value
      +m:padRight:float
      +m:padTop:Value
      +m:padTop:float
      +m:prefHeight:Value
      +m:prefHeight:float
      +m:prefSize:Value
      +m:prefSize:Value,Value
      +m:prefSize:float
      +m:prefSize:float,float
      +m:prefWidth:Value
      +m:prefWidth:float
      +m:removeActor:Actor
      +m:removeActor:Actor,boolean
      +m:removeActorAt:int,boolean
      +m:right:
      +m:setActor:Actor
      +m:setBackground:Drawable
      +m:setBackground:Drawable,boolean
      +m:setClip:boolean
      +m:setCullingArea:Rectangle
      +m:setRound:boolean
      +m:size:Value
      +m:size:Value,Value
      +m:size:float
      +m:size:float,float
      +m:top:
      +m:width:Value
      +m:width:float
     }
     >c:HorizontalGroup{
      +x:
      +m:align:int
      +m:bottom:
      +m:center:
      +m:expand:
      +m:expand:boolean
      +m:fill:
      +m:fill:float
      +m:getAlign:
      +m:getExpand:
      +m:getFill:
      +m:getPadBottom:
      +m:getPadLeft:
      +m:getPadRight:
      +m:getPadTop:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getReverse:
      +m:getRows:
      +m:getSpace:
      +m:getWrap:
      +m:getWrapReverse:
      +m:getWrapSpace:
      +m:grow:
      +m:invalidate:
      +m:layout:
      +m:left:
      +m:pad:float
      +m:pad:float,float,float,float
      +m:padBottom:float
      +m:padLeft:float
      +m:padRight:float
      +m:padTop:float
      +m:reverse:
      +m:reverse:boolean
      +m:right:
      +m:rowAlign:int
      +m:rowBottom:
      +m:rowCenter:
      +m:rowLeft:
      +m:rowRight:
      +m:rowTop:
      +m:setRound:boolean
      +m:space:float
      +m:top:
      +m:wrap:
      +m:wrap:boolean
      +m:wrapReverse:
      +m:wrapReverse:boolean
      +m:wrapSpace:float
     }
     >c:Image{
      +x:
      +x:Texture
      +x:Drawable
      +x:NinePatch
      +x:TextureRegion
      +x:Drawable,Scaling
      +x:Drawable,Scaling,int
      +m:draw:Batch,float
      +m:getAlign:
      +m:getDrawable:
      +m:getImageHeight:
      +m:getImageWidth:
      +m:getImageX:
      +m:getImageY:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:layout:
      +m:setAlign:int
      +m:setDrawable:Drawable
      +m:setScaling:Scaling
      +m:toString:
     }
     >c:ImageButton{
      >c:ImageButtonStyle{
       +x:
       +x:ButtonStyle
       +x:ImageButtonStyle
       +x:Drawable,Drawable,Drawable,Drawable,Drawable,Drawable
       +f:imageChecked
       +f:imageCheckedDown
       +f:imageCheckedOver
       +f:imageDisabled
       +f:imageDown
       +f:imageOver
       +f:imageUp
      }
      +x:Drawable
      +x:ImageButtonStyle
      +x:Drawable,Drawable
      +x:Drawable,Drawable,Drawable
      +m:draw:Batch,float
      +m:getImage:
      +m:getImageCell:
      +m:getStyle:
      +m:setStyle:ButtonStyle
      +m:toString:
     }
     >c:ImageTextButton{
      >c:ImageTextButtonStyle{
       +x:
       +x:TextButtonStyle
       +x:ImageTextButtonStyle
       +x:Drawable,Drawable,Drawable,BitmapFont
       +f:imageChecked
       +f:imageCheckedDown
       +f:imageCheckedOver
       +f:imageDisabled
       +f:imageDown
       +f:imageOver
       +f:imageUp
      }
      +x:String,ImageTextButtonStyle
      +m:draw:Batch,float
      +m:getImage:
      +m:getImageCell:
      +m:getLabel:
      +m:getLabelCell:
      +m:getStyle:
      +m:getText:
      +m:setLabel:Label
      +m:setStyle:ButtonStyle
      +m:setText:CharSequence
      +m:toString:
     }
     >c:List{
      >c:ListStyle{
       +x:
       +x:ListStyle
       +x:BitmapFont,Color,Color,Drawable
       +f:background
       +f:down
       +f:font
       +f:fontColorSelected
       +f:fontColorUnselected
       +f:over
       +f:selection
      }
      +x:ListStyle
      +m:clearItems:
      +m:draw:Batch,float
      +m:getAlignment:
      +m:getCullingArea:
      +m:getItemAt:float
      +m:getItemHeight:
      +m:getItemIndexAt:float
      +m:getItems:
      +m:getKeyListener:
      +m:getOverItem:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getPressedItem:
      +m:getSelected:
      +m:getSelectedIndex:
      +m:getSelection:
      +m:getStyle:
      +m:layout:
      +m:setAlignment:int
      +m:setCullingArea:Rectangle
      +m:setItems:Array
      +m:setItems:Object[]
      +m:setSelected:Object
      +m:setSelectedIndex:int
      +m:setSelection:ArraySelection
      +m:setStyle:ListStyle
      +m:setTypeToSelect:boolean
      +m:toString:Object
     }
     >c:ParticleEffectActor{
      -x:FileHandle,FileHandle
      -x:FileHandle,TextureAtlas
      +x:ParticleEffect,boolean
      +m:act:float
      +m:allowCompletion:
      +m:cancel:
      +m:dispose:
      +m:draw:Batch,float
      +m:getEffect:
      +m:isAutoRemove:
      +m:isResetOnStart:
      +m:isRunning:
      +m:setAutoRemove:boolean
      +m:setResetOnStart:boolean
      +m:start:
     }
     >c:ProgressBar{
      >c:ProgressBarStyle{
       +x:
       +x:ProgressBarStyle
       +x:Drawable,Drawable
       +f:background
       +f:disabledBackground
       +f:disabledKnob
       +f:disabledKnobAfter
       +f:disabledKnobBefore
       +f:knob
       +f:knobAfter
       +f:knobBefore
      }
      +x:float,float,float,boolean,ProgressBarStyle
      +m:act:float
      +m:draw:Batch,float
      +m:getMaxValue:
      +m:getMinValue:
      +m:getPercent:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getStepSize:
      +m:getStyle:
      +m:getValue:
      +m:getVisualPercent:
      +m:getVisualValue:
      +m:isAnimating:
      +m:isDisabled:
      +m:isVertical:
      +m:setAnimateDuration:float
      +m:setAnimateInterpolation:Interpolation
      +m:setDisabled:boolean
      +m:setProgrammaticChangeEvents:boolean
      +m:setRange:float,float
      +m:setRound:boolean
      +m:setStepSize:float
      +m:setStyle:ProgressBarStyle
      +m:setValue:float
      +m:setVisualInterpolation:Interpolation
      +m:updateVisualValue:
     }
     >c:ScrollPane{
      >c:ScrollPaneStyle{
       +x:
       +x:ScrollPaneStyle
       +x:Drawable,Drawable,Drawable,Drawable,Drawable
       +f:background
       +f:corner
       +f:hScroll
       +f:hScrollKnob
       +f:vScroll
       +f:vScrollKnob
      }
      +x:Actor
      +x:Actor,ScrollPaneStyle
      +m:act:float
      +m:cancel:
      +m:cancelTouchFocus:
      +m:draw:Batch,float
      +m:drawDebug:ShapeRenderer
      +m:fling:float,float,float
      +m:getActor:
      +m:getFadeScrollBars:
      +m:getMaxX:
      +m:getMaxY:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getOverscrollDistance:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getScrollBarHeight:
      +m:getScrollBarWidth:
      +m:getScrollHeight:
      +m:getScrollPercentX:
      +m:getScrollPercentY:
      +m:getScrollWidth:
      +m:getScrollX:
      +m:getScrollY:
      +m:getStyle:
      +m:getVariableSizeKnobs:
      +m:getVelocityX:
      +m:getVelocityY:
      +m:getVisualScrollPercentX:
      +m:getVisualScrollPercentY:
      +m:getVisualScrollX:
      +m:getVisualScrollY:
      +m:hit:float,float,boolean
      +m:isBottomEdge:
      +m:isDragging:
      +m:isFlinging:
      +m:isForceScrollX:
      +m:isForceScrollY:
      +m:isLeftEdge:
      +m:isPanning:
      +m:isRightEdge:
      +m:isScrollX:
      +m:isScrollY:
      +m:isScrollingDisabledX:
      +m:isScrollingDisabledY:
      +m:isTopEdge:
      +m:layout:
      +m:removeActor:Actor
      +m:removeActor:Actor,boolean
      +m:removeActorAt:int,boolean
      +m:scrollTo:float,float,float,float
      +m:scrollTo:float,float,float,float,boolean,boolean
      +m:setActor:Actor
      +m:setCancelTouchFocus:boolean
      +m:setClamp:boolean
      +m:setFadeScrollBars:boolean
      +m:setFlickScroll:boolean
      +m:setFlickScrollTapSquareSize:float
      +m:setFlingTime:float
      +m:setForceScroll:boolean,boolean
      +m:setOverscroll:boolean,boolean
      +m:setScrollBarPositions:boolean,boolean
      +m:setScrollBarTouch:boolean
      +m:setScrollPercentX:float
      +m:setScrollPercentY:float
      +m:setScrollX:float
      +m:setScrollY:float
      +m:setScrollbarsOnTop:boolean
      +m:setScrollbarsVisible:boolean
      +m:setScrollingDisabled:boolean,boolean
      +m:setSmoothScrolling:boolean
      +m:setStyle:ScrollPaneStyle
      +m:setVariableSizeKnobs:boolean
      +m:setVelocityX:float
      +m:setVelocityY:float
      +m:setupFadeScrollBars:float,float
      +m:setupOverscroll:float,float,float
      +m:updateVisualScroll:
     }
     >c:SelectBox{
      >c:SelectBoxScrollPane{
       +x:SelectBox
       +m:act:float
       +m:draw:Batch,float
       +m:getList:
       +m:getSelectBox:
       +m:hide:
       +m:show:Stage
      }
      >c:SelectBoxStyle{
       +x:
       +x:SelectBoxStyle
       +x:BitmapFont,Color,Drawable,ScrollPaneStyle,ListStyle
       +f:background
       +f:backgroundDisabled
       +f:backgroundOpen
       +f:backgroundOver
       +f:disabledFontColor
       +f:font
       +f:fontColor
       +f:listStyle
       +f:overFontColor
       +f:scrollStyle
      }
      +x:SelectBoxStyle
      +m:clearItems:
      +m:draw:Batch,float
      +m:getClickListener:
      +m:getItems:
      +m:getList:
      +m:getMaxListCount:
      +m:getMaxSelectedPrefWidth:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getScrollPane:
      +m:getSelected:
      +m:getSelectedIndex:
      +m:getSelectedPrefWidth:
      +m:getSelection:
      +m:getStyle:
      +m:hideScrollPane:
      +m:isDisabled:
      +m:isOver:
      +m:layout:
      +m:setAlignment:int
      +m:setDisabled:boolean
      +m:setItems:Array
      +m:setItems:Object[]
      +m:setMaxListCount:int
      +m:setScrollingDisabled:boolean
      +m:setSelected:Object
      +m:setSelectedIndex:int
      +m:setSelectedPrefWidth:boolean
      +m:setStyle:SelectBoxStyle
      +m:showScrollPane:
     }
     >c:Slider{
      >c:SliderStyle{
       +x:
       +x:SliderStyle
       +x:Drawable,Drawable
       +f:backgroundDown
       +f:backgroundOver
       +f:knobAfterDown
       +f:knobAfterOver
       +f:knobBeforeDown
       +f:knobBeforeOver
       +f:knobDown
       +f:knobOver
      }
      +x:float,float,float,boolean,SliderStyle
      +m:getSnapToValues:
      +m:getSnapToValuesThreshold:
      +m:getStyle:
      +m:isDragging:
      +m:isOver:
      +m:setButton:int
      +m:setSnapToValues:float,float[]
      +m:setVisualInterpolationInverse:Interpolation
      +m:setVisualPercent:float
     }
     >c:SplitPane{
      >c:SplitPaneStyle{
       +x:
       +x:Drawable
       +x:SplitPaneStyle
       +f:handle
      }
      +x:Actor,Actor,boolean,SplitPaneStyle
      +m:addActor:Actor
      +m:addActorAt:int,Actor
      +m:addActorBefore:Actor,Actor
      +m:draw:Batch,float
      +m:getMaxSplitAmount:
      +m:getMinHeight:
      +m:getMinSplitAmount:
      +m:getMinWidth:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getSplitAmount:
      +m:getStyle:
      +m:isCursorOverHandle:
      +m:isVertical:
      +m:layout:
      +m:removeActor:Actor
      +m:removeActor:Actor,boolean
      +m:removeActorAt:int,boolean
      +m:setFirstWidget:Actor
      +m:setMaxSplitAmount:float
      +m:setMinSplitAmount:float
      +m:setSecondWidget:Actor
      +m:setSplitAmount:float
      +m:setStyle:SplitPaneStyle
      +m:setVertical:boolean
     }
     >c:Stack{
      +x:
      +x:Actor[]
      +m:add:Actor
      +m:getMaxHeight:
      +m:getMaxWidth:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:invalidate:
      +m:layout:
     }
     >c:Table{
      >c:Debug{
       +f:actor
       +f:all
       +f:cell
       +f:none
       +f:table
       +m:valueOf:String
       +m:values:
      }
      >c:DebugRect{
       +x:
      }
      +x:
      +f:backgroundBottom
      +f:backgroundLeft
      +f:backgroundRight
      +f:backgroundTop
      +f:debugActorColor
      +f:debugCellColor
      +f:debugTableColor
      +m:add:
      +m:add:Actor
      +m:add:Actor[]
      +m:align:int
      +m:background:Drawable
      +m:bottom:
      +m:center:
      +m:clearChildren:boolean
      +m:clip:
      +m:clip:boolean
      +m:columnDefaults:int
      +m:debug:
      +m:debug:Debug
      +m:debugActor:
      +m:debugAll:
      +m:debugCell:
      +m:debugTable:
      +m:defaults:
      +m:draw:Batch,float
      +m:drawDebug:ShapeRenderer
      +m:getAlign:
      +m:getBackground:
      +m:getCell:Actor
      +m:getCells:
      +m:getClip:
      +m:getColumnMinWidth:int
      +m:getColumnPrefWidth:int
      +m:getColumnWidth:int
      +m:getColumns:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getPadBottom:
      +m:getPadBottomValue:
      +m:getPadLeft:
      +m:getPadLeftValue:
      +m:getPadRight:
      +m:getPadRightValue:
      +m:getPadTop:
      +m:getPadTopValue:
      +m:getPadX:
      +m:getPadY:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getRow:float
      +m:getRowHeight:int
      +m:getRowMinHeight:int
      +m:getRowPrefHeight:int
      +m:getRows:
      +m:getTableDebug:
      +m:hit:float,float,boolean
      +m:invalidate:
      +m:layout:
      +m:left:
      +m:pad:Value
      +m:pad:Value,Value,Value,Value
      +m:pad:float
      +m:pad:float,float,float,float
      +m:padBottom:Value
      +m:padBottom:float
      +m:padLeft:Value
      +m:padLeft:float
      +m:padRight:Value
      +m:padRight:float
      +m:padTop:Value
      +m:padTop:float
      +m:removeActor:Actor
      +m:removeActor:Actor,boolean
      +m:removeActorAt:int,boolean
      +m:reset:
      +m:right:
      +m:row:
      +m:setBackground:Drawable
      +m:setClip:boolean
      +m:setDebug:boolean
      +m:setRound:boolean
      +m:stack:Actor[]
      +m:top:
     }
     >c:TextArea{
      >c:TextAreaListener{
       +m:keyDown:InputEvent,int
       +m:keyTyped:InputEvent,char
      }
      +x:String,TextFieldStyle
      +f:prefSizeDependsOnContents
      +m:getCursorLine:
      +m:getCursorX:
      +m:getCursorY:
      +m:getFirstLineShowing:
      +m:getLines:
      +m:getLinesShowing:
      +m:getPrefHeight:
      +m:getSelectionBoundingBox:Rectangle
      +m:letterUnderCursor:float
      +m:moveCursorLine:int
      +m:newLineAtEnd:
      +m:setPrefRows:float
      +m:setSelection:int,int
      +m:setStyle:TextFieldStyle
     }
     >c:TextButton{
      >c:TextButtonStyle{
       +x:
       +x:TextButtonStyle
       +x:Drawable,Drawable,Drawable,BitmapFont
       +f:checkedDownFontColor
       +f:checkedFocusedFontColor
       +f:checkedFontColor
       +f:checkedOverFontColor
       +f:disabledFontColor
       +f:downFontColor
       +f:focusedFontColor
       +f:font
       +f:fontColor
       +f:overFontColor
      }
      +x:String,TextButtonStyle
      +m:draw:Batch,float
      +m:getLabel:
      +m:getLabelCell:
      +m:getStyle:
      +m:getText:
      +m:setLabel:Label
      +m:setStyle:ButtonStyle
      +m:setText:String
      +m:toString:
     }
     >c:TextField{
      >c:OnscreenKeyboard{
       +z
       +m:show:boolean
      }
      >c:TextFieldFilter{
       >c:DigitsOnlyFilter{
        +x:
        +m:acceptChar:TextField,char
       }
       +z
       +m:acceptChar:TextField,char
      }
      >c:TextFieldListener{
       +z
       +m:keyTyped:TextField,char
      }
      >c:ContextMenu{
       +m:update:
      }
      >c:DefaultOnscreenKeyboard{
       +x:
       +m:show:boolean
      }
      >c:TextFieldClickListener{
       +m:clicked:InputEvent,float,float
       +m:keyDown:InputEvent,int
       +m:keyTyped:InputEvent,char
       +m:keyUp:InputEvent,int
       +m:touchDown:InputEvent,float,float,int,int
       +m:touchDragged:InputEvent,float,float,int
       +m:touchUp:InputEvent,float,float,int,int
      }
      >c:TextFieldStyle{
       +x:
       +x:TextFieldStyle
       +x:BitmapFont,Color,Drawable,Drawable,Drawable
       +f:background
       +f:cursor
       +f:disabledBackground
       +f:disabledFontColor
       +f:focusedBackground
       +f:focusedFontColor
       +f:font
       +f:fontColor
       +f:messageFont
       +f:messageFontColor
       +f:selection
      }
      +x:String,TextFieldStyle
      +f:keyRepeatInitialTime
      +f:keyRepeatTime
      +f:replaceTabsWithSpaces
      +f:writeEnters
      +m:appendText:String
      +m:clearSelection:
      +m:copy:
      +m:cut:
      +m:draw:Batch,float
      +m:getAlignment:
      +m:getCursorPosition:
      +m:getCursorX:
      +m:getCursorY:
      +m:getDefaultInputListener:
      +m:getFocusTraversal:
      +m:getMaxLength:
      +m:getMessageText:
      +m:getOnscreenKeyboard:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getProgrammaticChangeEvents:
      +m:getSelection:
      +m:getSelectionBoundingBox:Rectangle
      +m:getSelectionStart:
      +m:getStyle:
      +m:getText:
      +m:getTextFieldFilter:
      +m:isDisabled:
      +m:isPasswordMode:
      +m:letterUnderCursor:float
      +m:next:boolean
      +m:selectAll:
      +m:setAlignment:int
      +m:setBlinkTime:float
      +m:setClipboard:Clipboard
      +m:setCursorPosition:int
      +m:setDisabled:boolean
      +m:setFocusTraversal:boolean
      +m:setMaxLength:int
      +m:setMessageText:String
      +m:setOnlyFontChars:boolean
      +m:setOnscreenKeyboard:OnscreenKeyboard
      +m:setPasswordCharacter:char
      +m:setPasswordMode:boolean
      +m:setProgrammaticChangeEvents:boolean
      +m:setSelection:int,int
      +m:setStyle:TextFieldStyle
      +m:setText:String
      +m:setTextFieldFilter:TextFieldFilter
      +m:setTextFieldListener:TextFieldListener
      +m:updateContextMenu:
     }
     >c:TextTooltip{
      >c:TextTooltipStyle{
       +x:
       +x:TextTooltipStyle
       +x:LabelStyle,Drawable
       +f:background
       +f:label
       +f:wrapWidth
      }
      +x:String,TextTooltipStyle
      +x:String,TooltipManager,TextTooltipStyle
      +m:setStyle:TextTooltipStyle
     }
     >c:Tooltip{
      +x:Actor
      +x:Actor,TooltipManager
      +m:enter:InputEvent,float,float,int,Actor
      +m:exit:InputEvent,float,float,int,Actor
      +m:getActor:
      +m:getContainer:
      +m:getManager:
      +m:hide:
      +m:mouseMoved:InputEvent,float,float
      +m:setActor:Actor
      +m:setAlways:boolean
      +m:setInstant:boolean
      +m:setTouchIndependent:boolean
      +m:touchDown:InputEvent,float,float,int,int
     }
     >c:TooltipManager{
      +x:
      +f:animations
      +f:edgeDistance
      +f:enabled
      +f:initialTime
      +f:maxWidth
      +f:offsetX
      +f:offsetY
      +f:resetTime
      +f:subsequentTime
      +m:getInstance:
      +m:enter:Tooltip
      +m:hide:Tooltip
      +m:hideAll:
      +m:instant:
      +m:touchDown:Tooltip
     }
     >c:Touchpad{
      >c:TouchpadStyle{
       +x:
       +x:TouchpadStyle
       +x:Drawable,Drawable
       +f:background
       +f:knob
      }
      +x:float,TouchpadStyle
      +m:draw:Batch,float
      +m:getKnobPercentX:
      +m:getKnobPercentY:
      +m:getKnobX:
      +m:getKnobY:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getResetOnTouchUp:
      +m:getStyle:
      +m:hit:float,float,boolean
      +m:isTouched:
      +m:layout:
      +m:setDeadzone:float
      +m:setResetOnTouchUp:boolean
      +m:setStyle:TouchpadStyle
     }
     >c:Tree{
      >c:Node{
       +m:add:Node
       +m:addAll:Array
       +m:clearChildren:
       +m:collapseAll:
       +m:expandAll:
       +m:expandTo:
       +m:findExpandedValues:Array
       +m:findNode:Object
       +m:getActor:
       +m:getChildren:
       +m:getHeight:
       +m:getIcon:
       +m:getLevel:
       +m:getParent:
       +m:getTree:
       +m:getValue:
       +m:hasChildren:
       +m:insert:int,Node
       +m:isAscendantOf:Node
       +m:isDescendantOf:Node
       +m:isExpanded:
       +m:isSelectable:
       +m:remove:
       +m:remove:Node
       +m:restoreExpandedValues:Array
       +m:setActor:Actor
       +m:setExpanded:boolean
       +m:setIcon:Drawable
       +m:setSelectable:boolean
       +m:setValue:Object
       +m:updateChildren:
      }
      >c:TreeStyle{
       +x:
       +x:TreeStyle
       +x:Drawable,Drawable,Drawable
       +f:background
       +f:minus
       +f:minusOver
       +f:over
       +f:plus
       +f:plusOver
       +f:selection
      }
      +x:TreeStyle
      +m:add:Node
      +m:clearChildren:boolean
      +m:collapseAll:
      +m:draw:Batch,float
      +m:expandAll:
      +m:findExpandedValues:Array
      +m:findNode:Object
      +m:getClickListener:
      +m:getIndentSpacing:
      +m:getNodeAt:float
      +m:getOverNode:
      +m:getOverValue:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getRootNodes:
      +m:getSelectedNode:
      +m:getSelectedValue:
      +m:getSelection:
      +m:getStyle:
      +m:getYSpacing:
      +m:insert:int,Node
      +m:invalidate:
      +m:layout:
      +m:remove:Node
      +m:restoreExpandedValues:Array
      +m:setIconSpacing:float,float
      +m:setIndentSpacing:float
      +m:setOverNode:Node
      +m:setPadding:float
      +m:setPadding:float,float
      +m:setStyle:TreeStyle
      +m:setYSpacing:float
      +m:updateRootNodes:
     }
     >c:Value{
      >c:Fixed{
       +x:float
       +m:valueOf:float
       +m:get:Actor
       +m:toString:
      }
      +f:maxHeight
      +f:maxWidth
      +f:minHeight
      +f:minWidth
      +f:prefHeight
      +f:prefWidth
      +f:zero
      +m:percentHeight:float
      +m:percentHeight:float,Actor
      +m:percentWidth:float
      +m:percentWidth:float,Actor
      +m:get:
      +m:get:Actor
     }
     >c:VerticalGroup{
      +x:
      +m:align:int
      +m:bottom:
      +m:center:
      +m:columnAlign:int
      +m:columnBottom:
      +m:columnCenter:
      +m:columnLeft:
      +m:columnRight:
      +m:columnTop:
      +m:expand:
      +m:expand:boolean
      +m:fill:
      +m:fill:float
      +m:getAlign:
      +m:getColumns:
      +m:getExpand:
      +m:getFill:
      +m:getPadBottom:
      +m:getPadLeft:
      +m:getPadRight:
      +m:getPadTop:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getReverse:
      +m:getSpace:
      +m:getWrap:
      +m:getWrapSpace:
      +m:grow:
      +m:invalidate:
      +m:layout:
      +m:left:
      +m:pad:float
      +m:pad:float,float,float,float
      +m:padBottom:float
      +m:padLeft:float
      +m:padRight:float
      +m:padTop:float
      +m:reverse:
      +m:reverse:boolean
      +m:right:
      +m:setRound:boolean
      +m:space:float
      +m:top:
      +m:wrap:
      +m:wrap:boolean
      +m:wrapSpace:float
     }
     >c:Widget{
      +x:
      +m:draw:Batch,float
      +m:getMaxHeight:
      +m:getMaxHeightValue:
      +m:getMaxWidth:
      +m:getMaxWidthValue:
      +m:getMinHeight:
      +m:getMinHeightValue:
      +m:getMinWidth:
      +m:getMinWidthValue:
      +m:getPrefHeight:
      +m:getPrefHeightValue:
      +m:getPrefWidth:
      +m:getPrefWidthValue:
      +m:invalidate:
      +m:invalidateHierarchy:
      +m:layout:
      +m:needsLayout:
      +m:pack:
      +m:setFillParent:boolean
      +m:setLayoutEnabled:boolean
      +m:setMaxHeight:Value
      +m:setMaxHeight:float
      +m:setMaxWidth:Value
      +m:setMaxWidth:float
      +m:setMinHeight:Value
      +m:setMinHeight:float
      +m:setMinWidth:Value
      +m:setMinWidth:float
      +m:setPrefHeight:Value
      +m:setPrefHeight:float
      +m:setPrefWidth:Value
      +m:setPrefWidth:float
      +m:validate:
     }
     >c:WidgetGroup{
      +x:
      +x:Actor[]
      +m:draw:Batch,float
      +m:getMaxHeight:
      +m:getMaxHeightValue:
      +m:getMaxWidth:
      +m:getMaxWidthValue:
      +m:getMinHeight:
      +m:getMinHeightValue:
      +m:getMinWidth:
      +m:getMinWidthValue:
      +m:getPrefHeight:
      +m:getPrefHeightValue:
      +m:getPrefWidth:
      +m:getPrefWidthValue:
      +m:hit:float,float,boolean
      +m:invalidate:
      +m:invalidateHierarchy:
      +m:layout:
      +m:needsLayout:
      +m:pack:
      +m:setFillParent:boolean
      +m:setLayoutEnabled:boolean
      +m:setMaxHeight:Value
      +m:setMaxHeight:float
      +m:setMaxWidth:Value
      +m:setMaxWidth:float
      +m:setMinHeight:Value
      +m:setMinHeight:float
      +m:setMinWidth:Value
      +m:setMinWidth:float
      +m:setPrefHeight:Value
      +m:setPrefHeight:float
      +m:setPrefWidth:Value
      +m:setPrefWidth:float
      +m:setWidth:float
      +m:validate:
     }
    }
    >p:utils{
     >c:Cullable{
      +z
      +m:setCullingArea:Rectangle
     }
     >c:Disableable{
      +z
      +m:isDisabled:
      +m:setDisabled:boolean
     }
     >c:Drawable{
      +z
      +m:draw:Batch,float,float,float,float
      +m:getBottomHeight:
      +m:getLeftWidth:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getRightWidth:
      +m:getTopHeight:
      +m:setBottomHeight:float
      +m:setLeftWidth:float
      +m:setMinHeight:float
      +m:setMinWidth:float
      +m:setRightWidth:float
      +m:setTopHeight:float
     }
     >c:Layout{
      +z
      +m:getMaxHeight:
      +m:getMaxWidth:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:invalidate:
      +m:invalidateHierarchy:
      +m:layout:
      +m:pack:
      +m:setFillParent:boolean
      +m:setLayoutEnabled:boolean
      +m:validate:
     }
     >c:TransformDrawable{
      +z
      +m:draw:Batch,float,float,float,float,float,float,float,float,float
     }
     >c:ActorGestureListener{
      +x:
      +x:float,float,float,float
      +m:fling:InputEvent,float,float,int
      +m:getGestureDetector:
      +m:getTouchDownTarget:
      +m:handle:Event
      +m:longPress:Actor,float,float
      +m:pan:InputEvent,float,float,float,float
      +m:panStop:InputEvent,float,float,int,int
      +m:pinch:InputEvent,Vector2,Vector2,Vector2,Vector2
      +m:tap:InputEvent,float,float,int,int
      +m:touchDown:InputEvent,float,float,int,int
      +m:touchUp:InputEvent,float,float,int,int
      +m:zoom:InputEvent,float,float
     }
     >c:ArraySelection{
      +x:Array
      +m:choose:Object
      +m:getRangeSelect:
      +m:setRangeSelect:boolean
      +m:validate:
     }
     >c:BaseDrawable{
      +x:
      +x:Drawable
      +m:draw:Batch,float,float,float,float
      +m:getBottomHeight:
      +m:getLeftWidth:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getName:
      +m:getRightWidth:
      +m:getTopHeight:
      +m:setBottomHeight:float
      +m:setLeftWidth:float
      +m:setMinHeight:float
      +m:setMinSize:float,float
      +m:setMinWidth:float
      +m:setName:String
      +m:setPadding:float,float,float,float
      +m:setRightWidth:float
      +m:setTopHeight:float
      +m:toString:
     }
     >c:ChangeListener{
      >c:ChangeEvent{
       +x:
      }
      +m:changed:ChangeEvent,Actor
      +m:handle:Event
     }
     >c:ClickListener{
      +x:
      +x:int
      +f:visualPressedDuration
      +m:cancel:
      +m:clicked:InputEvent,float,float
      +m:enter:InputEvent,float,float,int,Actor
      +m:exit:InputEvent,float,float,int,Actor
      +m:getButton:
      +m:getPressedButton:
      +m:getPressedPointer:
      +m:getTapCount:
      +m:getTapSquareSize:
      +m:getTouchDownX:
      +m:getTouchDownY:
      +m:inTapSquare:
      +m:inTapSquare:float,float
      +m:invalidateTapSquare:
      +m:isOver:
      +m:isOver:Actor,float,float
      +m:isPressed:
      +m:isVisualPressed:
      +m:setButton:int
      +m:setTapCount:int
      +m:setTapCountInterval:float
      +m:setTapSquareSize:float
      +m:setVisualPressed:boolean
      +m:touchDown:InputEvent,float,float,int,int
      +m:touchDragged:InputEvent,float,float,int
      +m:touchUp:InputEvent,float,float,int,int
     }
     >c:DragAndDrop{
      >c:Payload{
       +x:
       +m:getDragActor:
       +m:getInvalidDragActor:
       +m:getObject:
       +m:getValidDragActor:
       +m:setDragActor:Actor
       +m:setInvalidDragActor:Actor
       +m:setObject:Object
       +m:setValidDragActor:Actor
      }
      >c:Source{
       +m:drag:InputEvent,float,float,int
       +m:dragStart:InputEvent,float,float,int
       +m:dragStop:InputEvent,float,float,int,Payload,Target
       +m:getActor:
      }
      >c:Target{
       +m:drag:Source,Payload,float,float,int
       +m:drop:Source,Payload,float,float,int
       +m:getActor:
       +m:reset:Source,Payload
      }
      +x:
      +m:addSource:Source
      +m:addTarget:Target
      +m:cancelTouchFocusExcept:Source
      +m:clear:
      +m:getDragActor:
      +m:getDragPayload:
      +m:getDragSource:
      +m:getDragTime:
      +m:isDragValid:
      +m:isDragging:
      +m:removeSource:Source
      +m:removeTarget:Target
      +m:setButton:int
      +m:setCancelTouchFocus:boolean
      +m:setDragActorPosition:float,float
      +m:setDragTime:int
      +m:setKeepWithinStage:boolean
      +m:setTapSquareSize:float
      +m:setTouchOffset:float,float
     }
     >c:DragListener{
      +x:
      +m:cancel:
      +m:drag:InputEvent,float,float,int
      +m:dragStart:InputEvent,float,float,int
      +m:dragStop:InputEvent,float,float,int
      +m:getButton:
      +m:getDeltaX:
      +m:getDeltaY:
      +m:getDragDistance:
      +m:getDragStartX:
      +m:getDragStartY:
      +m:getDragX:
      +m:getDragY:
      +m:getStageTouchDownX:
      +m:getStageTouchDownY:
      +m:getTapSquareSize:
      +m:getTouchDownX:
      +m:getTouchDownY:
      +m:isDragging:
      +m:setButton:int
      +m:setDragStartX:float
      +m:setDragStartY:float
      +m:setTapSquareSize:float
      +m:touchDown:InputEvent,float,float,int,int
      +m:touchDragged:InputEvent,float,float,int
      +m:touchUp:InputEvent,float,float,int,int
     }
     >c:DragScrollListener{
      +x:ScrollPane
      +m:drag:InputEvent,float,float,int
      +m:dragStop:InputEvent,float,float,int
      +m:setPadding:float,float
      +m:setup:float,float,float,float
     }
     >c:FocusListener{
      >c:FocusEvent{
       >c:Type{
        +f:keyboard
        +f:scroll
        +m:valueOf:String
        +m:values:
       }
       +x:
       +m:getRelatedActor:
       +m:getType:
       +m:isFocused:
       +m:reset:
       +m:setFocused:boolean
       +m:setRelatedActor:Actor
       +m:setType:Type
      }
      +m:handle:Event
      +m:keyboardFocusChanged:FocusEvent,Actor,boolean
      +m:scrollFocusChanged:FocusEvent,Actor,boolean
     }
     >c:NinePatchDrawable{
      +x:
      +x:NinePatch
      +x:NinePatchDrawable
      +m:draw:Batch,float,float,float,float
      +m:draw:Batch,float,float,float,float,float,float,float,float,float
      +m:getPatch:
      +m:setPatch:NinePatch
      +m:tint:Color
     }
     >c:ScissorStack{
      +x:
      +m:calculateScissors:Camera,Matrix4,Rectangle,Rectangle
      +m:calculateScissors:Camera,float,float,float,float,Matrix4,Rectangle,Rectangle
      +m:getViewport:
      +m:peekScissors:
      +m:popScissors:
      +m:pushScissors:Rectangle
     }
     >c:Selection{
      +x:
      +m:add:Object
      +m:addAll:Array
      +m:choose:Object
      +m:clear:
      +m:contains:Object
      +m:fireChangeEvent:
      +m:first:
      +m:getLastSelected:
      +m:getMultiple:
      +m:getRequired:
      +m:getToggle:
      +m:isDisabled:
      +m:isEmpty:
      +m:items:
      +m:iterator:
      +m:notEmpty:
      +m:remove:Object
      +m:removeAll:Array
      +m:set:Object
      +m:setActor:Actor
      +m:setAll:Array
      +m:setDisabled:boolean
      +m:setMultiple:boolean
      +m:setProgrammaticChangeEvents:boolean
      +m:setRequired:boolean
      +m:setToggle:boolean
      +m:size:
      +m:toArray:
      +m:toArray:Array
      +m:toString:
     }
     >c:SpriteDrawable{
      +x:
      +x:Sprite
      +x:SpriteDrawable
      +m:draw:Batch,float,float,float,float
      +m:draw:Batch,float,float,float,float,float,float,float,float,float
      +m:getSprite:
      +m:setSprite:Sprite
      +m:tint:Color
     }
     >c:TextureRegionDrawable{
      +x:
      +x:Texture
      +x:TextureRegion
      +x:TextureRegionDrawable
      +m:draw:Batch,float,float,float,float
      +m:draw:Batch,float,float,float,float,float,float,float,float,float
      +m:getRegion:
      +m:setRegion:TextureRegion
      +m:tint:Color
     }
     >c:TiledDrawable{
      +x:
      +x:TextureRegion
      +x:TextureRegionDrawable
      +m:draw:Batch,TextureRegion,float,float,float,float,float,int
      +m:draw:Batch,float,float,float,float
      +m:draw:Batch,float,float,float,float,float,float,float,float,float
      +m:getAlign:
      +m:getColor:
      +m:getScale:
      +m:setAlign:int
      +m:setScale:float
      +m:tint:Color
     }
     >c:UIUtils{
      +f:isAndroid
      +f:isIos
      +f:isLinux
      +f:isMac
      +f:isWindows
      +m:alt:
      +m:alt:int
      +m:ctrl:
      +m:ctrl:int
      +m:hasClipboard:
      +m:left:
      +m:left:int
      +m:middle:
      +m:middle:int
      +m:right:
      +m:right:int
      +m:shift:
      +m:shift:int
     }
    }
    >c:EventListener{
     +z
     +m:handle:Event
    }
    >c:Action{
     +m:act:float
     +m:getActor:
     +m:getPool:
     +m:getTarget:
     +m:reset:
     +m:restart:
     +m:setActor:Actor
     +m:setPool:Pool
     +m:setTarget:Actor
     +m:toString:
    }
    >c:Actor{
     +x:
     +m:act:float
     +m:addAction:Action
     +m:addCaptureListener:EventListener
     +m:addListener:EventListener
     +m:ascendantsVisible:
     +m:clear:
     +m:clearActions:
     +m:clearListeners:
     +m:clipBegin:
     +m:clipBegin:float,float,float,float
     +m:clipEnd:
     +m:debug:
     +m:draw:Batch,float
     +m:drawDebug:ShapeRenderer
     +m:fire:Event
     +m:firstAscendant:Class
     +m:getActions:
     +m:getCaptureListeners:
     +m:getColor:
     +m:getDebug:
     +m:getHeight:
     +m:getListeners:
     +m:getName:
     +m:getOriginX:
     +m:getOriginY:
     +m:getParent:
     +m:getRight:
     +m:getRotation:
     +m:getScaleX:
     +m:getScaleY:
     +m:getStage:
     +m:getTop:
     +m:getTouchable:
     +m:getUserObject:
     +m:getWidth:
     +m:getX:
     +m:getX:int
     +m:getY:
     +m:getY:int
     +m:getZIndex:
     +m:hasActions:
     +m:hasKeyboardFocus:
     +m:hasParent:
     +m:hasScrollFocus:
     +m:hit:float,float,boolean
     +m:isAscendantOf:Actor
     +m:isDescendantOf:Actor
     +m:isTouchFocusListener:
     +m:isTouchFocusTarget:
     +m:isTouchable:
     +m:isVisible:
     +m:localToActorCoordinates:Actor,Vector2
     +m:localToAscendantCoordinates:Actor,Vector2
     +m:localToParentCoordinates:Vector2
     +m:localToScreenCoordinates:Vector2
     +m:localToStageCoordinates:Vector2
     +m:moveBy:float,float
     +m:notify:Event,boolean
     +m:parentToLocalCoordinates:Vector2
     +m:remove:
     +m:removeAction:Action
     +m:removeCaptureListener:EventListener
     +m:removeListener:EventListener
     +m:rotateBy:float
     +m:scaleBy:float
     +m:scaleBy:float,float
     +m:screenToLocalCoordinates:Vector2
     +m:setBounds:float,float,float,float
     +m:setColor:Color
     +m:setColor:float,float,float,float
     +m:setDebug:boolean
     +m:setHeight:float
     +m:setName:String
     +m:setOrigin:float,float
     +m:setOrigin:int
     +m:setOriginX:float
     +m:setOriginY:float
     +m:setPosition:float,float
     +m:setPosition:float,float,int
     +m:setRotation:float
     +m:setScale:float
     +m:setScale:float,float
     +m:setScaleX:float
     +m:setScaleY:float
     +m:setSize:float,float
     +m:setTouchable:Touchable
     +m:setUserObject:Object
     +m:setVisible:boolean
     +m:setWidth:float
     +m:setX:float
     +m:setX:float,int
     +m:setY:float
     +m:setY:float,int
     +m:setZIndex:int
     +m:sizeBy:float
     +m:sizeBy:float,float
     +m:stageToLocalCoordinates:Vector2
     +m:toBack:
     +m:toFront:
     +m:toString:
    }
    >c:Event{
     +x:
     +m:cancel:
     +m:getBubbles:
     +m:getListenerActor:
     +m:getStage:
     +m:getTarget:
     +m:halt:
     +m:handle:
     +m:isCancelled:
     +m:isCapture:
     +m:isHalted:
     +m:isHandled:
     +m:isStopped:
     +m:reset:
     +m:setBubbles:boolean
     +m:setCapture:boolean
     +m:setListenerActor:Actor
     +m:setStage:Stage
     +m:setTarget:Actor
     +m:stop:
    }
    >c:Group{
     +x:
     +m:act:float
     +m:addActor:Actor
     +m:addActorAfter:Actor,Actor
     +m:addActorAt:int,Actor
     +m:addActorBefore:Actor,Actor
     +m:clear:
     +m:clear:boolean
     +m:clearChildren:
     +m:clearChildren:boolean
     +m:debugAll:
     +m:draw:Batch,float
     +m:drawDebug:ShapeRenderer
     +m:findActor:String
     +m:getChild:int
     +m:getChildren:
     +m:getCullingArea:
     +m:hasChildren:
     +m:hit:float,float,boolean
     +m:isTransform:
     +m:localToDescendantCoordinates:Actor,Vector2
     +m:removeActor:Actor
     +m:removeActor:Actor,boolean
     +m:removeActorAt:int,boolean
     +m:setCullingArea:Rectangle
     +m:setDebug:boolean,boolean
     +m:setTransform:boolean
     +m:swapActor:Actor,Actor
     +m:swapActor:int,int
     +m:toString:
    }
    >c:InputEvent{
     >c:Type{
      +f:enter
      +f:exit
      +f:keyDown
      +f:keyTyped
      +f:keyUp
      +f:mouseMoved
      +f:scrolled
      +f:touchDown
      +f:touchDragged
      +f:touchUp
      +m:valueOf:String
      +m:values:
     }
     +x:
     +m:getButton:
     +m:getCharacter:
     +m:getKeyCode:
     +m:getPointer:
     +m:getRelatedActor:
     +m:getScrollAmountX:
     +m:getScrollAmountY:
     +m:getStageX:
     +m:getStageY:
     +m:getTouchFocus:
     +m:getType:
     +m:isTouchFocusCancel:
     +m:reset:
     +m:setButton:int
     +m:setCharacter:char
     +m:setKeyCode:int
     +m:setPointer:int
     +m:setRelatedActor:Actor
     +m:setScrollAmountX:float
     +m:setScrollAmountY:float
     +m:setStageX:float
     +m:setStageY:float
     +m:setTouchFocus:boolean
     +m:setType:Type
     +m:toCoordinates:Actor,Vector2
     +m:toString:
    }
    >c:InputListener{
     +x:
     +m:enter:InputEvent,float,float,int,Actor
     +m:exit:InputEvent,float,float,int,Actor
     +m:handle:Event
     +m:keyDown:InputEvent,int
     +m:keyTyped:InputEvent,char
     +m:keyUp:InputEvent,int
     +m:mouseMoved:InputEvent,float,float
     +m:scrolled:InputEvent,float,float,float,float
     +m:touchDown:InputEvent,float,float,int,int
     +m:touchDragged:InputEvent,float,float,int
     +m:touchUp:InputEvent,float,float,int,int
    }
    >c:Stage{
     >c:TouchFocus{
      +x:
      +m:reset:
     }
     +x:Viewport
     +x:Viewport,Batch
     +m:act:
     +m:act:float
     +m:addAction:Action
     +m:addActor:Actor
     +m:addCaptureListener:EventListener
     +m:addListener:EventListener
     +m:addTouchFocus:EventListener,Actor,Actor,int,int
     +m:calculateScissors:Rectangle,Rectangle
     +m:cancelTouchFocus:
     +m:cancelTouchFocus:Actor
     +m:cancelTouchFocusExcept:EventListener,Actor
     +m:clear:
     +m:dispose:
     +m:draw:
     +m:getActionsRequestRendering:
     +m:getActors:
     +m:getBatch:
     +m:getCamera:
     +m:getDebugColor:
     +m:getHeight:
     +m:getKeyboardFocus:
     +m:getRoot:
     +m:getScrollFocus:
     +m:getViewport:
     +m:getWidth:
     +m:hit:float,float,boolean
     +m:isDebugAll:
     +m:keyDown:int
     +m:keyTyped:char
     +m:keyUp:int
     +m:mouseMoved:int,int
     +m:removeCaptureListener:EventListener
     +m:removeListener:EventListener
     +m:removeTouchFocus:EventListener,Actor,Actor,int,int
     +m:screenToStageCoordinates:Vector2
     +m:scrolled:float,float
     +m:setActionsRequestRendering:boolean
     +m:setDebugAll:boolean
     +m:setDebugInvisible:boolean
     +m:setDebugParentUnderMouse:boolean
     +m:setDebugTableUnderMouse:Debug
     +m:setDebugTableUnderMouse:boolean
     +m:setDebugUnderMouse:boolean
     +m:setKeyboardFocus:Actor
     +m:setRoot:Group
     +m:setScrollFocus:Actor
     +m:setViewport:Viewport
     +m:stageToScreenCoordinates:Vector2
     +m:toScreenCoordinates:Vector2,Matrix4
     +m:touchCancelled:int,int,int,int
     +m:touchDown:int,int,int,int
     +m:touchDragged:int,int,int
     +m:touchUp:int,int,int,int
     +m:unfocus:Actor
     +m:unfocusAll:
    }
    >c:Touchable{
     +f:childrenOnly
     +f:disabled
     +f:enabled
     +m:valueOf:String
     +m:values:
    }
   }
   >p:screens{
    -p:account
    >c:AboutScreen{
     +x:
     +m:dispose:
     +m:draw:float
     +m:hide:
     +m:show:
    }
    -c:AccountSettingsScreen
    >c:CrashReportScreen{
     +x:String,String,String,String
     +m:dispose:
     +m:draw:float
     +m:resize:int,int
    }
    >c:CustomMapSelectScreen{
     +x:
     +m:dispose:
     +m:draw:float
     +m:show:
    }
    >c:GameScreen{
     +x:DailyQuestLevel
     +x:GameSystemProvider,long
     +x:BasicLevel,DifficultyMode,int,SelectedAbilitiesConfiguration,long,ProgressSnapshotForState
     +x:UserMap,DifficultyMode,int,SelectedAbilitiesConfiguration,long,BossType[],ProgressSnapshotForState,InventoryStatistics
     +x:BasicLevel,DifficultyMode,int,SelectedAbilitiesConfiguration,boolean,boolean,boolean,long,ProgressSnapshotForState,InventoryStatistics,DailyQuestLevel
     +f:S
     +f:loader
     +f:validationS
     +m:configureSystemsBeforeSetup:GameSystemProvider,SelectedAbilitiesConfiguration,boolean,boolean,boolean,long,BasicLevel,UserMap,DifficultyMode,int,GameMode,BossType[],ProgressSnapshotForState,InventoryStatistics,DailyQuestLevel
     +m:dispose:
     +m:draw:float
     +m:show:
     +m:updateDraw:float,float
     +m:updateSystems:
    }
    >c:HotkeyScreen{
     +x:
     +m:dispose:
     +m:draw:float
    }
    >c:LanguageSelectScreen{
     +x:
     +x:boolean
     +m:dispose:
     +m:draw:float
    }
    >c:LevelSelectScreen{
     +x:
     +x:BasicLevel
     +m:dispose:
     +m:draw:float
     +m:resize:int,int
     +m:show:
    }
    >c:LoadingScreen{
     +x:GameSyncLoader
     +m:dispose:
     +m:draw:float
     +m:resize:int,int
    }
    >c:MainMenuScreen{
     +x:
     +x:boolean
     +f:TT_ENDLESS_DIFFICULTY_BUTTON
     +f:TT_FIRST_LAUNCH_LEVEL_SELECT
     +m:dispose:
     +m:draw:float
    }
    >c:MapEditorScreen{
     +x:UserMap
     +x:BasicLevel
     +f:S
     +m:dispose:
     +m:draw:float
     +m:show:
    }
    -c:MoneyScreen
    >c:ResearchesScreen{
     >c:ResearchesScreenListener{
      >c:ResearchesScreenListenerAdapter{
       +m:hoveredResearchChanged:
       +m:selectedResearchChanged:
      }
      +z
      +m:hoveredResearchChanged:
      +m:selectedResearchChanged:
     }
     +x:
     +x:ResearchType
     +f:cameraController
     +f:hoveredResearch
     +f:selectedResearch
     +m:addListener:ResearchesScreenListener
     +m:dispose:
     +m:draw:float
     +m:removeListener:ResearchesScreenListener
     +m:resize:int,int
     +m:show:
     +m:startSelectedResearch:
     +m:updateStarsCount:
    }
    >c:SettingsScreen{
     >c:LocaleButton{
      +x:String,Runnable
      +f:label
      +m:onClick:
      +m:setSelected:boolean
     }
     +x:
     +x:float
     +m:dispose:
     +m:draw:float
     +m:show:
    }
    >c:SimulationScreen{
     >c:RunningSimCell{
      +x:Simulation
      +f:lastLogMessage
      +f:progressBar
      +f:progressLabel
      +f:simulation
      +f:startStopButton
      +f:statusLabel
      +f:sumRunTime
      +f:titleLabel
      +m:onLog:byte,String
      +m:update:
     }
     >c:SimEntry{
      +x:
      +f:simulation
      +f:uiCell
     }
     +x:
     +f:SIM_TYPE_PROVIDERS
     +f:autoNextToggle
     +f:formTable
     +f:runningSimulations
     +f:simCells
     +f:simConfig
     +f:simTypeSelect
     +m:addSimulation:Simulation
     +m:dispose:
     +m:draw:float
     +m:startNextSim:Simulation
     +m:stopAllSimulations:
     +m:updateForm:
    }
    >c:StatisticsScreen{
     +x:
     +m:dispose:
     +m:draw:float
     +m:resize:int,int
     +m:show:
    }
    >c:TicTacToeScreen{
     >c:Ai{
      +z
      +m:makeMove:Board
     }
     >c:AiRunResult{
      +x:
     }
     >c:Board{
      +f:cellCount
      +f:rules
      +m:copyFieldFrom:Board
      +m:cpy:
      +m:getCell:short
      +m:getCellByXY:short,short
      +m:getCellIdx:short,short
      +m:getFittingWinnerMask:
      +m:getFittingWinnerMaskAsync:long[]
      +m:getFittingWinnerMasksCountAsync:long[],byte
      +m:getOpponent:byte
      +m:getPlayerName:byte
      +m:getRules:
      +m:getTotalTickCount:
      +m:getWinner:
      +m:getWinnerAsync:long[]
      +m:hasEmptyCells:
      +m:hasSameField:Board
      +m:isEmpty:
      +m:setCell:short,byte
      +m:toString:
     }
     >c:DynamicSizeBoard{
      +x:Board
      +x:Rules
      +m:exactlyTheSame:long[],long[]
      +m:copyFieldFrom:Board
      +m:cpy:
      +m:createThreadSafeBits:
      +m:getCell:short
      +m:getFittingWinnerMask:
      +m:getFittingWinnerMaskAsync:long[]
      +m:getFittingWinnerMasksCountAsync:long[],byte
      +m:getTotalTickCount:
      +m:getWinner:
      +m:getWinnerAsync:long[]
      +m:hasSameField:Board
      +m:setCell:short,byte
     }
     >c:FixedSizeSmallBoard{
      +x:Board
      +x:Rules
      +m:copyFieldFrom:Board
      +m:cpy:
      +m:getCell:short
      +m:getFittingWinnerMask:
      +m:getFittingWinnerMaskAsync:long[]
      +m:getFittingWinnerMasksCountAsync:long[],byte
      +m:getTotalTickCount:
      +m:getWinner:
      +m:getWinnerAsync:long[]
      +m:hasSameField:Board
      +m:setCell:short,byte
     }
     >c:Rules{
      +x:short,short
      +f:fieldSize
      +f:winCondition
      +m:getCellIdx:short,short
     }
     +x:
     +f:LOG_AI_ACTIONS
     +f:PRINT_AI_ACTIONS
     +m:dispose:
     +m:draw:float
    }
   }
   -p:serializers
   >p:shapes{
    >c:BulletSmokeMultiLine{
     >c:BulletSmokeMultiLineFactory{
      +x:
      +m:setup:
     }
     +f:fadeInOut
     +f:maxAlpha
     +f:maxSegmentWidth
     +f:minSegmentWidth
     +f:nodesDisperseTime
     +m:draw:Batch
     +m:free:
     +m:isFinished:
     +m:reset:
     +m:setColor:Color
     +m:setTexture:TextureRegion,boolean,boolean
     +m:setup:float,float,float,float
     +m:update:float
    }
    >c:ChainLightning{
     >c:ChainLightningFactory{
      +x:
      +m:setup:
     }
     +f:AVERAGE_SEGMENT_LENGTH
     +f:MAX_SEGMENT_WIDTH
     +f:MIN_SEGMENT_WIDTH
     +m:draw:Batch
     +m:free:
     +m:getColor:
     +m:getExistsTime:
     +m:getStartX:
     +m:getStartY:
     +m:isFinished:
     +m:reset:
     +m:setColor:Color
     +m:setFadingToEnd:boolean
     +m:setPosition:float,float,float,float
     +m:setTexture:TextureRegion,boolean,boolean
     +m:setup:float,float,float,float,float,float,boolean,float,float,float
     +m:update:float
    }
    >c:Circle{
     >c:CircleFactory{
      +x:
      +m:setup:
     }
     +m:draw:Batch
     +m:free:
     +m:getInnerColor:
     +m:getInnerRadius:
     +m:getOuterColor:
     +m:getOuterRadius:
     +m:getSegmentCount:
     +m:getX:
     +m:getY:
     +m:reset:
     +m:setColor:float,float
     +m:setInnerRadius:float
     +m:setOuterRadius:float
     +m:setPosition:float,float
     +m:setSegmentCount:int
     +m:setSkipOddSegments:boolean
     +m:setup:float,float,float,float,int,float,float
    }
    >c:CountdownPolygon{
     >c:CountdownPolygonFactory{
      +x:
      +m:setup:
     }
     +m:draw:Batch
     +m:free:
     +m:reset:
     +m:setup:float[]
    }
    >c:FlyingParticlesLine{
     >c:FlyingParticlesLineFactory{
      +x:
      +m:setup:
     }
     +m:draw:Batch
     +m:free:
     +m:isFinished:
     +m:reset:
     +m:setup:float,float,float,float,TextureRegion,float,float,float,float,Color,Color,float,float,float,ScaledNumericValue
     +m:update:float
    }
    >c:MultiLine{
     >c:MultiLineFactory{
      +x:
      +m:setup:
     }
     +m:appendNode:float,float,float,float,boolean
     +m:bakeVerticesColorIfNeeded:
     +m:draw:Batch
     +m:drawDebug:Batch
     +m:getFlip:
     +m:getMirror:
     +m:getNodeCount:
     +m:getTextureRegion:
     +m:getTint:
     +m:reset:
     +m:setNodeColor:int,float
     +m:setNodePosition:int,float,float
     +m:setNodes:float[]
     +m:setNodesWithCount:float[],int
     +m:setTextureRegion:TextureRegion,boolean,boolean
     +m:setTint:Color
     +m:setTintWithAlpha:Color,float
     +m:updateAllNodes:
    }
    >c:PieChart{
     >c:ChartEntryConfig{
      +x:Color,float,float
      +f:color
      +f:segmentShift
      +f:userObject
      +m:getValue:
      +m:setValue:float
     }
     >c:PieChartFactory{
      +x:
      +m:setup:
     }
     +f:angleShiftRad
     +f:innerRadius
     +f:rotationDirection
     +m:draw:Batch
     +m:free:
     +m:getX:
     +m:getY:
     +m:requestVerticesRebuild:
     +m:reset:
     +m:setFadeToOut:boolean
     +m:setShadowSegments:int
     +m:setup:float,float,float,int,Array
    }
    >c:RangeCircle{
     >c:RangeCircleFactory{
      +x:
      +m:setup:
     }
     +m:draw:Batch
     +m:getColor:
     +m:getMaxRadius:
     +m:getMinRadius:
     +m:getX:
     +m:getY:
     +m:reset:
     +m:setup:float,float,float,float,Color
    }
    >c:StraightMultiLine{
     >c:StraightMultiLineFactory{
      +x:
      +m:setup:
     }
     +m:appendNode:float,float,float,boolean
     +m:draw:Batch
     +m:getMainTexture:
     +m:getNodeCount:
     +m:getTint:
     +m:reset:
     +m:setNodeColor:int,float
     +m:setNodePosition:int,float,float
     +m:setNodes:float[]
     +m:setNodesSliced:float[],int
     +m:setTextureRegion:TextureRegion,TextureRegion
     +m:setTint:Color
     +m:setTintAndAlpha:Color,float
     +m:setWidth:float
     +m:updateAllNodes:
    }
    >c:TrailMultiLine{
     >c:TrailMultiLineFactory{
      +x:
      +m:setup:
     }
     +x:
     +m:allowCompletion:
     +m:cloneTrail:
     +m:draw:Batch
     +m:free:
     +m:getColor:
     +m:isFinished:
     +m:reset:
     +m:setColor:Color
     +m:setColor:float,float,float,float
     +m:setHeadPosition:float,float
     +m:setHeadPositionAndAngle:float,float,float
     +m:setStartPoint:float,float
     +m:setup:Color,float,float,float
     +m:update:float
    }
   }
   >p:systems{
    >c:AbilitySystem{
     +x:
     +f:abilitiesConfiguration
     +f:abilitiesUsed
     +f:activeAbilities
     +m:addAbilityCharges:int,int
     +m:affectsGameState:
     +m:cancelUsingAbility:
     +m:dispose:
     +m:draw:Batch,float
     +m:drawBatchAdditive:Batch,float
     +m:getAbilitySlotCount:
     +m:getAvailableAbilities:int
     +m:getAvailableAbilitiesByType:AbilityType
     +m:getEnergy:
     +m:getEnergyCost:AbilityType
     +m:getEnergyRegenerationTime:
     +m:getMaxEnergy:
     +m:getNextEnergyGenerationTime:
     +m:getSystemName:
     +m:getUiCurrentlyUsingAbility:
     +m:postSetup:
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:registerAndConfigure:Ability,int,int,double
     +m:registerConfigureAndStartAbility:AbilityType,int,int,double
     +m:setup:
     +m:startAbility:Ability
     +m:startUsingAbility:AbilityType
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:AchievementSystem{
     -c:OnEnemyDie
     -c:OnMdpsUpdate
     -c:OnScoreChange
     -c:OnTowerBuild
     -c:OnWaveComplete
     +x:
     +m:affectsGameState:
     +m:getSystemName:
     +m:isActive:
     +m:postSetup:
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:registerDelta:AchievementType,int
     +m:setEnabled:boolean
     +m:setProgress:AchievementType,int
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BonusSystem{
     >c:BonusStage{
      +x:int,int
      +m:canSelectBonus:
      +m:getAvailableOnFrame:
      +m:getBonusesToChooseFrom:
      +m:getNumber:
      +m:getPoints:
      +m:getPointsRequirement:
      +m:getProbableBonuses:
      +m:getSelectedBonusIdx:
      +m:isBonusSelected:
      -m:read:Kryo,Input
      +m:setAvailableOnFrame:int
      -m:write:Kryo,Output
     }
     -c:OnEnemyDie
     +x:
     +f:BONUSES_TO_CHOOSE_COUNT
     +f:FORCED_SELECTION_MAX_FRAME_DELAY
     +f:GAMEPLAY_MOD_SOURCE_NAME
     +f:MAX_TECHNICAL_BONUS_STAGES
     +f:additionalBonusToSelectFrom
     +f:autoSelectionOnSingleBonus
     +f:selectedBonuses
     +f:stageReRolls
     +m:addProgressPoints:int
     +m:affectsGameState:
     +m:bonusSelectionAvailable:
     +m:canReRollBonuses:int
     +m:dispose:
     +m:getActiveBonusesCount:
     +m:getAllTimeReRollCount:
     +m:getBonusStage:int
     +m:getBonusesToChooseCount:
     +m:getCurrentVisualProgressPoints:
     +m:getCurrentVisualProgressStageNumber:
     +m:getCurrentlyProgressingStage:
     +m:getMaxBonusStages:
     +m:getMaxTechnicalBonusStages:
     +m:getNextStagePointsRequirement:
     +m:getPreparedRandom:int
     +m:getStageToChooseBonusFor:
     +m:getStagesConfig:
     +m:getSystemName:
     +m:isAutoSelectionOnSingleBonus:
     +m:isEnabled:
     +m:reRollBonuses:
     +m:reRollBonusesAction:
     -m:read:Kryo,Input
     +m:resetState:
     +m:selectBonusAction:int
     +m:setAutoSelectionOnSingleBonus:boolean
     +m:setSelectedBonus:int,int
     +m:setStagesConfig:BonusStagesConfig
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BuffSystem{
     +x:
     +f:P_ARMOR
     +f:P_BLIZZARD
     +f:P_BONUS_COINS
     +f:P_BONUS_XP
     +f:P_BURN
     +f:P_CHAIN_REACTION
     +f:P_DEATH_EXPLOSION
     +f:P_FREEZING
     +f:P_INVULNERABILITY
     +f:P_NO_BONUS_SYSTEM_POINTS
     +f:P_NO_DAMAGE
     +f:P_POISON
     +f:P_REGENERATION
     +f:P_SLIPPING
     +f:P_SNOWBALL
     +f:P_STUN
     +f:P_THROW_BACK
     +f:P_VULNERABILITY
     +m:affectsGameState:
     +m:dispose:
     +m:getProcessor:BuffType
     +m:getSystemName:
     -m:read:Kryo,Input
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:CachedRenderingSystem{
     +x:
     +m:addLayer:String,int,ShaderProgram,boolean
     +m:affectsGameState:
     +m:getLayer:String
     +m:getOrAddLayer:String,int,ShaderProgram,boolean
     +m:getSystemName:
     +m:isDirty:String
     +m:removeLayer:String
     +m:setLayerDirty:String
    }
    >c:DamageSystem{
     >c:DpsCounter{
      +f:damage
      +f:maxDamage
      +f:timeAccumulator
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +f:DAMAGE_DRAIN_MAX_ITERATIONS
     +m:affectsGameState:
     +m:drainDamageAndKillQueue:
     +m:drainDamageAndKillQueueTillEmpty:
     +m:drawDebugDpsChart:Batch
     +m:getSystemName:
     +m:getTowersMaxDps:
     +m:obtainRecord:
     +m:queueDamage:DamageRecord
     +m:queueEnemyKill:DamageRecord
     -m:read:Kryo,Input
     +m:setTowersMaxDps:double
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:EnemySystem{
     -c:OnEnemyDespawn
     -c:OnPathfindingRebuild
     +x:
     +f:MIDDLE_SIDE_SHIFT
     +f:RANDOM_SIDE_SHIFT
     +f:enemyBuffVulnerability
     +f:enemyColor
     +f:enemyDamageVulnerability
     +f:enemyEmojiTexture
     +f:enemyHighlightTexture
     +f:enemySpecialDamageVulnerability
     +f:enemyTexture
     +f:flyingEnemy
     +m:addEnemy:Enemy,SpawnTile,int,Wave,float
     +m:addEnemyWithFirstSpawn:Enemy,Tile,int
     +m:addEnemyWithPath:Enemy,SpawnTile,Path,int,Wave,float
     +m:addStaticEnemy:Enemy,float,float
     +m:affectsGameState:
     +m:dispose:
     +m:draw:Batch,float,float
     +m:drawEnemyHealth:Batch
     +m:getColor:EnemyType
     +m:getEmojiTexture:EnemyType
     +m:getHighlightTexture:EnemyType
     +m:getReference:Enemy
     +m:getSystemName:
     +m:getTexture:EnemyType
     +m:isEmojiEnemies:
     +m:postSetup:
     +m:postStateRestore:
     +m:queueAllEnemiesPathfinding:
     -m:read:Kryo,Input
     +m:registerWithPath:Enemy,Path,int,float
     +m:registerWithRandomSideShift:Enemy
     +m:registerWithSideShift:Enemy,int
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:ExperienceSystem{
     +x:
     +m:addExperienceBuffed:Tower,float
     +m:addExperienceRaw:Tower,float
     +m:affectsGameState:
     +m:getSystemName:
     +m:notifyTowerLeveledUp:Tower
     -m:read:Kryo,Input
     +m:removeExperienceRaw:Tower,float
     +m:update:float
     +m:updateLevelExperience:Tower
     +m:updateLevelExperienceOfEveryTower:
     -m:write:Kryo,Output
    }
    >c:ExplosionSystem{
     >c:Factories{
      +x:
      +f:AIR_FALL
      +f:CANNON
      +f:FIREBALL
      +f:GENERIC
      +f:MISSILE
     }
     +x:
     +f:F
     +m:affectsGameState:
     +m:dispose:
     +m:getFactory:ExplosionType
     +m:getSystemName:
     -m:read:Kryo,Input
     +m:register:Explosion
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:GameMapSelectionSystem{
     +x:
     +m:drawGateHover:Batch,int,int,boolean
     +m:drawGateSelection:Batch,int,int,boolean
     +m:drawTileHover:Batch,int,int
     +m:drawTileSelection:Batch,int,int
     +m:affectsGameState:
     +m:disableHover:
     +m:disableSelection:
     +m:drawMapHoverSelect:Batch
     +m:getHoveredGate:
     +m:getHoveredTile:
     +m:getSelectedGate:
     +m:getSelectedTile:
     +m:getSystemName:
     +m:setHoveredGate:Gate
     +m:setHoveredGateAtPos:int,int,boolean
     +m:setHoveredTile:Tile
     +m:setHoveredTileAtPos:int,int
     +m:setSelectedGate:Gate
     +m:setSelectedGateAtPos:int,int,boolean
     +m:setSelectedTile:Tile
     +m:setSelectedTileAtPos:int,int
     +m:setup:
    }
    >c:GameStateSystem{
     >c:ContinueGameStatus{
      +f:GAME_FROM_PREVIOUS_BUILD
      +f:GAME_VALUES_CHANGED
      +f:MAP_CHANGED
      +f:MAP_NOT_FOUND
      +f:OTHER_ERROR
      +f:SUCCESS
      +f:values
      +m:valueOf:String
      +m:values:
     }
     >c:GameMode{
      +f:BASIC_LEVELS
      +f:USER_MAPS
      +f:values
      +m:isBasicLevel:GameMode
      +m:valueOf:String
      +m:values:
     }
     >c:GameOverReason{
      +f:MANUAL
      +f:NO_ENEMIES_LEFT
      +f:QUEST_FAILED
      +f:ZERO_BASE_HEALTH
      +m:valueOf:String
      +m:values:
     }
     -c:OnEnemyDie
     -c:OnEnemyReachTarget
     -c:OnMinerResourceChange
     -c:OnNextWaveForce
     >c:ReplayValidationResult{
      >c:Result{
       +f:INVALID
       +f:INVALID_RECORD
       +f:MODIFIED_GAME
       +f:VALID
       +m:valueOf:String
       +m:values:
      }
      +x:Result,float,int,int,int,long,ReplayRecord
      +x:Result,float,int,int,int,long,ReplayRecord,String
      +f:S
      +f:cheatingReason
      +f:enemiesKilled
      +f:realScore
      +f:realWaves
      +f:replayRecord
      +f:resourcesMined
      +f:result
      +f:timeSpent
      +f:updates
      +f:updatesPerSecond
      +f:xp
     }
     +x:
     +f:NOT_COMPLETED_DAILY_QUEST_PRIZE_MULTIPLIER
     +f:SLOW_MOTION_GAME_SPEED
     +f:allowedBossesForCustomMaps
     +f:averageDifficulty
     +f:basicLevelName
     +f:canLootCases
     +f:continuedGameApproxStateHash
     +f:dailyQuestLevel
     +f:difficultyMode
     +f:gameIsContinued
     +f:gameMode
     +f:gameOverReason
     +f:gameSavesDisabled
     +f:gameStartProgressSnapshot
     +f:gameStartTimestamp
     +f:headlessValidatedReplayRecord
     +f:lastEnemyReachedTarget
     +f:lootBoostEnabled
     +f:modeDifficultyMultiplier
     +f:playRealTime
     +f:pxpExperience
     +f:random
     +f:rarityBoostEnabled
     +f:replayId
     +f:scoreWithEndlessTimeLimit
     +f:snapshotSavesEnabled
     +f:startingAbilitiesConfiguration
     +f:userMapId
     +f:userMapOriginalSeed
     +f:validationFingerprintMismatchPrinted
     +f:validationLastUpdateNumber
     +f:validationStartTimestamp
     +m:continueSavedGame:
     +m:deleteSavedGame:
     +m:getSavedGameInfo:
     +m:savedGameExists:
     +m:startReplay:ReplayRecord
     +m:startReplayAsRealRun:ReplayRecord,boolean
     +m:addCompletedQuest:String
     +m:addCompletedQuestIssuedPrizes:IssuedItems,float,float,int
     +m:addHealth:int
     +m:addLootIssuedPrizes:ItemStack,float,float,int
     +m:addMoney:float,boolean
     +m:addResources:ResourceType,float
     +m:addScore:long,StatisticsType
     +m:animateSpeed:float,float
     +m:calculateFinalScore:long,StatisticsType
     +m:calculatePrizeGreenPapers:
     +m:dispose:
     +m:getApproxStateHash:
     +m:getCompletedQuests:
     +m:getDoubleSpeedTimeLeft:
     +m:getGameLootIssuedItems:
     +m:getGameSpeed:
     +m:getHealth:
     +m:getMoney:
     +m:getNonAnimatedGameSpeed:
     +m:getPxpLastActionFrame:
     +m:getQuestsIssuedPrizes:
     +m:getRandomState:int
     +m:getResources:ResourceType
     +m:getScore:
     +m:getScoreMultiplier:StatisticsType
     +m:getSeed:
     +m:getStateBytes:
     +m:getStateStr:boolean
     +m:getSystemName:
     +m:higherGameSpeed:
     +m:isDailyQuestAndNotCompleted:
     +m:isDoubleSpeedActive:
     +m:isGameOver:
     +m:isGameRealTimePasses:
     +m:isMaxEndlessReplayTimeReached:
     +m:isPaused:
     +m:lowerGameSpeed:
     +m:pauseGame:
     +m:postSetup:
     +m:profileUpdate:
     +m:randomFloat:
     +m:randomInt:int
     +m:randomIntIndependent:int,long
     +m:randomTriangular:
     -m:read:Kryo,Input
     +m:realUpdate:float
     +m:registerPlayerActivity:
     +m:removeHealth:int
     +m:removeMoney:int
     +m:removeResources:ResourceType,int
     +m:restartGame:boolean
     +m:resumeGame:
     +m:saveGame:
     +m:setGameSpeed:float
     +m:setHealth:int
     +m:setMoney:int
     +m:setResources:ResourceType,int
     +m:setScore:long
     +m:setSeed:long
     +m:setSnapshotSavesEnabled:boolean
     +m:setup:
     +m:switchGameSpeed:
     +m:togglePauseMenu:
     +m:triggerGameOver:GameOverReason
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:GameUiSystem{
     >c:ScreenshotModeConfig{
      +x:
     }
     +x:
     +f:_stateEditor
     +f:_statisticsChart
     +f:abilityMenu
     +f:bossTileMenu
     +f:buildMenu
     +f:coreMenu
     +f:flyingItemsOverlay
     +f:gameOverOverlay
     +f:gameValueMenu
     +f:gameplayBonusesOverlay
     +f:gateMenu
     +f:liveLeaderboard
     +f:mainUi
     +f:minerMenu
     +f:modifierMenu
     +f:newEnemyOverlay
     +f:panZoomTooltip
     +f:pauseMenu
     +f:questList
     +f:roadMenu
     +f:screenBorderGradient
     +f:sideMenu
     +f:spawnMenu
     +f:storylineMessages
     +f:subtitles
     +f:targetMenu
     +f:tooltip
     +f:towerMenu
     +f:uiElementsEmphasizer
     +f:xmMusicTrackMenu
     +m:affectsGameState:
     +m:dispose:
     +m:draw:float
     +m:fadeOutUi:
     +m:getMainUi:
     +m:getSystemName:
     +m:postSetup:
     +m:profileUpdate:
     +m:setUiScreenshotMode:ScreenshotModeConfig
     +m:setup:
    }
    >c:GameValueSystem{
     >c:GlobalTowerStatMutator{
      +x:String,float
      +m:getDescription:
      +m:getMultiplier:
      -m:read:Kryo,Input
      +m:setMultiplier:float
      -m:write:Kryo,Output
     }
     -c:OnTileChange
     +x:
     +m:addCustomGameValue:GameValueConfig
     +m:addGlobalTowerStatMutator:TowerStatType,GlobalTowerStatMutator
     +m:affectsGameState:
     +m:getBooleanValue:GameValueType
     +m:getFloatValue:GameValueType
     +m:getFloatValueSum:GameValueType,GameValueType
     +m:getGlobalSnapshot:
     +m:getGlobalStatMultiplier:TowerStatType
     +m:getGlobalTowerStatMutators:TowerStatType
     +m:getIntValue:GameValueType
     +m:getIntValueSum:GameValueType,GameValueType
     +m:getPercentValueAsMultiplier:GameValueType
     +m:getPercentValueAsMultiplierSum:GameValueType,GameValueType
     +m:getPercentValueAsMultiplierSumAll:GameValueType[]
     +m:getSnapshot:
     +m:getSystemName:
     +m:getTickRate:
     +m:getTickRateDeltaTime:
     +m:getValue:GameValueType
     -m:read:Kryo,Input
     +m:recalculate:
     +m:recalculateGlobalTowerStatMultipliers:
     +m:removeCustomGameValue:GameValueConfig
     +m:removeGlobalTowerStatMutator:TowerStatType,GlobalTowerStatMutator
     +m:setGlobalSnapshot:GameValuesSnapshot
     +m:setup:
     -m:write:Kryo,Output
    }
    >c:GameplayModSystem{
     >c:ActiveMod{
      +m:getMod:
      +m:getSource:
      -m:read:Kryo,Input
      +m:setMod:GameplayMod
      +m:setSource:String
      -m:write:Kryo,Output
     }
     +x:
     +m:activateMod:GameplayMod,String
     +m:affectsGameState:
     +m:dispose:
     +m:getActiveMod:Class
     +m:getActiveModFromSource:Class,String
     +m:getActiveMods:
     +m:getModRandom:int
     +m:getSystemName:
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:HotKeySystem{
     +x:
     +m:affectsGameState:
     +m:dispose:
     +m:getSystemName:
     +m:handleHotKeys:
     +m:setHotKeysEnabled:boolean
     +m:setup:
    }
    >c:InputSystem{
     +x:
     +f:cameraController
     +m:affectsGameState:
     +m:disableInput:
     +m:dispose:
     +m:draw:Batch,float,float
     +m:enableAllInput:
     +m:enableOnlyStage:
     +m:getCameraController:
     +m:getInputProcessor:
     +m:getSystemName:
     +m:postSetup:
     +m:profileUpdate:
     +m:setup:
     +m:setupInputMultiplexer:boolean,boolean,boolean
    }
    >c:InventorySystem{
     +x:
     +m:add:Item,int
     +m:addGate:Gate,int
     +m:addTile:Tile,int
     +m:affectsGameState:
     +m:contains:Item,int
     +m:dispose:
     +m:getAllItems:
     +m:getItemsBySubCategory:ItemSubcategoryType
     +m:getSystemName:
     +m:initAddItem:Item,int
     +m:initAddItems:Array
     +m:profileUpdate:
     +m:remove:Item
     +m:removeMany:Item,int
     +m:setStaticMode:boolean
     +m:setup:
    }
    >c:LootSystem{
     -c:OnEnemyDie
     -c:OnMinerResourceChange
     +x:
     +f:ENCRYPTED_CASE_GLOBAL_INTERVAL
     +f:REWARDING_AD_VIEW_BONUSES
     +f:inventoryStatistics
     +f:lootFillsByRarity
     +f:minersMineOnlyLegendaries
     +f:random
     -m:calculateBaseLootCountGraph:float
     -m:main:String[]
     +m:addLoot:Enemy,Item,int
     +m:affectsGameState:
     +m:canGiveChests:
     +m:fillWithLoot:Enemy
     +m:forceFillWithLoot:Enemy
     +m:getActiveSecondsPlayed:
     +m:getLootSlots:MinerType
     +m:getOrCreateSourceMinedItems:int,int
     +m:getPapersFromFlamethrowerUltBank:int
     +m:getRewardingAdViews:
     +m:getRewardingAdsLootMultiplier:
     +m:getSourceMinedItems:int,int
     +m:getSystemName:
     +m:getTimeToRewardingAds:boolean
     +m:isRewardingAdAvailableByState:
     +m:isRewardingAdAvailableInReality:
     +m:profileUpdate:
     -m:read:Kryo,Input
     +m:setup:
     +m:update:float
     +m:viewRewardingAdAction:
     -m:write:Kryo,Output
    }
    >c:MapEditorSystem{
     >c:Tool{
      +z
      +m:disabled:
      +m:enabled:Tool
      +m:getTooltip:
      +m:setup:GameSystemProvider
     }
     >c:BackedUpMapInfo{
      +x:
      +f:backupTimestamp
      +f:isBasicLevel
      +f:mapId
      +f:mapJson
      +f:mapName
      +m:startEditor:
     }
     >c:HistoryImprint{
      +f:inventoryAddedItems
      +f:inventoryRemovedItems
      +f:mapAddedGates
      +f:mapAddedTiles
      +f:mapHeightDelta
      +f:mapRemovedGates
      +f:mapRemovedTiles
      +f:mapReplacedGates
      +f:mapReplacedTiles
      +f:mapWidthDelta
      +f:startingInventory
      +f:startingMap
      +m:getChangesCount:
      +m:isEmpty:
      +m:isSealed:
      +m:repeat:
      +m:revert:
      +m:toString:
     }
     >c:InventoryDefaultListener{
      +m:categoryTabChanged:
      +m:itemSlotClicked:ItemSlot
      +m:itemSlotDragStart:ItemSlot,Vector2
     }
     +x:
     +f:HISTORY_SIZE
     +f:SELECTION_FILL_COLOR
     +f:SELECTION_OUTLINE_COLOR
     +f:basicLevel
     +f:basicLevelEditor
     +f:inventoryDefaultListener
     +f:mapChanged
     +f:selection
     +f:userMap
     +m:deleteBackupFile:
     +m:getBackUpInfo:
     +m:affectsGameState:
     +m:deselectAll:
     +m:dispose:
     +m:expandMap:Direction
     +m:finishActionRecord:HistoryImprint
     +m:getHistory:
     +m:getHistoryPointer:
     +m:getHoveredGate:
     +m:getHoveredTile:
     +m:getSystemName:
     +m:getTool:
     +m:getTools:
     +m:goToPreviousScreen:
     +m:hasHistoryBack:
     +m:hasHistoryForward:
     +m:historyBack:
     +m:historyForward:
     +m:notifySelectionChanged:
     +m:postSetup:
     +m:reduceMap:Direction
     +m:registerTool:Tool
     +m:saveMap:
     +m:selectTool:Tool
     +m:setup:
     +m:shiftMap:Direction
     +m:startActionRecord:
     +m:startMap:
    }
    >c:MapEditorUiSystem{
     +x:
     +f:draggingItemHelper
     +f:inventoryMenu
     +f:itemInfoMenu
     +f:mainUi
     +f:mapShiftButtons
     +m:affectsGameState:
     +m:dispose:
     +m:getSystemName:
     +m:setup:
    }
    >c:MapRenderingSystem{
     >c:DrawMode{
      +f:DEFAULT
      +f:DETAILED
      +f:FULL
      +f:MAP_EDITOR
      +f:values
      +m:valueOf:String
      +m:values:
     }
     +x:
     +f:CACHED_GFX_LAYER_BUILDINGS
     +f:CACHED_GFX_LAYER_TILES
     +f:CACHED_GFX_LAYER_TILE_EXTRAS
     +f:drawMapGrid
     +f:spaceTileBonusesToDrawColoredOnFreeTiles
     +m:affectsGameState:
     +m:dispose:
     +m:drawBatch:Batch,float
     +m:drawBuildings:OrthographicCamera
     +m:drawStains:Batch
     +m:drawTiles:OrthographicCamera
     +m:drawTilesExtras:OrthographicCamera
     +m:forceBuildingsRedraw:
     +m:forceTilesRedraw:boolean
     +m:getDrawMode:
     +m:getSystemName:
     +m:postDrawBatch:Batch,float
     +m:profileUpdate:
     +m:setDrawMode:DrawMode
     +m:setup:
     +m:switchMapDrawMode:
    }
    >c:MapSystem{
     -c:OnGameValuesRecalculate
     -c:OnNextWaveForce
     +x:
     +f:TOWER_RANGE_HOVER_COLOR
     +f:TOWER_RANGE_SELECTED_COLOR
     +f:drawPathTraces
     +f:spawnedEnemies
     +f:spawnedUnits
     +m:aabbGenerated:
     +m:affectsGameState:
     +m:dispose:
     +m:drawBatch:Batch,float
     +m:getDirtyTileGeneration:Tile
     +m:getDirtyTileGenerationAt:int,int
     +m:getEnemiesInCircle:float,float,float,EntryRetriever
     +m:getEnemiesInCircleFiltered:float,float,float,EntryFilter,EntryRetriever
     +m:getEnemiesInCircleV:Vector2,float,EntryRetriever
     +m:getEnemiesInRect:float,float,float,float,EntryRetriever
     +m:getEnemiesInRectFiltered:float,float,float,float,EntryFilter,EntryRetriever
     +m:getEnemiesInRectV:Vector2,Vector2,EntryRetriever
     +m:getMap:
     +m:getSpawnedEnemiesCountByWave:Wave
     +m:getSystemName:
     +m:getTileAndNeighbours:int,int,Array
     +m:hideTowerRangeHint:
     +m:highlightGate:Gate
     +m:highlightTile:Tile
     +m:isPointWithinTile:Tile,int,int
     +m:isSpawned:Unit
     +m:isVisible:Tile,OrthographicCamera
     +m:lineCanHitEntry:float,float,float,float
     +m:markAllTilesDirty:
     +m:markTilesDirty:int,int,int
     +m:markTilesDirtyNearTile:Tile,int
     +m:postSetup:
     +m:postStateRestore:
     +m:profileUpdate:
     +m:rayCastEnemies:float,float,float,float,float,ObjectFilter
     +m:rayCastEnemiesSorted:float,float,float,float,float,ObjectFilter
     -m:read:Kryo,Input
     +m:registerGate:Gate
     +m:registerTile:Tile
     +m:removeBuilding:Building
     +m:removeHighlights:
     +m:removeMiner:Miner
     +m:setGate:int,int,boolean,Gate
     +m:setMap:Map
     +m:setMapSize:int,int
     +m:setMiner:int,int,Miner
     +m:setModifier:int,int,Modifier
     +m:setPathTracesDrawing:boolean
     +m:setTile:int,int,Tile
     +m:setTower:int,int,Tower
     +m:setup:
     +m:showTileWarningParticle:int,int
     +m:showTowerRangeHint:float,float,float,float
     +m:spawnEnemy:Enemy
     +m:spawnUnit:Unit
     +m:traverseNeighborTilesAroundPos:int,int,ObjectFilter
     +m:traverseNeighborTilesAroundTile:Tile,ObjectFilter
     +m:traverseNeighborTilesIncludingPos:int,int,ObjectFilter
     +m:traverseNeighborTilesIncludingTile:Tile,ObjectFilter
     +m:unregisterGate:Gate
     +m:unregisterTile:Tile
     +m:update:float
     +m:updateDirtyTiles:
     +m:upgradeCore:CoreTile,int,int
     +m:upgradeCoreAction:CoreTile,int,int
     +m:upgradeCoreActionAt:int,int,int,int
     +m:upgradeCoreAt:int,int,int,int
     -m:write:Kryo,Output
    }
    >c:MinerSystem{
     -c:OnMinerRemove
     -c:OnNextWaveForce
     +x:
     +f:bonusDoubleMiningSpeedTimeLeft
     +f:miners
     +m:drawBatch:Batch,Map,float,DrawMode
     +m:addResources:Miner,ResourceType,int,boolean
     +m:affectsGameState:
     +m:buildMiner:MinerType,int,int,boolean,boolean
     +m:buildMinerActionAt:MinerType,int,int
     +m:buildMinerActionForSelectedTile:MinerType
     +m:calculateScorePerMinute:Miner
     +m:dispose:
     +m:getBaseMiningSpeed:Miner,int
     +m:getBonusDoubleMiningSpeedTimeLeft:
     +m:getBuildPrice:MinerType
     +m:getBuildableMinersCount:MinerType
     +m:getGlobalUpgradePrice:MinerType
     +m:getMaxMinersCount:MinerType
     +m:getMaxUpgradeLevel:MinerType
     +m:getMiningSpeed:Miner,int
     +m:getMiningSpeedModifierCount:Miner
     +m:getMiningSpeedModifierEfficiencyPerCount:int
     +m:getMiningSpeedModifierMultiplier:Miner
     +m:getResourceMinedRawScore:ResourceType
     +m:getSystemName:
     +m:getUpgradePrice:Miner
     +m:globalUpgradeMinerAction:MinerType
     +m:isRegistered:Tower
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:register:Miner
     +m:removeResources:Miner,ResourceType,int
     +m:sellMiner:int,int
     +m:sellMinerAction:Miner
     +m:sellMinerActionAt:int,int
     +m:setup:
     +m:unregister:Miner
     +m:update:float
     +m:upgradeMiner:Miner
     +m:upgradeMinerAction:Miner
     +m:upgradeMinerActionAt:int,int
     +m:upgradeMinerAt:int,int
     -m:write:Kryo,Output
    }
    >c:ModifierSystem{
     -c:OnBuildingRemove
     -c:OnModifierPlace
     +x:
     +f:modifiers
     +f:modifiersBuiltByType
     +f:modifiersBuiltByTypeAllTime
     +f:modifiersSoldByTypeAllTime
     +m:drawBatch:Batch,Map,float,DrawMode
     +m:drawBatchAdditive:Batch,Map,float,DrawMode
     +m:affectsGameState:
     +m:buildModifier:ModifierType,int,int
     +m:buildModifierActionAt:ModifierType,int,int
     +m:buildModifierActionAtSelectedTile:ModifierType
     +m:customModifierButtonAction:Modifier,int,int
     +m:customModifierButtonActionAt:int,int,int,int
     +m:dispose:
     +m:getBuildPrice:ModifierType
     +m:getBuildableModifiersCount:ModifierType
     +m:getMaxModifiersCount:ModifierType
     +m:getProcessor:ModifierType
     +m:getSystemName:
     +m:isRegistered:Modifier
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:sellModifier:Modifier
     +m:sellModifierAction:Modifier
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:ParticleSystem{
     +x:
     +m:freeParticle:ParticleEffect
     +m:addChainLightning:ChainLightning
     +m:addCoinParticle:float,float,int
     +m:addDamageParticle:float,float,long,int,int
     +m:addEnemyHitParticle:Tower,Enemy,float,Projectile
     +m:addFlashParticle:TextureRegion,float,float,float,float,float,float,float
     +m:addFlashParticleColored:TextureRegion,float,float,float,float,float,float,float,Color
     +m:addLimitedParticle:ParticleEffect,LimitedParticleType,float,float
     +m:addOpaqueParticle:ParticleEffect
     +m:addOrbParticle:TextureRegion,float,int,int,int,int
     +m:addParticle:ParticleEffect,boolean
     +m:addRegularShatterParticle:TextureRegion,float,float,float,float,float
     +m:addShatterParticle:TextureRegion,float,float,float,float,float,Color,Interpolation,boolean
     +m:addXpOrbParticle:float,int,int,int,int
     +m:affectsGameState:
     +m:dispose:
     +m:draw:Batch,float,float
     +m:drawDamageParticles:Batch
     +m:getSystemName:
     +m:setup:
     +m:updateDraw:float,float
     +m:willParticleBeSkipped:
    }
    >c:PathRenderingSystem{
     >c:PathEnemyPair{
      +x:
      +f:enemyType
      +f:path
     }
     +x:
     +f:dontDrawOverPlatforms
     +m:affectsGameState:
     +m:dispose:
     +m:draw:Batch,float
     +m:getSystemName:
     +m:postSetup:
     +m:profileUpdate:
     +m:removePaths:
     +m:setPaths:Array
     +m:setup:
     +m:showAllPathTraces:boolean
     +m:updatePathTracesRendering:
    }
    >c:PathfindingSystem{
     -c:OnBuildingRemove
     -c:OnGameValuesRecalculate
     -c:OnGateChange
     -c:OnModifierPlace
     -c:OnTileChange
     -c:OnTowerPlace
     +x:
     +f:pathfindingNodes
     +f:throwExceptionOnMissingPath
     +m:affectsGameState:
     +m:canAllEnemiesFindPath:
     +m:drawDebug:Batch
     +m:findPathBetweenTiles:Tile,Tile
     +m:findPathBetweenXY:int,int,int,int,EnemyType
     +m:findPathToTargetTile:Tile,EnemyType
     +m:forcePathfindingRebuild:
     +m:getDefaultPath:EnemyType,SpawnTile
     +m:getDefaultPathWithoutStateChanges:EnemyType,SpawnTile
     +m:getEnemyTypesThatCantFindPath:
     +m:getSystemName:
     +m:isWalkablePlatforms:
     +m:postSetup:
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:rebuildPathfinding:
     +m:rebuildPathfindingIfNeeded:
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:ProjectileSystem{
     >c:Factories{
      +x:
      +f:AIR
      +f:BASIC
      +f:BUFF
      +f:BULLET_WALL
      +f:CANNON
      +f:CHAIN_LIGHTNING
      +f:LASER
      +f:MISSILE
      +f:MULTISHOT
      +f:SPLASH
      +f:SPLINTER
      +f:VENOM
     }
     +x:
     +f:F
     +f:nextProjectileId
     +f:projectiles
     +m:affectsGameState:
     +m:dispose:
     +m:draw:Batch,float,float
     +m:getFactory:ProjectileType
     +m:getSystemName:
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:register:Projectile
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:ProjectileTrailSystem{
     +x:
     +m:addOpaqueTrail:ProjectileTrail
     +m:addTrail:ProjectileTrail
     +m:affectsGameState:
     +m:dispose:
     +m:draw:Batch
     +m:drawOpaque:Batch
     +m:getSystemName:
     +m:isEnabled:
     +m:setup:
     +m:updateDraw:float
    }
    >c:QuestSystem{
     >c:Quest{
      +z
      +m:getTitle:
      +m:isCompleted:
      +m:onCompletion:
      +m:update:
     }
     >c:BasicLevelQuest{
      +x:BasicLevel,BasicLevelQuestConfig,GameSystemProvider
      +m:getValue:
      +m:onCompletion:
      +m:update:
     }
     >c:BasicLevelWaveQuest{
      +x:BasicLevel,WaveQuest,GameSystemProvider
      +m:getValue:
      +m:onCompletion:
      +m:update:
     }
     >c:QuestEntry{
      +x:
     }
     >c:RegularQuest{
      +m:getTitle:
      +m:getValue:
      +m:isCompleted:
      +m:update:
     }
     +x:
     +m:addQuest:Quest
     +m:affectsGameState:
     +m:dispose:
     +m:draw:float,float
     +m:getBasicLevelStars:
     +m:getListItem:Quest
     +m:getSystemName:
     +m:postSetup:
     +m:postStateRestore:
     +m:removeQuest:Quest
     +m:removeQuestWithDelay:Quest,float
     +m:saveBasicLevelQuestValues:
     +m:setup:
     +m:update:float
    }
    >c:RenderSystem{
     >c:LayerRenderer{
      +z
      +m:render:Batch,float,float,float
     }
     >c:Layer{
      +x:int,boolean,LayerRenderer
      +f:name
      +f:renderer
      +m:getName:
      +m:getRenderer:
      +m:getZ:
      +m:isAdditive:
      +m:setAdditive:boolean
      +m:setName:String
      +m:setRenderer:LayerRenderer
     }
     +x:
     +f:currentInGameDeltaTime
     +f:currentInterpolatedDeltaTime
     +f:currentRealDeltaTime
     +f:gameOverGameSpeed
     +f:gameOverInterpolatedTime
     +f:gameOverTimestamp
     +m:addLayer:Layer
     +m:affectsGameState:
     +m:calculateDeltaTimes:Render
     +m:dispose:
     +m:drawLayers:Batch
     +m:getCamera:
     +m:getLayer:int
     +m:getSystemName:
     +m:prepareBatch:Batch,boolean
     +m:profileUpdate:
     +m:removeLayer:Layer
     +m:removeLayerByZIndex:int
     +m:setup:
    }
    >c:ScriptSystem{
     +x:
     -f:CLASS_COMPARATOR
     -f:scriptEnvironment
     +m:affectsGameState:
     +m:dispose:
     +m:getSystemName:
     -m:read:Kryo,Input
     +m:runScriptAction:String
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:SoundSystem{
     +x:
     +m:affectsGameState:
     +m:draw:float
     +m:getSystemName:
     +m:playExplosionSound:float
     +m:playShotSound:StaticSoundType,Tower
     +m:playStatic:StaticSoundType
     +m:playStaticParameterized:StaticSoundType,float,float,float
     +m:postSetup:
     +m:profileUpdate:
     +m:setMusicPlaybackHandler:Runnable
     +m:setup:
     +m:updateMusicPlayback:
    }
    >c:StateSystem{
     >c:ActionUpdatePair{
      +x:
      +f:action
      +f:update
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:ActionsArray{
      +x:
      +f:actions
      +f:size
      +m:add:Action
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +f:duplicateActionsTo
     +f:inUpdateStage
     +f:replayFrameCount
     +f:replayMode
     +f:replayRecord
     +f:updateNumber
     +f:updateRequired
     +m:affectsGameState:
     +m:canSkipMediaUpdate:
     +m:checkGameplayUpdateAllowed:
     +m:dispose:
     +m:getCurrentUpdateActions:
     +m:getFastForwardUpdateNumber:
     +m:getSystemName:
     +m:isFastForwarding:
     +m:pushAction:Action,int
     +m:pushActionNextUpdate:Action
     -m:read:Kryo,Input
     +m:requireUpdate:
     +m:startFastForwarding:int
     +m:stopFastForwarding:
     -m:write:Kryo,Output
    }
    >c:StatisticsSystem{
     -c:OnCoinsChange
     -c:OnEnemyDie
     -c:OnEnemyReachTarget
     -c:OnEnemyTakeDamage
     -c:OnGameOver
     -c:OnMinedResourcesChange
     -c:OnMinerBuild
     -c:OnMinerUpgrade
     -c:OnNextWaveForce
     -c:OnScoreChange
     -c:OnTowerBuild
     -c:OnTowerSell
     -c:OnTowerUpgrade
     -c:OnWaveComplete
     +x:
     +f:AVERAGES_COUNT_BUFFER_SIZE
     +f:AVERAGES_COUNT_INTERVAL
     +f:replayChartFrameCounter
     +m:addStatistic:StatisticsType,double
     +m:affectsGameState:
     +m:dispose:
     +m:flushStatistics:
     +m:getAverageCoinsPerMinute:
     +m:getAverageKillsPerMinute:
     +m:getAverageScorePerMinute:
     +m:getBestReplay:
     +m:getCurrentGameStatistic:StatisticsType
     +m:getCurrentGameStatistics:
     +m:getCurrentReplayChart:
     +m:getCurrentReplayChartValues:
     +m:getStatistic:StatisticsType
     +m:getSystemName:
     -m:read:Kryo,Input
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:TowerSystem{
     -c:OnBuildingRemove
     -c:OnEnemyDie
     -c:OnEnemyDieFlamethrowerPapers
     -c:OnEnemyTakeDamage
     -c:OnTickDisableTowersUnderEnemies
     -c:OnTowerPlace
     >c:TowerAbilityCategoryRule{
      +x:int,int[],boolean
      +f:autoInstallSingleVariant
      +f:categoryId
      +f:requiredXpLevels
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +f:TOWER_OUT_OF_ORDER_REASON_MANUAL
     +f:canTowerAttackEnemy
     +f:towerAbilityCategoryRules
     +f:towerAbilityIdxToCategory
     +f:towerEnemyDamageMultiplier
     +f:towers
     +m:affectsGameState:
     +m:applyDrawInterpolation:float
     +m:buildTower:TowerType,AimStrategy,int,int
     +m:buildTowerAction:TowerType,AimStrategy,int,int
     +m:buildTowerActionOnSelectedTile:TowerType
     +m:buildTowerActionWithAimStrategy:TowerType,AimStrategy
     +m:buildTowerIgnorePrice:TowerType,AimStrategy,int,int,boolean
     +m:canTowersBeManuallyDisabled:
     +m:customTowerButtonAction:Tower,int,int
     +m:customTowerButtonActionAt:int,int,int,int
     +m:dispose:
     +m:drawBatchAdditive:Batch,float
     +m:drawRanges:Batch
     +m:drawWeapons:Batch,float
     +m:getBaseUpgradePrice:Tower,int
     +m:getDefaultAimStrategy:
     +m:getGlobalUpgradePrice:TowerType
     +m:getMaxPossibleStat:TowerStatType
     +m:getSystemName:
     +m:getUpgradePrice:Tower
     +m:globalUpgradeTowerAction:TowerType
     +m:isRegistered:Tower
     +m:postSetup:
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:selectGlobalTowerAbilityAction:Tower,int
     +m:selectGlobalTowerAbilityActionAt:int,int,int
     +m:selectTowerAbilityAction:Tower,int
     +m:selectTowerAbilityActionAt:int,int,int
     +m:sellTower:Tower
     +m:sellTowerAction:Tower
     +m:setAbilityInstalled:Tower,int,boolean
     +m:setDefaultAimStrategy:AimStrategy
     +m:setTowerAimStrategy:Tower,AimStrategy
     +m:setTowerAimStrategyAction:Tower,AimStrategy
     +m:setup:
     +m:toggleTowerEnabledAction:
     +m:traverseTilesInRange:Tower,ObjectFilter
     +m:update:float
     +m:updateAbilityAvailableParticleEffect:Tower
     +m:upgradeTower:Tower
     +m:upgradeTowerAction:Tower
     +m:upgradeTowerActionAt:int,int
     -m:write:Kryo,Output
    }
    >c:UnitSystem{
     +x:
     +f:spawnedBallLightnings
     +f:spawnedSnowballs
     +m:affectsGameState:
     +m:drawFlying:Batch,float,float
     +m:drawGrounded:Batch,float,float
     +m:getBallLightningAccumulationTime:
     +m:getSystemName:
     +m:killUnit:Unit,Enemy
     +m:postStateRestore:
     +m:preparePathToRandomSpawn:Unit,Tile
     -m:read:Kryo,Input
     +m:register:Unit
     +m:setup:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:WaveSystem{
     >c:WaveGenerator{
      +z
      +m:generate:int,Wave,GameSystemProvider,int
     }
     >c:Mode{
      +f:ENDLESS
      +f:PREDEFINED
      +m:valueOf:String
      +m:values:
     }
     -c:OnEnemyDie
     -c:OnEnemyReachTarget
     -c:OnEnemyTakeDamage
     >c:Status{
      +f:ENDED
      +f:NOT_STARTED
      +f:SPAWNED
      +f:SPAWNING
      +m:valueOf:String
      +m:values:
     }
     >c:WaveCache{
      +x:
      +x:Wave,int
      +f:wave
      +f:waveNumber
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +f:ENEMY_INTERVAL_DENSITY_HIGH
     +f:ENEMY_INTERVAL_DENSITY_LOW
     +f:NEXT_WAVES_CACHE_SIZE
     +f:ULTRA_DIFFICULT_MILESTONE_MULTIPLIER
     +f:WAVES_TIMELINE_MAX_WAVE
     +f:autoForceWaveEnabled
     +f:bossWaves
     +f:instantWaveCallsEnabled
     +f:mode
     +f:nextWavesCache
     +f:predefinedWaveTemplates
     +f:status
     +f:wave
     +f:wavesToNotifyAboutCompletion
     +m:getEnemiesToSpawn:float,Array
     +m:getWaveValue:int,int
     +m:affectsGameState:
     +m:allWavesSpawned:
     +m:createBossWaveProcessor:BossType
     +m:dispose:
     +m:draw:Batch,float
     +m:forceNextWaveAction:
     +m:freezeTimeToNextWave:float
     +m:generateBossWaveWithProcessor:BossType,int,int
     +m:generateEnemyGroups:int,Mode,WaveDifficultyProvider,int,WaveBossSupplier,Map,long,PredefinedWaveTemplate[]
     +m:generateWave:WaveTemplate,int,int
     +m:generateWave:int,int,PredefinedWaveTemplate
     +m:generateWave:int,int,long,ObjectSet
     +m:generateWavesTimelineConfigurationBasicLevel:BasicLevel,Map,int
     +m:generateWavesTimelineConfigurationUserMap:UserMap,Map,int,WaveBossSupplier
     +m:getCompletedWavesCount:
     +m:getForceWaveBonus:
     +m:getNextOverridableWaveNumber:
     +m:getSystemName:
     +m:getTimeToNextWave:
     +m:getWave:int
     +m:getWaveDifficultyProvider:
     +m:getWaveGenerator:
     +m:getWaveProcessorFactory:BossType
     +m:getWaveStartInterval:
     +m:isAutoForceWaveEnabled:
     +m:isForceWaveAvailable:
     +m:isForceWaveDoubleBonus:
     +m:overrideWave:int,Wave
     +m:postSetup:
     +m:postStateRestore:
     -m:read:Kryo,Input
     +m:resetNextWavesCache:
     +m:setAutoForceWaveEnabled:boolean
     +m:setBossWaves:WaveBossSupplier
     +m:setDifficultyExpectedPlaytime:float
     +m:setForceWaveDoubleBonus:boolean
     +m:setForcedTemplate:String
     +m:setStatus:Status
     +m:setWaveGenerator:WaveGenerator
     +m:setup:
     +m:startNextWave:
     +m:stopSpawningCurrentWave:Wave,Tower,DamageType
     +m:update:float
     -m:write:Kryo,Output
    }
   }
   >p:tiles{
    >c:BossTile{
     >c:BossTileFactory{
      +x:
      +m:create:
      +m:createWithTileType:BossTileType
      +m:fromJson:JsonValue
      +m:getBossTileTypeName:BossTileType
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     >c:BossTypeWavePair{
      +x:int,BossType
      +f:bossType
      +f:wave
      +m:fromJson:JsonValue
      +m:cpy:
      -m:read:Kryo,Input
      +m:sameAs:BossTypeWavePair
      +m:toJson:Json
      +m:toString:
      -m:write:Kryo,Output
     }
     >c:BossWavesConfig{
      +x:int,int,int,Array
      +f:bossWavePairs
      +f:cycleLength
      +f:repeatCount
      +f:startDelay
      +m:fromJson:JsonValue
      +m:cpy:
      -m:read:Kryo,Input
      +m:sameAs:BossWavesConfig
      +m:toJson:Json
      +m:toString:
      -m:write:Kryo,Output
     }
     +f:customBossWaveConfig
     +f:customEffects
     +f:oneBossType
     +m:addSellItems:Array
     +m:affectedByLuckyWheelMultiplier:
     +m:canBeUpgraded:
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateUiIcon:float
     +m:getBossTileType:
     +m:getBossTileTypeName:
     +m:getBossWaveMap:
     +m:getBossWavesConfig:
     +m:getGameValues:
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:setBossTileType:BossTileType
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:CoreTile{
     >c:CoreTileFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:getExperienceGeneration:CoreTile,GameValueProvider
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:getTierColor:Tier
      +m:getTierDescription:Tier
      +m:setupAssets:
     }
     >c:LinkDirection{
      +f:BOTTOM
      +f:BOTTOM_LEFT
      +f:BOTTOM_RIGHT
      +f:LEFT
      +f:RIGHT
      +f:TOP
      +f:TOP_LEFT
      +f:TOP_RIGHT
      +f:values
      +m:getDeltaCol:LinkDirection
      +m:getDeltaRow:LinkDirection
      +m:getOpposite:LinkDirection
      +m:valueOf:String
      +m:values:
     }
     >c:Tier{
      +f:LEGENDARY
      +f:RARE
      +f:REGULAR
      +f:values
      +m:valueOf:String
      +m:values:
     }
     >c:Upgrade{
      >c:UpgradeLevel{
       +x:
       +x:float,int
       +f:delta
       +f:price
       +m:fromJson:JsonValue
       +m:cpy:
       -m:read:Kryo,Input
       +m:toJson:Json
       -m:write:Kryo,Output
      }
      +x:
      +x:boolean,boolean,GameValueType,TriggeredActionType,Array,int,boolean
      +f:costsCoins
      +f:isAction
      +f:links
      +f:starting
      +f:upgradeLevels
      +m:fromJson:JsonValue
      +m:cloneUpgrade:
      +m:generateHash:
      +m:getActionType:
      +m:getGameValueType:
      +m:hasLink:LinkDirection
      -m:read:Kryo,Input
      +m:sameAs:Upgrade
      +m:setActionType:TriggeredActionType
      +m:setGameValueType:GameValueType
      +m:setHasLink:LinkDirection,boolean
      +m:toJson:Json
      -m:write:Kryo,Output
     }
     +f:FIXED_LEVEL_XP_REQUIREMENT
     +f:LEVEL_EXPERIENCE
     +f:LEVEL_EXPERIENCE_MILESTONES
     +f:LINK_DIRECTION_BITS
     +f:MAX_LEVEL
     +f:TIER_COLS
     +f:TIER_ROWS
     +f:doubleSpeedTimeLeft
     +f:predefinedType
     +f:timeDrawn
     +f:upgradeAvailableParticleEffect
     +m:getUpgradeIdx:Tier,int,int
     +m:addSellItems:Array
     +m:canUpgradeBeInstalled:int,int
     +m:drawBatch:Batch,float,float,float,float,float,DrawMode
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateSeedSalt:
     +m:generateUiIcon:float
     +m:getBaseColors:
     +m:getCurrentLevelExperience:
     +m:getData:IntArray
     +m:getDescription:
     +m:getExperience:
     +m:getExperienceGeneration:
     +m:getFreeUpgradePoints:
     +m:getIcon:
     +m:getInventorySubcategory:
     +m:getLevel:
     +m:getName:
     +m:getNextLevelExperience:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getSphereColor:
     +m:getTier:
     +m:getTitle:
     +m:getUpgrade:int,int
     +m:getUpgradeCols:
     +m:getUpgradeInstallLevel:int,int
     +m:getUpgradeInstallLevelByIdx:int
     +m:getUpgradeRows:
     +m:getUpgrades:
     +m:hasSomethingToUpgrade:
     +m:isRoadType:
     +m:isValidUpgradePos:int,int
     +m:isXpLevelRequirementFixed:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:setExperience:float
     +m:setExperienceGeneration:float
     +m:setIcon:String
     +m:setName:String
     +m:setRegistered:GameSystemProvider
     +m:setTier:Tier
     +m:setTierKeepLayout:Tier
     +m:setUpgrade:int,int,Upgrade
     +m:setUpgradeInstallLevel:int,int,int
     +m:setXpLevelRequirementFixed:boolean
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:DummyTile{
     >c:DummyTileFactory{
      +x:
      +m:create:
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +f:DEFAULT_SCALE
     +f:color
     +f:data
     +f:description
     +f:icon
     +f:iconScale
     +f:selectable
     +f:visible
     +m:addSellItems:Array
     +m:canBeSelected:
     +m:canBeUpgraded:
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateUiIcon:float
     +m:getData:String
     +m:getDescription:
     +m:getId:
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getTexture:
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:removeData:String
     +m:sameAs:Tile
     +m:setData:String,Object
     +m:setId:long
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:EqualizerTile{
     >c:EqualizerTileFactory{
      +x:
      +m:create:
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     >c:Particle{
      +x:
      +f:color
      +f:t
      +f:vX
      +f:vY
      +f:x
      +f:y
     }
     +x:
     +f:CHANNEL_BOTH
     +f:CHANNEL_LEFT
     +f:CHANNEL_RIGHT
     +f:DIRECTION_BOTTOM
     +f:DIRECTION_LEFT
     +f:DIRECTION_RIGHT
     +f:DIRECTION_TOP
     +f:INTERPOLATION_EXP10
     +f:INTERPOLATION_EXP5
     +f:INTERPOLATION_LINEAR
     +f:INTERPOLATION_POW2
     +f:INTERPOLATION_POW3
     +f:barInterpolation
     +f:barSpacing
     +f:barsHeight
     +f:barsWidth
     +f:channel
     +f:colorHigh
     +f:colorLow
     +f:cutout
     +f:direction
     +f:drawAlways
     +f:fixedMaxValue
     +f:maxValueEasing
     +f:particlesEnabled
     +f:revertBars
     +f:shiftX
     +f:shiftY
     +f:spectrumConfig
     +f:spectrumDropoff
     +f:spectrumFrequencies
     +m:addSellItems:Array
     +m:canBeSelected:
     +m:canBeUpgraded:
     +m:drawBatch:Batch,float,float,float,float,float,DrawMode
     +m:drawFancy:Batch,float,float,float,float
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateUiIcon:float
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:handleConfigChanged:
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:GameValueTile{
     >c:GameValueTileFactory{
      +x:
      +m:create:
      +m:createTypeDelta:GameValueType,double
      +m:createTypeDeltaOverwrite:GameValueType,double,boolean
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +m:addSellItems:Array
     +m:canBeUpgraded:
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateUiIcon:float
     +m:getDelta:
     +m:getGameValueType:
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:isFinalMultiplier:
     +m:isOverwrite:
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:setDelta:double
     +m:setFinalMultiplier:boolean
     +m:setGameValueType:GameValueType
     +m:setOverwrite:boolean
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:PlatformTile{
     >c:SpaceTileFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +f:bonusLevel
     +f:bonusType
     +f:building
     +m:addSellItems:Array
     +m:canBeUpgraded:
     +m:createUpgradedTile:
     +m:drawBonusExtras:Batch,float,float,float,float,boolean,boolean
     +m:drawExtras:Batch,float,float,float,float,DrawMode
     +m:drawHoveredRange:Batch,RangeCircle
     +m:drawSelectedRange:Batch,RangeCircle
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateSeedSalt:
     +m:generateUiIcon:float
     +m:getData:IntArray
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getUpgradePriceInAccelerators:
     +m:getUpgradePriceInGreenPapers:
     +m:getUpgradePriceInResources:ResourceType
     +m:getValue:
     +m:getWalkCost:boolean
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:removeExtrasForInventory:
     +m:sameAs:Tile
     +m:sameAsWithExtras:Tile
     +m:setUnregistered:
     +m:toJson:Json
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:QuadTile{
     >c:QuadTileFactory{
      +x:
      +m:create:
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +f:color
     +f:isStatic
     +f:quad
     +m:addSellItems:Array
     +m:canBeSelected:
     +m:canBeUpgraded:
     +m:drawBatch:Batch,float,float,float,float,float,DrawMode
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateUiIcon:float
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getQuad:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:RoadTile{
     >c:RoadTileFactory{
      +x:
      +m:create:
      +m:getProbabilityForPrize:float,InventoryStatistics
     }
     +m:addSellItems:Array
     +m:canBeUpgraded:
     +m:generateUiIcon:float
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getWalkCost:boolean
     +m:isRoadType:
    }
    >c:ScriptTile{
     >c:ScriptTileFactory{
      +x:
      +m:create:
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +m:addSellItems:Array
     +m:canBeSelected:
     +m:drawExtras:Batch,float,float,float,float,DrawMode
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateUiIcon:float
     +m:getId:
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getScript:
     +m:getSortingScore:ItemSortingType
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:setId:long
     +m:setScript:String
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:SourceTile{
     >c:SourceTileFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +f:minedResources
     +f:miner
     +m:addSellItems:Array
     +m:canBeUpgraded:
     +m:drawExtras:Batch,float,float,float,float,DrawMode
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateSeedSalt:
     +m:generateUiIcon:float
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getResourceDensity:
     +m:getResourcesCount:ResourceType
     +m:getSortingScore:ItemSortingType
     +m:isDepleted:
     +m:isRoadType:
     +m:postDrawBatch:Batch,float,float,float,float,float,DrawMode
     -m:read:Kryo,Input
     +m:removeExtrasForInventory:
     +m:sameAs:Tile
     +m:sameAsWithExtras:Tile
     +m:setResourceDensity:float
     +m:setResourcesCount:ResourceType,int
     +m:setUnregistered:
     +m:toJson:Json
     +m:toString:
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:SpawnTile{
     >c:AllowedEnemyConfig{
      +x:
      +x:EnemyType,int,int
      +f:enemyType
      +f:firstWave
      +f:lastWave
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:SpawnTileFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +f:difficulty
     +f:enemySpawnQueues
     +m:addAllowedEnemy:EnemyType,int,int
     +m:addSellItems:Array
     +m:canBeUpgraded:
     +m:drawBatch:Batch,float,float,float,float,float,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillItemCreationForm:ItemCreationOverlay
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateSeedSalt:
     +m:generateUiIcon:float
     +m:getAllowedEnemies:
     +m:getAllowedEnemiesSet:
     +m:getEnemyConfig:EnemyType
     +m:getInventorySubcategory:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getValue:
     +m:getWalkCost:boolean
     +m:isEnemyAllowedOnWave:EnemyType,int
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:removeAllowedEnemy:EnemyType
     +m:sameAs:Tile
     +m:setAllowedEnemies:Array
     +m:setUnregistered:
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:TargetTile{
     >c:TargetTileFactory{
      +x:
      +m:create:
      +m:createRandom:float,RandomXS128
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +m:addGameValue:GameValueConfig
     +m:addSellItems:Array
     +m:canBeUpgraded:
     +m:drawBatch:Batch,float,float,float,float,float,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateSeedSalt:
     +m:generateUiIcon:float
     +m:getBaseColor:
     +m:getCoreColor:
     +m:getGameValues:
     +m:getInventorySubcategory:
     +m:getOverloadLevel:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getWalkCost:boolean
     +m:isDisableAbilities:
     +m:isRoadType:
     +m:isUseStockGameValues:
     +m:isWalkableTiles:
     +m:postDrawBatch:Batch,float,float,float,float,float,DrawMode
     -m:read:Kryo,Input
     +m:removeGameValue:GameValueConfig
     +m:sameAs:Tile
     +m:setDisableAbilities:boolean
     +m:setOverloadLevel:int
     +m:setUseStockGameValues:boolean
     +m:showHitEffect:Vector2
     +m:startExplosionEffect:
     +m:toJson:Json
     +m:updateAppearance:
     -m:write:Kryo,Output
    }
    >c:XmMusicTrackTile{
     >c:XmMusicTrackTileFactory{
      +x:
      +m:create:
      +m:fromJson:JsonValue
      +m:getProbabilityForPrize:float,InventoryStatistics
      +m:setupAssets:
     }
     +m:generateNewId:
     +m:addSellItems:Array
     +m:drawExtras:Batch,float,float,float,float,DrawMode
     +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
     +m:fillInventoryWithInfo:Table,float
     +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
     +m:from:Tile
     +m:generateSeedSalt:
     +m:generateUiIcon:float
     +m:getDescriptionCached:
     +m:getId:
     +m:getIdColors:
     +m:getInventorySubcategory:
     +m:getModule:
     +m:getPrestigeScore:
     +m:getRarity:
     +m:getSortingScore:ItemSortingType
     +m:getTitleCached:
     +m:getTrackBase64:
     +m:isRoadType:
     -m:read:Kryo,Input
     +m:sameAs:Tile
     +m:setId:long
     +m:setTrack:String
     +m:toJson:Json
     +m:toString:
     -m:write:Kryo,Output
    }
   }
   >p:towers{
    >c:AirTower{
     >c:AirTowerFactory{
      +x:
      +m:configureSystems:GameSystemProvider
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:shouldDrawAbilityToCache:int
     }
     -c:OnEnemyDie
     -c:OnEnemyTakeDamage
     +f:ABILITY_ALIASES
     +f:MAX_BURN_DAMAGE_ENEMY_HP_PERCENT
     +f:currentTargetIgnited
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:createSpecialAbilityExplosion:float,float,float
     +m:getEnemyPriority:Enemy
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BasicTower{
     >c:BasicTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:setup:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:ABILITY_FOUNDATION
     +m:addExperience:float
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:getSellPrice:
     +m:getWeaponTextures:
     +m:onAbilitySet:int,boolean
     +m:onPreSell:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:BlastTower{
     >c:BlastTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     >c:State{
      +f:NORMAL
      +f:QUAKING
      +f:values
      +m:valueOf:String
      +m:values:
     }
     +f:ABILITY_ALIASES
     +f:TOWER_OUT_OF_ORDER_REASON_QUAKE
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:drawBatch:Batch,float
     +m:drawWeapon:Batch,float,float,float,float
     +m:fillTowerMenu:Group,ObjectMap
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:CannonTower{
     >c:CannonTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:setup:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:ABILITY_FOUNDATION
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:fillTowerMenu:Group,ObjectMap
     +m:getDamageBonusForFoundationRotation:
     +m:getRotationSinceShot:
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:CrusherTower{
     >c:CrusherTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getBuildPrice:GameSystemProvider
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     >c:Hook{
      +x:
      +f:basePos
      +f:chewingTime
      +f:drawPos
      +f:enemyStartDistance
      +f:enemyStartPos
      +f:framesSinceEnemySearch
      +f:missedTarget
      +f:pos
      +f:recruiting
      +f:startingHealth
      +f:status
      +m:getTarget:
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +f:ABILITY_ALIASES
     +m:applyDrawInterpolation:float
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:drawBatch:Batch,float
     +m:drawBatchAdditive:Batch,float
     +m:drawWeapon:Batch,float,float,float,float
     +m:getDisorientationChance:
     +m:getDisorientedUnitCoinPerTile:
     +m:getWeaponTextures:
     +m:onPreSell:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:FlamethrowerTower{
     >c:FlamethrowerTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:instaKillPapersAccumulator
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:drawBatch:Batch,float
     +m:getAttackDelay:
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:removedFromMap:
     +m:setAimStrategy:AimStrategy
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:FreezingTower{
     >c:FreezingTowerFactory{
      +x:
      +f:monitoringTraceTexture
      +m:canKillEnemies:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:ABILITY_COLD_EVAPORATION
     +f:ABILITY_MONITORING_SYSTEM
     +f:ABILITY_SLOW_FREEZING
     +f:GAIN_EXP_COEFF
     +f:MONITORED_TARGET_FREEZING_BONUS
     +f:SNOWBALL_ACCUMULATION_TIME
     +f:SPECIAL_ABILITY_RANGE
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:drawBatch:Batch,float
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:removedFromMap:
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:GaussTower{
     >c:GaussTowerFactory{
      +x:
      +m:configureSystems:GameSystemProvider
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     -c:OnEnemyDie
     >c:Trail{
      +x:
     }
     +f:ABILITY_ALIASES
     +m:getResourceChargeValue:ResourceType
     +m:addExperience:float
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:customButtonAction:int,int
     +m:drawBatch:Batch,float
     +m:drawBatchAdditive:Batch,float
     +m:drawWeapon:Batch,float,float,float,float
     +m:fillTowerMenu:Group,ObjectMap
     +m:getAttackDelay:
     +m:getTargetAngle:
     +m:getWeaponTextures:
     +m:hasCustomButton:
     +m:isCustomButtonNeedMapPoint:
     -m:read:Kryo,Input
     +m:setTargetAngle:float
     +m:setUnregistered:
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCustomButton:ComplexButton,boolean
     -m:write:Kryo,Output
    }
    >c:LaserTower{
     >c:ActiveLaserConfig{
      +x:
      +f:angleDelta
      +f:baseDamage
      +f:durationLeft
      +f:endX
      +f:endY
      +f:projectile
      +f:startX
      +f:startY
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:LaserTowerFactory{
      +x:
      +m:configureSystems:GameSystemProvider
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:shouldDrawAbilityToCache:int
     }
     -c:OnEnemyDie
     +f:ABILITY_ALIASES
     +f:ultDamageBonuses
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:drawBatch:Batch,float
     +m:fillTowerMenu:Group,ObjectMap
     +m:getAttackDelay:
     +m:getUltDamageMultiplier:
     +m:getWeaponTextures:
     +m:onAbilitySet:int,boolean
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:MinigunTower{
     >c:MinigunTowerFactory{
      +x:
      +f:bulletTraceTexture
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:muzzleFlashColor
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:drawBatch:Batch,float
     +m:drawSelectedRange:Batch,RangeCircle
     +m:fillTowerMenu:Group,ObjectMap
     +m:getAttackDelay:
     +m:getBulletsInMagazine:
     +m:getMagazineSize:
     +m:getReloadDuration:
     +m:getTimeSinceLastAttack:
     +m:getTimeSinceReloadStart:
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:setBulletsInMagazine:int
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:MissileTower{
     >c:MissileTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:canAttackEnemy:Enemy
     +m:drawBatch:Batch,float
     +m:drawWeapon:Batch,float,float,float,float
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MultishotTower{
     >c:MultishotTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:setup:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:ABILITY_BUCKSHOT
     +f:ABILITY_COMPACT_WEAPONS
     +f:ABILITY_PENETRATING_BULLETS
     +f:notHitBackProjectileCount
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:fillTowerMenu:Group,ObjectMap
     +m:getBuckshotCoinBonusMult:
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:SniperTower{
     -c:OnEnemyDie
     >c:SniperTowerFactory{
      +x:
      +m:configureSystems:GameSystemProvider
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:AIM_SPEED_MULTIPLIER_PER_ENEMY_IN_CROWD
     +f:MIN_AIM_SPEED_MULTIPLIER_IN_CROWD
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:canAttack:
     +m:drawBatch:Batch,float
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:SplashTower{
     -c:OnEnemyDie
     >c:SplashTowerFactory{
      +x:
      +m:configureSystems:GameSystemProvider
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:ABILITY_FAST_BULLETS
     +f:ABILITY_FAST_MECHANISM
     +f:ABILITY_PENETRATING_BULLETS
     +m:triggerChainReaction:GameSystemProvider,SplashTower,SplashProjectile
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:drawBatch:Batch,float
     +m:drawWeapon:Batch,float,float,float,float
     +m:getAttackDelay:
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
    >c:TeslaTower{
     >c:TeslaTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:SPECIAL_ABILITY_RANGE
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:drawBatch:Batch,float
     +m:getWeaponTextures:
     -m:read:Kryo,Input
     +m:shouldSearchForTarget:
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:VenomTower{
     >c:VenomTowerFactory{
      +x:
      +m:create:
      +m:getAbilityAliases:
      +m:getAbilityConfigs:GameSystemProvider,Tower
      +m:getBuildHotKey:
      +m:getColor:
      +m:getGeneralizedStat:GeneralizedTowerStatType
      +m:setup:
      +m:setupAssets:
      +m:shouldDrawAbilityToCache:int
     }
     +f:ABILITY_ALIASES
     +f:ABILITY_FAST_SHELLS
     +m:attack:int
     +m:calculateStat:TowerStatType
     +m:canAim:
     +m:drawBatch:Batch,float
     +m:drawGlitch:Batch
     +m:getEnemyPriority:Enemy
     +m:getPoisonousCloudRange:
     +m:getUltimateChance:
     +m:getWeaponTextures:
     +m:placedOnMap:
     -m:read:Kryo,Input
     +m:removedFromMap:
     +m:shouldSearchForTarget:
     +m:update:float
     +m:updateCache:
     -m:write:Kryo,Output
    }
   }
   >p:ui{
    >p:actors{
     >c:AbilitySlotButton{
      +x:boolean,GameValueProvider
      +m:getAbility:
      +m:getCount:
      +m:getEnergyCost:
      +m:getGameEnergy:
      +m:isSelected:
      +m:setAbility:AbilityType
      +m:setCount:int
      +m:setGameEnergy:float
      +m:setSelected:boolean
      +m:update:
     }
     >c:AimStrategySelector{
      >c:AimStrategySelectorListener{
       +z
       +m:strategyChanged:AimStrategy
      }
      +x:
      +m:act:float
      +m:addListener:AimStrategySelectorListener
      +m:removeListener:AimStrategySelectorListener
      +m:setStrategy:AimStrategy,boolean,boolean
      +m:sizeChanged:
     }
     >c:AnimatedImage{
      +x:Animation
      +m:act:float
     }
     >c:AttentionRaysUnderlay{
      +x:float,Color
      +f:size
      +m:restart:
      +m:setColor:Color
     }
     >c:ButtonHoldHint{
      +x:float,float,float
      +f:disappearing
      +m:draw:Batch,float
     }
     >c:ComplexButton{
      +x:CharSequence,LabelStyle,Runnable
      +x:CharSequence,LabelStyle,Runnable,Runnable
      +f:background
      +f:backgroundShadow
      +f:holdHintIcon
      +f:icon
      +f:iconShadow
      +f:label
      +f:labelShadow
      +m:setBackground:Drawable,float,float,float,float
      +m:setBackgroundColors:Color,Color,Color,Color
      +m:setClickHandler:Runnable
      +m:setEnabled:boolean
      +m:setHoldHintIconBright:boolean
      +m:setIcon:Drawable
      +m:setIconColors:Color,Color,Color,Color
      +m:setIconLabelColors:Color,Color,Color,Color
      +m:setIconLabelShadowEnabled:boolean
      +m:setIconPositioned:Drawable,float,float,float,float
      +m:setLabel:float,float,float,float,int
      +m:setLabelColors:Color,Color,Color,Color
      +m:setMuted:boolean
      +m:setText:CharSequence
      +m:setTextFromInt:int
     }
     >c:EffectTooltip{
      +x:Drawable,CharSequence
      +m:setColor:Color
      +m:setHint:CharSequence
      +m:setIcon:Drawable
      +m:setTitle:CharSequence
     }
     >c:ExpLine{
      +x:
      +m:setCoeff:float
      +m:setColor:Color
     }
     >c:FancyButton{
      +x:String,Runnable
      +x:String,Runnable,Runnable
      +f:label
      +m:setFlavor:String
      +m:withLabel:int,CharSequence
     }
     >c:GameplayBonusSummary{
      +x:GameSystemProvider
      +f:S
      +f:bar
      +f:barParticles
      +f:icon
      +f:iconGlow
      +f:iconShadow
      +f:objectiveLabel
      +f:stageNumberLabel
      +m:update:
     }
     >c:GroupClipping{
      +x:
      +m:draw:Batch,float
     }
     >c:HighlightActor{
      +x:Actor
      +m:draw:Batch,float
     }
     >c:HorizontalSlider{
      +x:float,double,double,double,ObjectConsumer
      +f:HANDLE_WIDTH
      +f:HEIGHT
      +m:getValue:
      +m:setNotifyOnDrag:boolean
      +m:setValue:double,boolean
     }
     >c:HotKeyHintLabel{
      +x:int[],float,float
      +x:int[],float,float,int
      +f:debug
      +m:generateHotKeysLabelText:int[]
      +m:isAvailable:
      +m:isEnabled:
      +m:addVariant:int[]
      +m:draw:Batch,float
     }
     >c:ImageWithParentColor{
      +x:
      +x:Drawable
      +x:TextureRegion
      +m:draw:Batch,float
     }
     >c:ItemCell{
      +x:
      +f:COMPACT_SIZE_COEFF
      +f:HEIGHT
      +f:WIDTH
      +f:overlay
      +m:act:float
      +m:draw:Batch,float
      +m:getCount:
      +m:getItem:
      +m:isSelected:
      +m:markStarred:boolean
      +m:reveal:
      +m:setColRow:int,int
      +m:setCompact:
      +m:setCornerText:CharSequence
      +m:setCount:int
      +m:setCovered:boolean
      +m:setIconAndCount:Actor,float,int
      +m:setItem:Item,int
      +m:setItemStack:ItemStack
      +m:setNoRarityBackground:boolean
      +m:setNotificationBubbleEnabled:boolean
      +m:setSelected:boolean
      +m:shine:boolean,boolean
      +m:showRays:boolean
     }
     >c:Label{
      >c:LabelStyle{
       +x:
       +x:LabelStyle
       +x:BitmapFont,Color
       +f:background
       +f:font
       +f:fontColor
      }
      +x:CharSequence,LabelStyle
      +m:draw:Batch,float
      +m:getFontScaleX:
      +m:getFontScaleY:
      +m:getGlyphLayout:
      +m:getLabelAlign:
      +m:getLineAlign:
      +m:getPrefHeight:
      +m:getPrefWidth:
      +m:getStyle:
      +m:getText:
      +m:getWrap:
      +m:invalidate:
      +m:layout:
      +m:setAlignment:int
      +m:setAlignmentSeparate:int,int
      +m:setEllipsis:boolean
      +m:setEllipsisString:String
      +m:setFontScale:float
      +m:setFontScaleSeparate:float,float
      +m:setFontScaleX:float
      +m:setFontScaleY:float
      +m:setStyle:LabelStyle
      +m:setText:CharSequence
      +m:setTextFromInt:int
      +m:setWrap:boolean
      +m:textEquals:CharSequence
      +m:toString:
     }
     >c:LabelButton{
      +x:CharSequence,LabelStyle,Runnable
      +f:hoverColor
      +f:normalColor
      +m:setClickHandler:Runnable
      +m:setColors:Color,Color
     }
     >c:LabelToggleButton{
      +x:
      +x:String,boolean,ObjectConsumer
      +x:String,boolean,int,float,ObjectConsumer
      +x:String,boolean,int,float,boolean,ObjectConsumer
      +f:hoverColor
      +f:label
      +f:normalColor
      +f:onToggle
      +f:toggleImage
      +m:isEnabled:
      +m:setEnabled:boolean
      +m:setText:CharSequence
      +m:setup:String,boolean,int,float,boolean,ObjectConsumer
      +m:updateColor:
     }
     >c:LabelWithShadow{
      +x:CharSequence,LabelStyle
      +f:shadowColor
      +f:shiftX
      +f:shiftY
      +m:draw:Batch,float
      +m:setShadowColor:Color
      +m:setShadowShift:float,float
     }
     >c:LimitedWidthLabel{
      +x:CharSequence,int,int,float
      +m:setText:CharSequence
     }
     >c:LinearChartActor{
      +x:
      +m:act:float
      +m:draw:Batch,float
      +m:setChart:FloatArray
      +m:setChartFromInterpolation:InterpolationType
      +m:setColor:Color,Color
     }
     >c:ModelView{
      >c:Transformer{
       +m:transform:ModelView,float,float
      }
      +x:int,int,Transformer,Environment,boolean
      +f:rotateModelAround
      +f:camera
      +f:environment
      +f:height
      +f:model
      +f:modelCache
      +f:modelCacheUpdateRequired
      +f:width
      +m:act:float
      +m:dispose:
      +m:draw:Batch,float
      +m:requireModelCacheUpdate:
      +m:requireRedraw:
      +m:saveScreenshot:String
      +m:setEnvironment:Environment
      +m:setModel:ModelInstance,float
      +m:setModelPart:Model,String,Material,float
      +m:setSize:int,int
      +m:setTransformer:Transformer
      +m:updateModelCacheIfRequired:
     }
     >c:OverlayContinueButton{
      +x:String,String,Color,Color,Color,Runnable
      +f:label
     }
     >c:PaddedImageButton{
      +x:Drawable,Runnable,Color,Color,Color
      +f:disableClickThrough
      +m:getClickHandler:
      +m:getDisabledColor:
      +m:getIcon:
      +m:hideShadow:
      +m:setClickHandler:Runnable
      +m:setColors:Color,Color,Color
      +m:setDisabledColor:Color
      +m:setEnabled:boolean
      +m:setIcon:Drawable
      +m:setIconPosition:float,float
      +m:setIconSize:float,float
      +m:setShadow:Drawable,float,float,float,float,Color
      +m:updateColors:
     }
     >c:PanZoomTooltip{
      +x:
      +m:dispose:
      +m:hide:
      +m:show:
     }
     >c:ParticlesCanvas{
      >c:ParticleConfig{
       +x:
       +f:effect
       +f:x
       +f:y
      }
      +x:
      +f:scissors
      +m:addParticle:ParticleEffect,float,float
      +m:addParticleForeground:ParticleEffect,float,float,boolean
      +m:clearParticles:
      +m:draw:Batch,float
      +m:removeParticle:ParticleEffect
     }
     >c:PieChartActor{
      +x:
      +f:chart
      +m:dispose:
      +m:draw:Batch,float
      +m:getConfigs:
      +m:setConfigs:Array
      +m:setSegmentCount:int
     }
     >c:QuadActor{
      +x:Color,float[]
      +x:Color[],float[]
      +x:float[],Color
      +x:float[],int[]
      +x:float[],Color,Color,Color,Color
      +m:draw:Batch,float
      +m:getTextureRegion:
      +m:getVertexPositions:
      +m:setTextureRegion:TextureRegion
      +m:setVertexColors:Color,Color,Color,Color
      +m:setVertexColorsDirect:int[]
      +m:setVertexColorsSingle:Color
      +m:setVertexPositions:float[]
      +m:setVertices:float[]
     }
     >c:RadialSprite{
      +x:TextureRegion
      +m:draw:Batch,float,float,float
      +m:draw:Batch,float,float,float,float
      +m:draw:Batch,float,float,float,float,float
      +m:getAngle:
      +m:getBottomHeight:
      +m:getLeftWidth:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getRightWidth:
      +m:getTexture:
      +m:getTopHeight:
      +m:setAngle:float
      +m:setBottomHeight:float
      +m:setLeftWidth:float
      +m:setMinHeight:float
      +m:setMinWidth:float
      +m:setOrigin:float,float
      +m:setRightWidth:float
      +m:setScale:float,float
      +m:setTextureRegion:TextureRegion
      +m:setTopHeight:float
     }
     >c:RectButton{
      +x:CharSequence,LabelStyle,Runnable
     }
     >c:RightSideMenuButton{
      +x:String,String,Runnable
      +f:HEIGHT
      +f:WIDTH
      +m:setClickHandler:Runnable
      +m:setColors:Color,Color,Color,Color
      +m:setEnabled:boolean
      +m:setText:CharSequence
     }
     >c:ScreenBorderGradient{
      +x:
      +m:dispose:
      +m:flash:Color,float
      +m:fullscreenFlash:Color,float,Interpolation
     }
     >c:SideMenu{
      >c:SideMenuListener{
       >c:SideMenuListenerAdapter{
        +x:
        +m:offscreenChanged:
        +m:offscreenStartingToChange:
        +m:sideTooltipHidden:
        +m:visibilityChanged:
       }
       +z
       +m:offscreenChanged:
       +m:offscreenStartingToChange:
       +m:sideTooltipHidden:
       +m:visibilityChanged:
      }
      >c:SideMenuContainer{
       +x:SideMenu,String
       +f:sb
       +f:hintLabel
       +f:name
       +m:hide:
       +m:setLabelOverTitle:CharSequence
       +m:setLabelOverTitleTilePos:Tile
       +m:show:
      }
      +x:float
      +f:DEFAULT_WIDTH
      +f:TOGGLE_BUTTON_WIDTH
      +f:sideShadow
      +f:uiLayer
      +m:addListener:SideMenuListener
      +m:addOffscreenBackground:
      +m:createContainer:String
      +m:dispose:
      +m:finalFadeOut:
      +m:getBackgroundContainer:
      +m:getWrapper:
      +m:hideSideTooltip:
      +m:isOffscreen:
      +m:isVisible:
      +m:removeListener:SideMenuListener
      +m:setOffscreen:boolean
      +m:setVisible:boolean
      +m:showSideTooltip:CharSequence,float
     }
     >c:TableButton{
      +x:Runnable
      +x:Runnable,Runnable
      +f:DEFAULT_ACTIVE_BG_COLOR
      +f:DEFAULT_DISABLED_BG_COLOR
      +f:DEFAULT_HOVER_BG_COLOR
      +f:DEFAULT_NORMAL_BG_COLOR
      +f:clickableWhenDisabled
      +m:layout:
      +m:setBackgroundColors:Color,Color,Color,Color
      +m:setBackgroundDrawable:Drawable
      +m:setBackgroundDrawables:Drawable,Drawable,Drawable,Drawable
      +m:setClickHandler:Runnable
      +m:setContentColors:Color,Color,Color,Color
      +m:setEnabled:boolean
      +m:setHoldHandler:Runnable
      +m:setMuted:boolean
      +m:setRectBackground:
     }
     >c:TextFieldXPlatform{
      +x:String,TextFieldStyle
     }
     >c:TrailMultilineActor{
      +x:
      +f:trail
      +m:dispose:
      +m:draw:Batch,float
      +m:setup:Color,float,float,float
      +m:stop:
     }
     -c:WebView
     >c:Window{
      >c:WindowListener{
       >c:Adapter{
        +x:
        +m:closed:
        +m:dragged:
        +m:moved:
        +m:resized:
        +m:shown:
       }
       +z
       +m:closed:
       +m:dragged:
       +m:moved:
       +m:resized:
       +m:shown:
      }
      >c:WindowStyle{
       +x:
       +x:WindowStyle
       +f:alwaysOnTop
       +f:background
       +f:catchAllTouches
       +f:closeButton
       +f:closeButtonColor
       +f:defaultPadding
       +f:draggable
       +f:headerBackground
       +f:inheritWidgetMinSize
       +f:resizeHandleOverlap
       +f:resizeHandleOverlapHeader
       +f:resizeHandleSize
       +f:resizeHandleSizeHeader
       +f:resizeHasMinSize
       +f:resizeable
       +f:scrollPaneStyle
       +f:titleLabelStyle
       +m:setAlwaysOnTop:boolean
       +m:setBackground:Drawable
       +m:setCatchAllTouches:boolean
       +m:setDefaultPadding:float
       +m:setDraggable:boolean
       +m:setHeaderBackground:Drawable
       +m:setInheritWidgetMinSize:boolean
       +m:setResizeHasMinSize:boolean
       +m:setResizeable:boolean
       +m:setScrollPaneStyle:ScrollPaneStyle
       +m:setTitleLabelStyle:LabelStyle
      }
      +x:
      +x:WindowStyle
      +f:headerLayout
      +f:main
      +f:maxHeight
      +f:maxWidth
      +f:minHeight
      +f:minWidth
      +f:title
      +m:getBox:Actor,Rectangle
      +m:moveIntoViewport:Rectangle,Vector2
      +m:act:float
      +m:addListener:WindowListener
      +m:alignToPoint:float,float,int
      +m:bringToFront:
      +m:clampWindowPosition:
      +m:close:
      +m:fitToContent:int,boolean,boolean,boolean
      +m:fitToContentSimple:
      +m:flash:
      +m:getBox:Rectangle
      +m:getContentBox:Rectangle
      +m:getContentHeight:
      +m:getContents:
      +m:getHeaderHeight:
      +m:getMaxHeight:
      +m:getMaxWidth:
      +m:getMinHeight:
      +m:getMinWidth:
      +m:getScrollPane:
      +m:getStyle:
      +m:getTitle:
      +m:getWindowAlign:
      +m:getWindowListeners:
      +m:isAnimated:
      +m:isResizeable:
      +m:positionChanged:
      +m:removeListener:WindowListener
      +m:setAnimated:boolean
      +m:setAppearAlign:int
      +m:setCloseHandler:ObjectConsumer
      +m:setContents:Actor
      +m:setDraggable:boolean
      +m:setPosition:float,float
      +m:setPosition:float,float,int
      +m:setPositionByCorner:int,float,float
      +m:setResizeable:boolean
      +m:setSize:float,float
      +m:setTitle:CharSequence
      +m:show:
      +m:showAtCursor:
      +m:showAtPoint:float,float
      +m:showAtPointAligned:float,float,int
      +m:toString:
     }
    }
    >p:components{
     >c:AbilityMenu{
      +x:GameSystemProvider
      +m:dispose:
      +m:draw:float
      +m:finalFadeOut:
      +m:setVisible:boolean
      +m:update:
     }
     >c:BossHpBar{
      +x:
      +f:HEIGHT
      +f:MAIN_BAR_WIDTH
      +f:WIDTH
      +f:backgroundImage
      +f:barBackgroundLarge
      +f:barBackgroundSmallOne
      +f:barBackgroundSmallTwo
      +f:barLarge
      +f:barSmallOne
      +f:barSmallTwo
      +f:effectIconsTable
      +f:hpLabelCurrent
      +f:hpLabelMax
      +f:iconImage
      +f:iconImageShadow
      +f:largeBarContainer
      +f:marksGroup
      +f:nameLabel
      +f:smallBarOneContainer
      +f:smallBarTwoContainer
      +m:addEffectIcon:Drawable
      +m:addMark:float
      +m:clearEffectIcons:
      +m:clearMarks:
      +m:getBossName:
      +m:getEffectIcons:
      +m:isEffectIconExists:Drawable
      +m:setBossName:String
      +m:setFirstSmallBarColor:Color,Color
      +m:setIcon:Drawable
      +m:setLabelsColor:Color
      +m:setMainBarColor:Color,Color
      +m:setMainHP:double,double
      +m:setSecondSmallBarColor:Color,Color
      +m:setSmallBarOneProgress:double
      +m:setSmallBarTwoProgress:double
      +m:setSmallBarsCount:int
     }
     >c:BossTileMenu{
      +x:SideMenu,GameSystemProvider
     }
     >c:BuildMenu{
      +x:SideMenu,GameSystemProvider
      +m:dispose:
      +m:postSetup:
     }
     >c:CoreMenu{
      +x:SideMenu,GameSystemProvider
      +m:draw:float
     }
     >c:DraggingItemHelper{
      +x:GameSystemProvider
      +m:dispose:
      +m:getIconContainer:
      -m:handleEvent:Event
      -m:handleEvent:Render
      +m:hide:
      +m:setIconShift:float,float
      +m:setIconShiftInstantly:float,float
      +m:setPosition:float,float
      +m:setScale:float
      +m:setScaleInstantly:float
      +m:show:
     }
     >c:FlyingItemsOverlay{
      >c:Paper{
       +x:
       +f:pool
       +m:allowCompletion:
       +m:draw:Batch
       +m:draw:Batch,float
       +m:free:
       +m:isComplete:
       +m:reset:
       +m:setPosition:float,float
       +m:setup:int
       +m:start:
       +m:update:float
      }
      +x:GameSystemProvider
      +m:add:float,float,Actor,int,int,float,float
      +m:addPapers:float,float,int
      +m:dispose:
     }
     >c:GameOverOverlay{
      >c:GameOverItemStack{
       +x:ItemStack
       +f:isDailyLoot
       +f:isDoubled
      }
      +x:GameSystemProvider
      +f:HINT_ALIASES
      +m:dispose:
      +m:isDisposed:
      +m:maximize:
      +m:minimize:
      +m:show:Array,MapPrestigeConfig
     }
     >c:GameStateEditor{
      +x:GameSystemProvider
      +m:dispose:
      +m:draw:float
     }
     >c:GameValueMenu{
      +x:SideMenu,GameSystemProvider
     }
     >c:GameplayBonusesOverlay{
      +x:GameSystemProvider
      +m:dispose:
      +m:hide:
      +m:isVisible:
      +m:show:
     }
     >c:GateMenu{
      +x:SideMenu,GameSystemProvider
      +m:dispose:
     }
     >c:LiveLeaderboard{
      +x:GameSystemProvider
      +m:dispose:
      +m:finalFadeOut:
      +m:toggleVisible:
     }
     >c:MainUi{
      +x:GameSystemProvider
      +f:bossHpBars
      +f:bossHpLinesTable
      +f:customElementsContainer
      +f:gameplayBonusGroup
      +f:particlesCanvas
      +m:addBossHpBar:BossHpBar
      +m:dispose:
      +m:draw:float
      +m:finalFadeOut:
      +m:gameSpeedButtonVisible:
      +m:hideCoins:
      +m:hideDrawModeButton:
      +m:hideGameSpeedButton:
      +m:hideHealth:
      +m:hideMdps:
      +m:hideMessagesButton:
      +m:hideNextWaveButton:
      +m:hideScore:
      +m:hideWaveNumber:
      +m:layoutBossHpBars:
      +m:nextWaveButtonVisible:
      +m:postSetup:
      +m:removeBossHpBar:BossHpBar
      +m:setLevelStarsIcon:int
      +m:setUiScreenshotMode:ScreenshotModeConfig
      +m:showCoins:boolean,Runnable
      +m:showDrawModeButton:boolean,Runnable
      +m:showGameSpeedButton:boolean,Runnable
      +m:showHealth:boolean,Runnable
      +m:showHealthDelta:int
      +m:showMdps:boolean,Runnable
      +m:showMessagesButton:boolean,Runnable
      +m:showNextWaveButton:boolean,Runnable
      +m:showScore:boolean,Runnable
      +m:showWaveNumber:boolean,Runnable
      +m:updateAll:
      +m:updateForceWaveButton:
      +m:updateGameSpeedButton:
      +m:updateGameplayBonus:
      +m:updateHealth:
      +m:updateMdps:
      +m:updateMoney:
      +m:updateScore:
      +m:updateWave:
     }
     >c:MapEditorInventoryMenu{
      >c:MapEditorInventoryMenuListener{
       >c:Adapter{
        +x:
        +m:categoryTabChanged:
        +m:itemSlotClicked:ItemSlot
        +m:itemSlotDrag:ItemSlot,Vector2
        +m:itemSlotDragEnd:ItemSlot,Vector2
        +m:itemSlotDragStart:ItemSlot,Vector2
       }
       +z
       +m:categoryTabChanged:
       +m:itemSlotClicked:ItemSlot
       +m:itemSlotDrag:ItemSlot,Vector2
       +m:itemSlotDragEnd:ItemSlot,Vector2
       +m:itemSlotDragStart:ItemSlot,Vector2
      }
      >c:ItemSlot{
       +m:getItemStack:
       +m:setActive:boolean
       +m:setIconCountVisible:boolean
       +m:setItemStack:ItemStack,boolean
      }
      +x:GameSystemProvider
      +f:cells
      +f:scrollPane
      +m:addListener:MapEditorInventoryMenuListener
      +m:clearListeners:
      +m:deselectAll:
      +m:dispose:
      +m:getSideMenu:
      +m:isStagePointOnInventory:float,float
      +m:isVisible:
      +m:rebuildItemList:
      +m:rebuildSlot:ItemSlot,boolean
      +m:rebuildSlotOfItem:Item,boolean
      +m:removeListener:MapEditorInventoryMenuListener
      +m:setActiveTab:ItemSubcategoryType
      +m:setItemDraggingMode:boolean
     }
     >c:MapEditorItemInfoMenu{
      >c:MapEditorTileInfoMenuListener{
       >c:MapEditorTileInfoMenuListenerAdapter{
        +x:
        +m:menuUpdated:
        +m:selectedElementModified:
       }
       +z
       +m:menuUpdated:
       +m:selectedElementModified:
      }
      +x:GameSystemProvider
      +f:MENU_CONTENT_MAX_HEIGHT
      +f:MENU_CONTENT_PADDING
      +f:MENU_CONTENT_PADDING_BOTTOM
      +f:MENU_CONTENT_WIDTH
      +f:MENU_WIDTH
      +f:ROW_BACKGROUND
      +f:ROW_DEFAULT_HEIGHT
      +f:customData
      +f:expandCodeEditor
      +f:itemDetailsContainer
      +f:itemPosition
      +f:selectBoxStyle
      +f:textFieldStyle
      +m:addListener:MapEditorTileInfoMenuListener
      +m:dispose:
      +m:isSelectionFromInventory:
      +m:listRowBg:int,Table
      +m:notifySelectedElementChanged:
      +m:removeListener:MapEditorTileInfoMenuListener
      +m:setMinimized:boolean
      +m:setVisible:boolean
      +m:update:
     }
     >c:MapEditorUi{
      >c:PreparedTooltip{
       +x:
       +x:String,Actor,CharSequence
       +f:forActor
       +f:id
       +f:message
      }
      >c:ToolButton{
       +x:Drawable,Runnable,Runnable
       +f:HEIGHT
       +f:ICON_SIZE
       +f:ICON_SIZE_ACTIVE
       +f:WIDTH
       +m:setActive:boolean
      }
      +x:GameSystemProvider
      +f:toolButtons
      +m:addToolButton:ToolButton
      +m:dispose:
      +m:isCtrlButtonEnabled:
      +m:toggleCtrlButton:
      +m:updateButtonsLayout:
     }
     >c:MapPrestigeOverlay{
      >c:MapPrestigeOverlayListener{
       +z
       +m:prestigeConfirmed:
      }
      +x:
      +f:listeners
      +m:dispose:
      +m:show:MapPrestigeConfig
     }
     >c:MapShiftButtons{
      >c:MapShiftButtonsListener{
       +z
       +m:expanded:Direction
       +m:reduced:Direction
       +m:shifted:Direction
      }
      >c:Direction{
       +f:DOWN
       +f:LEFT
       +f:RIGHT
       +f:UP
       +f:values
       +m:valueOf:String
       +m:values:
      }
      +x:GameSystemProvider
      +m:addListener:MapShiftButtonsListener
      +m:dispose:
      +m:removeListener:MapShiftButtonsListener
      +m:setMapSizeChangesAllowed:boolean
      +m:update:
     }
     >c:MinerMenu{
      +x:SideMenu,GameSystemProvider
      +m:dispose:
      +m:draw:float
     }
     >c:ModifierMenu{
      +x:SideMenu,GameSystemProvider
      +m:cancelUsingCustomButton:
      +m:dispose:
      +m:draw:float
      +m:isVisible:
      +m:startUsingCustomButton:
      +m:updateCustomButton:
     }
     >c:NewEnemyOverlay{
      +x:GameSystemProvider
      +m:dispose:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      +m:hide:
      +m:show:EnemyType
     }
     >c:PauseMenu{
      +x:GameSystemProvider
      +m:dispose:
      +m:setVisible:boolean
     }
     >c:QuestList{
      >c:QuestListItem{
       +m:isCompleted:
       +m:setCompleted:boolean
       +m:setText:CharSequence
       +m:setTitlePrefix:CharSequence
      }
      +x:
      +f:LIST_ITEM_HEIGHT
      +f:LIST_ITEM_HEIGHT_COMPACT
      +m:addQuestListItem:
      +m:dispose:
      +m:finalFadeOut:
      +m:isVisible:
      +m:removeQuestListItem:QuestListItem
      +m:setVisible:boolean
     }
     >c:RatingForm{
      +x:
      +m:i:
      +m:hide:
      +m:setVisible:boolean
      +m:showFeedbackForm:int
      +m:showRatePrompt:
      +m:showStarsForm:
     }
     >c:ResearchMenu{
      +x:SideMenu,ResearchesScreen
      +m:dispose:
      +m:draw:float
      +m:update:
     }
     >c:ResearchScreenInventory{
      +x:
      +f:HEIGHT
      +f:WIDTH
      +m:dispose:
      +m:preRender:float
      +m:update:
     }
     >c:RoadMenu{
      +x:SideMenu,GameSystemProvider
      +m:dispose:
     }
     >c:SellButton{
      +x:Runnable
      +m:setColors:Color,Color,Color
      +m:setPrice:int
     }
     >c:SpawnMenu{
      +x:SideMenu,GameSystemProvider
      +f:container
      +f:sideMenu
      +m:dispose:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      +m:update:
     }
     >c:StatisticsChart{
      +x:GameSystemProvider
      +m:dispose:
      +m:draw:float
      +m:finalFadeOut:
      +m:isVisible:
      +m:setVisible:boolean
      +m:update:
     }
     >c:StorylineMessages{
      +x:GameSystemProvider
      +m:add:String
      +m:dispose:
      +m:flushQueue:
      +m:hide:
      +m:queue:String[]
      +m:runOnContinue:Runnable
      +m:show:
     }
     >c:Subtitles{
      +x:
      +m:add:CharSequence
      +m:dispose:
      +m:draw:float
      +m:finalFadeOut:
      +m:schedule:CharSequence[],float,float
     }
     >c:TargetMenu{
      +x:SideMenu,GameSystemProvider
      +m:draw:float
     }
     >c:TileResources{
      +x:float
      +m:getTile:
      +m:setTile:SourceTile
     }
     >c:Tooltip{
      +x:
      +m:dispose:
      +m:show:CharSequence
     }
     >c:TowerAbilityButton{
      >c:AbilityButtonListener{
       +z
       +m:abilityConfirmed:
       +m:globalAbilityConfirmed:
      }
      +m:act:float
      +m:addListener:AbilityButtonListener
      +m:isSelected:
      +m:removeListener:AbilityButtonListener
      +m:setSelected:boolean
     }
     >c:TowerMenu{
      +x:SideMenu,GameSystemProvider
      +m:cancelUsingCustomButton:
      +m:dispose:
      +m:draw:float
      +m:hideTowerAbilities:
      +m:hideTowerExperience:
      +m:isVisible:
      +m:showTowerAbilities:boolean,Runnable
      +m:showTowerExperience:boolean,Runnable
      +m:startUsingCustomButton:
     }
     >c:UiElementsEmphasizer{
      +x:GameSystemProvider
      +m:dispose:
      +m:hide:boolean
      +m:show:Actor,Rectangle,String,String,Runnable
     }
     >c:UpgradeSubmenu{
      >c:UpgradeSubmenuListener{
       +z
       +m:globalUpgradeButtonConfirmed:
       +m:upgradeButtonConfirmed:
       +m:upgradeButtonStateChanged:boolean
      }
      +x:
      +f:upgradeButton
      +m:act:float
      +m:addListener:UpgradeSubmenuListener
      +m:isButtonSelected:
      +m:removeListener:UpgradeSubmenuListener
      +m:setButtonSelected:boolean
     }
     >c:XmMusicTrackMenu{
      +x:SideMenu,GameSystemProvider
      +m:dispose:
     }
    }
    >p:events{
     >c:MoveToFrontListener{
      >c:MoveToFrontEvent{
       +x:
      }
      +m:actorMovedToFront:MoveToFrontEvent,Actor,boolean
      +m:handle:Event
     }
    }
    >p:shared{
     -p:luaWhitelistEditor
     >p:stateDebugger{
      >p:listeners{
       >c:ListenerGroupViewer{
        +x:EventListeners
        +m:close:
        +m:showAtPointAligned:float,float,int
       }
      }
      >c:GameListenersView{
       +x:
       +m:getId:
       +m:getName:
       +m:onShow:
      }
      >c:GlobalListenersView{
       +x:
       +m:getId:
       +m:getName:
       +m:onShow:
      }
      >c:ListenersView{
       +f:dispatcher
       +m:init:
       +m:onHide:
       +m:onRender:
       +m:onShow:
       +m:postInit:
       +m:rebuildWindow:
       +m:setDispatcher:EventDispatcher
      }
      >c:UtilitiesView{
       +x:
       +m:getId:
       +m:getName:
       +m:init:
       +m:onHide:
       +m:onRender:
       +m:onShow:
       +m:postInit:
       +m:rebuildWindow:
      }
     }
     >c:AbilitySelectionOverlay{
      >c:SelectedAbilitiesConfiguration{
       +x:
       +x:SelectedAbilitiesConfiguration
       +f:counts
       +f:slots
       +m:fromJson:JsonValue
       +m:getSlot:AbilityType
       -m:read:Kryo,Input
       +m:toJson:Json
       -m:write:Kryo,Output
      }
      +x:
      +m:i:
      +m:hide:
      +m:isVisible:
      +m:selectSlot:int
      +m:setSelectedSlotAbilityType:AbilityType
      +m:setVisible:boolean
      +m:show:Runnable,ObjectConsumer
      +m:update:
     }
     >c:BackButton{
      +x:
      +m:i:
      +m:hide:
      +m:setClickHandler:Runnable
      +m:setText:CharSequence
      +m:setVisible:boolean
      +m:setVisible:boolean,boolean
     }
     >c:CameraTools{
      >c:Scenario{
       >c:Keyframe{
        +x:
        +f:frame
        +f:iX
        +f:iY
        +f:iZ
        +f:x
        +f:y
        +f:z
        +m:fromJson:JsonValue
        +m:toJson:Json
       }
       +x:
       +f:fps
       +f:keyframes
       +f:length
       +f:name
       +f:startFrame
       +m:fromJson:JsonValue
       +m:calculate:float
       +m:getDuration:
       +m:getKeyframe:int
       +m:removeKeyframe:int
       +m:setKeyframe:int,float,InterpolationType,float,InterpolationType,float,InterpolationType
       +m:setKeyframeX:int,float,InterpolationType
       +m:setKeyframeY:int,float,InterpolationType
       +m:setKeyframeZ:int,float,InterpolationType
       +m:toJson:Json
      }
      +x:
      +m:i:
      +m:getSelectedScenario:
      +m:hide:
      +m:isVisible:
      +m:postRender:float
      +m:setSelectedScenarioIdx:int,boolean
      +m:setVisible:boolean
      +m:update:
      +m:updateScenarioMenu:
     }
     >c:DailyLootOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:postRender:float
      +m:setVisible:boolean
      +m:show:
     }
     >c:DailyQuestOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:setLeaderBoardDate:String
      +m:setVisible:boolean
      +m:show:DailyQuestLevel
     }
     >c:DarkOverlay{
      +x:
      +m:i:
      +m:addCaller:String,MainUiLayer,int,BooleanSupplier
      +m:addCallerOverlayLayer:String,int,BooleanSupplier
      +m:hide:
      +m:postRender:float
      +m:printDebug:
      +m:removeCaller:String
     }
     >c:DeveloperConsole{
      +x:
      +f:buttonsNStuff
      +m:i:
      +m:dispose:
      +m:hide:
      +m:isCustomSettingsVisible:
      +m:isPersistent:
      +m:postRender:float
      +m:preRender:float
      +m:setCustomSettingsVisible:boolean
      +m:setVisible:boolean
      +m:toggleVisible:
     }
     >c:Dialog{
      +x:
      +f:ignoreEscForFrame
      +m:i:
      +m:getHintTable:
      +m:getLastConfirmId:
      +m:hide:
      +m:isVisible:
      +m:makeConfirmButtonDisabled:int
      +m:postRender:float
      +m:setItemsHintForVisibleDialog:Array
      +m:showAlert:CharSequence
      +m:showAlertWithConfirmCallback:CharSequence,Runnable
      +m:showConfirm:CharSequence,Runnable
      +m:showConfirmWithCallbacks:CharSequence,Runnable,Runnable
      +m:showConfirmWithCallbacksAndId:CharSequence,Runnable,Runnable,String
      +m:showConfirmWithId:CharSequence,Runnable,String
     }
     >c:DifficultyModeOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:setVisible:boolean
     }
     >c:ForwardButton{
      +x:
      +f:DEFAULT_ACTIVE_COLOR
      +f:DEFAULT_DISABLED_COLOR
      +f:DEFAULT_HOVER_COLOR
      +f:DEFAULT_NORMAL_COLOR
      +m:i:
      +m:hide:
      +m:reset:
      +m:setBackgroundColors:Color,Color,Color,Color
      +m:setClickHandler:Runnable
      +m:setEnabled:boolean
      +m:setIcon:Drawable
      +m:setText:CharSequence
      +m:setVisible:boolean
     }
     >c:FullScreenTextEditor{
      -x:
      +m:i:
      +m:hide:
      +m:show:String,ObjectConsumer
     }
     >c:InventoryOverlay{
      >c:TabType{
       +f:CRAFTING
       +f:ITEMS_MAP_EDITOR
       +f:ITEMS_MATERIALS
       +f:ITEMS_OTHER
       +f:PACKS
       +f:values
       +m:valueOf:String
       +m:values:
      }
      +x:
      +m:i:
      +m:dispose:
      +m:hide:
      +m:hideWithToggleButton:boolean
      +m:isPersistent:
      +m:postRender:float
      +m:preRender:float
      +m:rebuildLayoutIfRequired:
      +m:requireLayoutRebuild:
      +m:setSelectedItem:ItemStack
      +m:show:
      +m:update:
      +m:updateAndScroll:float
     }
     >c:IssuedPrizesOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:show:Array
     }
     >c:ItemCountSelectionOverlay{
      >c:ItemCountSelectionListener{
       +z
       +m:countChanged:int
       +m:selectionCanceled:
       +m:selectionConfirmed:int
      }
      +x:
      +m:i:
      +m:getInfoContainer:
      +m:getMaxCount:
      +m:getMinCount:
      +m:getSelectedCount:
      +m:hide:
      +m:setConfirmButtonEnabled:boolean
      +m:setMinMaxCount:int,int
      +m:setSelectedCount:int
      +m:show:CharSequence,int,int,Item,ItemCountSelectionListener
     }
     >c:ItemCreationOverlay{
      +x:
      +f:changeListener
      +f:currentItem
      +f:customIntA
      +f:customIntB
      +f:customObject
      +f:form
      +f:inPlaceItemTypeChangeAllowed
      +f:originalItem
      +f:selectBoxStyle
      +f:textFieldStyle
      +m:i:
      +m:hide:
      +m:hintLabel:String,boolean
      +m:isPersistent:
      +m:label:String
      +m:labelEndRow:String,boolean
      +m:selectBox:SelectBox
      +m:setInPlaceEditingItem:Item,ObjectConsumer,boolean
      +m:show:
      +m:showForItem:Item
      +m:showForItemListenable:Item,ObjectConsumer,boolean
      +m:textField:String,ObjectConsumer
      +m:textFieldEndRow:String,float,ObjectConsumer,boolean
      +m:textFieldOfWidth:String,float,ObjectConsumer
      +m:toggle:String,boolean,ObjectConsumer
      +m:toggle:boolean,String,boolean,ObjectConsumer
      +m:updateForm:
      +m:updateItemIcon:
     }
     >c:ItemDescriptionDialog{
      +x:
      +m:i:
      +m:hide:
      +m:show:Item
      +m:showWithCount:Item,int
     }
     >c:LeaderboardsOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:show:BasicLevel,LeaderboardsMode
     }
     >c:LevelConfigurationEditor{
      +x:
      +m:i:
      +m:requirements:Array,Table,SelectBoxStyle,TextFieldStyle,Runnable
      +m:hide:
      +m:hint:String
      +m:isPersistent:
      +m:show:
      +m:showForLevel:BasicLevel
      +m:textField:String,ObjectConsumer
     }
     >c:LevelStagesEditor{
      +x:
      +m:i:
      +m:hide:
      +m:hint:String
      +m:isPersistent:
      +m:show:
      +m:textField:String,ObjectConsumer
     }
     >c:LoadingOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:show:
      +m:showWithBar:float,CharSequence
     }
     >c:LuajavaWhitelistEditor{
      -x:
      -f:TYPE_COLOR
      +m:i:
      -m:goToEntry:TreeEntry
      +m:hide:
      -m:reInitialize:
      -m:rebuildUi:
      +m:show:
      -m:showClassUsagesWindow:Class
     }
     >c:LuckyWheelOverlay{
      >c:WheelOption{
       +x:ItemStack,float
       +x:ItemStack,float,int
       +f:chance
       +f:item
       +f:wheelMultiplier
       +m:fromJson:JsonValue
       +m:toJson:Json
       +m:toString:
      }
      >c:WheelOptionConfig{
       +x:
       +f:helperVector3
       +f:respinPrepareFromAngle
       +f:wasHit
       +m:getPosRotForAngle:float
       +m:setItemContainerAngle:float
      }
      +x:
      +m:i:
      +m:hide:
      +m:postRender:float
      +m:rebuild:
      +m:setVisible:boolean
     }
     >c:MainMenuUiScene{
      +x:
      +m:i:
      +m:getContents:
      +m:hide:
      +m:rebuildIfNeeded:
      +m:recreate:
     }
     >c:MessagesOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:isVisible:
      +m:show:
      +m:showAtMessage:String
      +m:updateContents:
     }
     >c:MusicListOverlay{
      +x:
      +f:LIST_ITEM_HEIGHT
      +m:i:
      +m:hide:
      +m:isVisible:
      +m:postRender:float
      +m:show:
     }
     >c:Notifications{
      >c:Notification{
       +f:STATUS_HIDING
       +f:STATUS_QUEUED
       +f:STATUS_SHOWING
       +f:STATUS_VISIBLE
       +f:iconImage
       +f:id
       +f:notificationHeight
       +f:status
       +m:hide:float
       +m:showProgress:float,Color
      }
      +x:
      +f:CONTENT_MARGIN_BOTTOM
      +f:CONTENT_MARGIN_LEFT
      +f:CONTENT_WIDTH
      +f:DEFAULT_SHOW_DURATION
      +m:i:
      +m:add:CharSequence,Drawable,Color,StaticSoundType
      +m:addFailure:CharSequence
      +m:addForDuration:CharSequence,Drawable,Color,StaticSoundType,float
      +m:addInfo:CharSequence
      +m:addSuccess:CharSequence
      +m:addWithContents:Table,Drawable,Color,StaticSoundType,float
      +m:dispose:
      +m:hide:
      +m:hideNotification:String
      +m:isPersistent:
      +m:postRender:float
      +m:preRender:float
     }
     >c:OpenedPackOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:show:Array,boolean
     }
     >c:ProfileSummary{
      +x:
      +f:avatar
      +f:hintLabel
      +f:uiLayer
      +m:i:
      +m:hide:
      +m:postRender:float
      +m:setVisible:boolean
      +m:setVisibleClickEnabled:boolean,boolean
      +m:showXpGained:int,int,boolean,boolean
      +m:toggleXpInfoDropdown:
      +m:update:
     }
     >c:QuestPrestigeOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:setVisible:boolean
      +m:show:
     }
     >c:ResourcesAndMoney{
      +x:
      +m:i:
      +m:dispose:
      +m:hide:
      +m:isPersistent:
      +m:postRender:float
      +m:preRender:float
      +m:setVisible:boolean
      +m:updateBoosts:
     }
     >c:ScreenTitle{
      +x:
      +m:i:
      +m:hide:
      +m:setIcon:Drawable
      +m:setText:CharSequence
      +m:setVisible:boolean
     }
     >c:StateDebugger{
      >c:View{
       +z
       +m:getId:
       +m:getName:
       +m:init:
       +m:onHide:
       +m:onRender:
       +m:onShow:
       +m:postInit:
       +m:rebuildWindow:
      }
      +x:
      +f:WINDOW_CONTENTS_PADDING
      +f:WINDOW_CONTENTS_PADDING_TOP
      +f:contentTable
      +f:window
      +m:i:
      +m:tableRowSep:Table,int
      +m:getCurrentSystemProvider:
      +m:getCurrentView:
      +m:getCurrentViewId:
      +m:getView:String
      +m:hide:
      +m:isPersistent:
      +m:rebuildWindow:
      +m:registerView:View
      +m:renderWindow:
      +m:setTab:String
      +m:show:
     }
     >c:TextInputOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:isVisible:
      +m:postRender:float
      +m:show:TextInputListener,String,String,String
     }
     >c:TooltipsOverlay{
      >c:Entry{
       +f:onDispose
       +m:exists:
       +m:setTargetActor:Actor
       +m:setTargetPoint:float,float
      }
      +x:
      +f:MAX_WIDTH
      +f:PREF_WIDTH
      +f:TAG_GENERIC_TOOLTIP
      +m:i:
      +m:hide:
      +m:hideAll:boolean
      +m:hideEntry:String
      +m:isTagShown:String
      +m:isVisible:String
      +m:markTagShown:String
      +m:preRender:float
      +m:showActor:String,Actor,Actor,MainUiLayer,int,int
      +m:showText:String,Actor,CharSequence,MainUiLayer,int,int
     }
     >c:TrophiesListOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:show:
     }
     >c:TrophyViewOverlay{
      +x:
      +m:i:
      +m:hide:
      +m:show:TrophyType
     }
     >c:VisibleDisplayFrameDebugFeature{
      -x:
      +m:i:
      +m:hide:
      +m:isPersistent:
      +m:show:
     }
     >c:WavesTimelineOverlay{
      >c:WavesConfiguration{
       +x:
       +f:enemyConfigs
       +f:enemyGroupsByWave
       +f:startWave
      }
      +x:
      +m:i:
      +m:hide:
      +m:setConfiguration:WavesConfiguration
      +m:setHideListener:Runnable
      +m:setVisible:boolean
     }
     -c:WebBrowser
    }
   }
   >p:units{
    >c:BallLightningUnit{
     >c:BallLightningUnitFactory{
      +x:
      +m:create:
      +m:getBallAnimation:
      +m:getColor:
      +m:getUnitType:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float
     -m:read:Kryo,Input
     +m:setup:Tower,float
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:DisorientedUnit{
     >c:DisorientedUnitFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getUnitType:
      +m:setupAssets:
     }
     +f:coinsPerTilePassed
     +f:maxSumCoins
     +m:drawBatch:Batch,float
     +m:getSpawnedByTower:
     -m:read:Kryo,Input
     +m:setCoinsPerTilePassed:float,int
     +m:setup:Tower,EnemyType,float,float
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:IceFieldUnit{
     >c:IceFieldUnitFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getUnitType:
      +m:setupAssets:
     }
     +f:affectedEnemies
     +f:lifetimeLeft
     +f:touchesLeft
     +m:drawBatch:Batch,float
     -m:read:Kryo,Input
     +m:setup:float,float,float,int
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MicrogunUnit{
     >c:MicrogunUnitFactory{
      +x:
      +f:highlightParticles
      +m:create:
      +m:getColor:
      +m:getUnitType:
      +m:setupAssets:
     }
     +f:parent
     +m:destroy:Enemy
     +m:drawBatch:Batch,float
     +m:drawRange:Batch,RangeCircle
     +m:getSize:
     -m:read:Kryo,Input
     +m:rotateAt:float,float,float,float
     +m:rotateToAngle:float,float,float
     +m:setup:MinigunTower,float,float
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:MineUnit{
     >c:MineUnitFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getUnitType:
      +m:setupAssets:
     }
     +f:existsTime
     +f:explosion
     +f:owner
     +f:rotation
     +f:startPos
     +f:targetPos
     +m:drawBatch:Batch,float
     -m:read:Kryo,Input
     +m:setup:Tower,float,float,float,float,Explosion,Color
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:SnowballUnit{
     >c:SnowballUnitFactory{
      +x:
      +m:create:
      +m:getColor:
      +m:getUnitType:
      +m:setupAssets:
     }
     +m:drawBatch:Batch,float
     +m:onSpawned:
     -m:read:Kryo,Input
     +m:setUnregistered:
     +m:setup:Tower,float
     +m:update:float
     -m:write:Kryo,Output
    }
   }
   >p:utils{
    >p:errorhandling{
     >c:CrashHandler{
      -x:
      +m:handleThreadExceptions:Thread
      +m:handleThreadExceptionsForgiving:Thread
      +m:isThreadExceptionsHandled:Thread
      -m:report:String
      -m:report:String,Throwable
      +m:setActionResolver:ActionResolver
     }
    }
    >p:logging{
     >c:PlatformLogger{
      +z
      +m:debug:String,String
      +m:error:String,String
      +m:info:String,String
      +m:warn:String,String
     }
     >c:LogLevel{
      -x:
      +f:DEBUG
      +f:ERROR
      +f:INFO
      +f:WARNING
      +m:getCurrent:
      +m:getName:byte
      +m:getShortName:byte
      +m:isDebug:
      +m:isInfo:
      +m:isWarning:
      +m:setCurrent:byte
      +m:shortNameToLevel:char
     }
     >c:LogWriter{
      -x:
      +f:LOG_DATE_FORMAT
      +f:LOG_FILE_ENTRY_REGEX
      +f:LOG_FILE_WRITER_STATUS_NOT_STARTED
      +f:LOG_FILE_WRITER_STATUS_SLEEP_NO_ENTRIES
      +f:LOG_FILE_WRITER_STATUS_SLEEP_NO_FILE
      +f:LOG_FILE_WRITER_STATUS_STARTING
      +f:LOG_FILE_WRITER_STATUS_STOPPED
      +f:LOG_FILE_WRITER_STATUS_WRITING
      -f:LOG_ROTATE_AFTER_CHARACTERS
      +m:getWriterStatus:
      -m:run:
     }
     >c:Logger{
      >c:LogListener{
       +z
       +m:onNewLogEntry:LogEntry
      }
      >c:LogEntry{
       +x:byte,long,String,String
       +f:logLevel
       +f:message
       +f:tag
       +f:timestampMs
      }
      -f:DEFAULT_LOG_FILE_NAME
      +f:MAX_TAG_SIZE
      +m:addLogListener:LogListener
      +m:forClass:Class
      +m:forTag:String
      -m:forceLogFileFlushAndRun:Runnable
      -m:getLastLogLines:int
      +m:getPlatformLogger:
      -m:init:ActionResolver
      +m:removeLogListener:LogListener
      -m:setLogFile:FileHandle
      +m:setPlatformLogger:PlatformLogger
     }
     >c:SystemOutPlatformLogger{
      +x:boolean,boolean
      +m:debug:String,String
      +m:error:String,String
      +m:info:String,String
      +m:warn:String,String
     }
     >c:TLog{
      -c:Serializer
      +m:forClass:Class
      +m:forTag:String
      +m:d:String,Object[]
      +m:e:String,Object[]
      +m:getTag:
      +m:i:String,Object[]
      +m:w:String,Object[]
     }
    }
    >p:luaTests{
     >c:TestAnnotationClassRetention{
      +z
     }
     >c:TestAnnotationRuntimeRetention{
      +z
     }
     -c:TestBlacklistedInterface
     >c:TestComplexInterface{
      +z
      +m:end:String
      +m:getSomeInt:int
      +m:getSomeString:
     }
     >c:TestFunctionalInterface{
      +z
      +m:doStuff:String
     }
     >c:TestFunctionalVarargsInterfaceA{
      +z
      +m:doStuff:String[]
     }
     >c:TestFunctionalVarargsInterfaceB{
      +z
      +m:doStuff:int,int[]
     }
     >c:TestInterfaceWithBlacklistedMethod{
      +z
      -m:thisMethodIsBlacklisted:
      +m:thisMethodIsWhitelisted:
     }
     >c:TestInterfaceWithDefaults{
      >c:Defaults{
       +x:
       +m:getAsStringDefaultMethod:TestInterfaceWithDefaults,int
      }
      +z
      +m:getAsStringDefaultMethod:int
      +m:getIntMultipliedByTwo:int
     }
     >c:TestClass{
      +x:int
      +x:int[]
      -x:String
      +x:int,Object[]
      +f:SINGLETON
      -f:SOME_BLACKLISTED_STATIC_FIELD
      +f:SOME_STATIC_FINAL_VAR
      +f:SOME_STATIC_VAR
      -f:someBlacklistedField
      +f:someField
      +f:someOtherField
      +m:staticVarArgMethodA:Object[]
      +m:staticVarArgMethodB:String,Object[]
      +m:staticVarArgMethodC:String,String[]
      +m:staticVarArgMethodD:String,TestClass[]
      +m:staticVarArgMethodE:String,int[][]
      +m:staticVarArgMethodF:String,TestClass[][]
      +m:getSomeField:
      +m:sameNameMethod:String
      +m:sameNameMethod:float
      +m:sameNameMethod:int
      +m:sameNameMethod:int,int
      +m:setSomeField:int
      -m:someBlacklistedField:
      -m:thisMethodIsBlacklisted:
      -m:thisMethodIsWhitelisted:
      +m:toString:
      +m:varArgMethodA:Object[]
      +m:varArgMethodB:String,Object[]
      +m:varArgMethodC:String,String[]
      +m:varArgMethodD:String,TestClass[]
     }
     >c:TestClassWithSubclass{
      >c:TestSubclass{
       +x:
      }
      +x:
     }
    }
    >p:mapeditor{
     >p:tools{
      >c:Draw{
       +x:
       +m:disabled:
       +m:enabled:Tool
       +m:getTooltip:
       +m:paintGate:Gate,int,int,boolean
       +m:paintTile:Tile,int,int
       +m:setup:GameSystemProvider
      }
      >c:Move{
       +x:
       +m:disabled:
       +m:enabled:Tool
       +m:getTooltip:
       +m:setup:GameSystemProvider
      }
      >c:Remove{
       +x:
       +m:disabled:
       +m:enabled:Tool
       +m:getTooltip:
       +m:setup:GameSystemProvider
      }
      >c:SelectRectangle{
       +x:
       +m:disabled:
       +m:enabled:Tool
       +m:getTooltip:
       +m:setup:GameSystemProvider
      }
      >c:View{
       +x:
       +m:disabled:
       +m:enabled:Tool
       +m:getTooltip:
       -m:handleEvent:Event
       -m:handleEvent:MouseClick
       +m:setup:GameSystemProvider
      }
     }
     >c:Selection{
      +x:
      +f:gates
      +f:tiles
      +m:addAll:Selection
      +m:addGate:Gate
      +m:addTile:Tile
      +m:clear:
      +m:containsGate:Gate
      +m:containsTile:Tile
      +m:count:
      +m:cpy:
      +m:dimensions:
      +m:draw:Batch,float,float,float,float,Map
      +m:drawOutline:Batch,float,float,float,float,Color,Color
      +m:getCurrentItem:
      +m:hasTileOn:int,int
      +m:hash:
      +m:isFromInventory:
      +m:removeGate:Gate
      +m:removeTile:Tile
      +m:setFromInventory:boolean
      +m:toString:
     }
     >c:SelectionOutline{
      >c:Edge{
       >c:Side{
        +f:BOTTOM
        +f:LEFT
        +f:RIGHT
        +f:TOP
        +m:valueOf:String
        +m:values:
       }
       +x:int,int,Side
       +f:side
       +f:x
       +f:y
      }
      +x:
      +f:edges
      +m:add:int,int,Side
      +m:removeOverGate:Gate
     }
    }
    >p:simulation{
     >p:providers{
      >c:PerformanceBenchmarkSimProvider{
       +x:
       +m:getName:
       +m:prepareSimForm:SimulationScreen
      }
      >c:SyncCheckSimProvider{
       +x:
       +m:getName:
       +m:prepareSimForm:SimulationScreen
      }
      >c:TowerBenchmarkSimProvider{
       +x:
       +m:getName:
       +m:prepareSimForm:SimulationScreen
      }
     }
     >c:Scenario{
      +z
      +m:cpy:
      +m:getProgress:
      +m:isFinished:
      +m:onUpdate:
      +m:setGSP:GameSystemProvider
      +m:start:GameSystemProvider
     }
     >c:SimLogListener{
      +z
      +m:onLog:byte,String
     }
     >c:SimTypeProvider{
      +z
      +m:getName:
      +m:prepareSimForm:SimulationScreen
     }
     >c:Simulation{
      +z
      +m:getName:
      +m:getProgress:
      +m:isReadyToStart:
      +m:isRunning:
      +m:isSuccessful:
      +m:setSimFinishListener:Runnable
      +m:setSimLogListener:SimLogListener
      +m:start:
      +m:stop:
     }
     >c:AbstractSimulation{
      +m:log:byte,String
      +m:logThrowable:byte,String,Throwable
      +m:setSimLogListener:SimLogListener
     }
     >c:BuildTowerScenario{
      +x:int,TowerType,int[],AimStrategy,float,int,int
      +m:cpy:
      +m:getProgress:
      +m:isFinished:
      +m:onUpdate:
      +m:setGSP:GameSystemProvider
      +m:start:GameSystemProvider
     }
     >c:JustUpdateScenario{
      +x:int
      +m:cpy:
      +m:getProgress:
      +m:isFinished:
      +m:onUpdate:
      +m:setGSP:GameSystemProvider
      +m:start:GameSystemProvider
     }
     >c:PerformanceBenchmarkSim{
      +x:SimConfig,int,int,int
      +f:BENCHMARK_STATE_START_TIMESTAMP
      +f:frameCount
      +f:jobCount
      +f:repeatCount
      +f:simConfig
      +f:threadCount
      +m:getName:
      +m:getProgress:
      +m:isReadyToStart:
      +m:isRunning:
      +m:isSuccessful:
      +m:setSimFinishListener:Runnable
      +m:start:
      +m:stop:
     }
     >c:SimConfig{
      +x:
      +f:basicLevelName
      +f:difficultyMode
      +f:difficultyModeMultiplier
      +f:gameMode
      +f:lootBoost
      +f:rarityBoost
      +f:startTimestamp
      +f:userMapName
      +m:createProgressSnapshotAndInitGSP:SimConfig
      +m:initGSP:SimConfig,ProgressSnapshotForState
      +m:cpy:
      +m:getShortDescription:
     }
     >c:SyncCheckSim{
      +x:SimConfig,Array,Scenario,int,int,int
      +f:extraLoadScenario
      +f:extraLoadThreads
      +f:parallelThreads
      +f:scenarios
      +f:simConfig
      +f:syncCheckFrameInterval
      +m:getName:
      +m:getProgress:
      +m:isReadyToStart:
      +m:isRunning:
      +m:isSuccessful:
      +m:setSimFinishListener:Runnable
      +m:start:
      +m:stop:
     }
     >c:TowerBenchmarkSim{
      >c:ResearchTreeMode{
       +f:FULL_ENDLESS
       +f:FULL_NORMAL
       +f:NO_RESEARCH
       +m:valueOf:String
       +m:values:
      }
      >c:TowerBenchmarkXpConfig{
       +x:String,int,int[]
       +f:abilities
       +f:name
       +f:xpLevel
      }
      +x:SimConfig,String,int,int,ResearchTreeMode,Array,IntArray,IntArray,Array,Array
      +f:BENCHMARK_STATE_START_TIMESTAMP
      +f:benchmarkName
      +f:extraTowerScenarios
      +f:researchTreeMode
      +f:runsPerCombo
      +f:simConfig
      +f:threadCount
      +f:towerTypes
      +f:towerXpConfigs
      +f:upgradeLevels
      +f:waveCounts
      +m:getName:
      +m:getProgress:
      +m:isReadyToStart:
      +m:isRunning:
      +m:isSuccessful:
      +m:setSimFinishListener:Runnable
      +m:start:
      +m:stop:
     }
     >c:TowersBenchmarkScenario{
      >c:ExtraTowers{
       +f:BLAST
       +f:FREEZING
       +f:FREEZING_BLAST
       +f:NONE
       +m:valueOf:String
       +m:values:
      }
      +x:int,TowerType,int[],AimStrategy,float,int,int,ExtraTowers
      +f:S
      +f:abilities
      +f:aimStrategy
      +f:angle
      +f:extraTowers
      +f:towerType
      +f:upgradeLevel
      +f:waves
      +f:xpLevel
      +m:cpy:
      +m:getProgress:
      +m:isFinished:
      +m:onUpdate:
      +m:setGSP:GameSystemProvider
      +m:start:GameSystemProvider
     }
    }
    -p:syncchecker
    >c:AssetProvider{
     +z
     +m:get:String
     +m:getDefault:
    }
    >c:BooleanSupplier{
     +z
     +m:getAsBoolean:
    }
    >c:EnumKeyArray{
     -z
     +m:enumerator:
    }
    -c:FileChooser
    >c:FrameAccumulatorForPerformance{
     +z
    }
    >c:IgnoreMethodOverloadLuaDefWarning{
     -z
    }
    >c:IntObjectConsumer{
     +z
     +m:accept:int,Object
     +m:andThen:IntObjectConsumer
    }
    >c:NAGS{
     -z
    }
    -c:NoFieldKryoSerializable
    >c:ObjectConsumer{
     +z
     +m:accept:Object
    }
    >c:ObjectFilter{
     +z
     +m:test:Object
    }
    >c:ObjectSupplier{
     +z
     +m:get:
    }
    >c:PooledCustomEffect{
     +z
     +m:free:
    }
    >c:Predicate{
     +z
     +m:test:Object
    }
    >c:REGS{
     -z
     +m:arrayLevels:
     +m:classOnly:
     +m:serializer:
    }
    -c:ScriptProxyCreator
    >c:TimeAccumulatorForGameplay{
     +z
    }
    >c:WaveBossSupplier{
     >c:MapBased{
      +x:
      +m:add:int,BossType
      +m:cpy:
      +m:getMap:
      +m:getWaveBoss:int
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     >c:Procedural{
      +x:
      +x:BossWavesConfig
      +m:cpy:
      +m:getWaveBoss:int
      +m:getWavesConfig:
      -m:read:Kryo,Input
      +m:toString:
      -m:write:Kryo,Output
     }
     +z
     +m:cpy:
     +m:getWaveBoss:int
    }
    >c:AABB{
     >c:EntryFilter{
      +z
      +m:test:float,float,float
     }
     >c:EntryRetriever{
      +z
      +m:retrieve:Object,float,float,float
     }
     >c:Factory{
      +x:Class,float
      +m:add:Object,float,float,float
      +m:bake:AABB
      +m:reset:
     }
     +f:debugBatch
     +m:entriesExistInRect:float,float,float,float
     +m:getCellSizeXInv:
     +m:getCellSizeYInv:
     +m:getCols:
     +m:getEntityCount:int
     +m:getMaxX:
     +m:getMaxY:
     +m:getMinX:
     +m:getMinY:
     +m:getRows:
     +m:isEmpty:
     +m:lineCanHitEntry:float,float,float,float
     +m:traverseEntriesInLine:float,float,float,float,EntryFilter,EntryRetriever
     +m:traverseEntriesInRect:float,float,float,float,EntryFilter,EntryRetriever
    }
    >c:AABBCounter{
     +x:float
     +m:add:float,float,float
     +m:bake:
     +m:entriesExistInRect:float,float,float,float
     +m:getCellSize:
     +m:getCols:
     +m:getEntityCount:float,float
     +m:getEntityCountByCellIdx:int
     +m:getMaxX:
     +m:getMaxY:
     +m:getMinX:
     +m:getMinY:
     +m:getRows:
     +m:lineCanHitEntry:float,float,float,float
     +m:reset:
    }
    >c:AEC{
     +f:BG_BLACK
     +f:BG_BLUE
     +f:BG_B_BLACK
     +f:BG_B_BLUE
     +f:BG_B_CYAN
     +f:BG_B_GREEN
     +f:BG_B_MAGENTA
     +f:BG_B_RED
     +f:BG_B_WHITE
     +f:BG_B_YELLOW
     +f:BG_CYAN
     +f:BG_GREEN
     +f:BG_MAGENTA
     +f:BG_RED
     +f:BG_WHITE
     +f:BG_YELLOW
     +f:F_BLACK
     +f:F_BLUE
     +f:F_B_BLACK
     +f:F_B_BLUE
     +f:F_B_CYAN
     +f:F_B_GREEN
     +f:F_B_MAGENTA
     +f:F_B_RED
     +f:F_B_WHITE
     +f:F_B_YELLOW
     +f:F_CYAN
     +f:F_GREEN
     +f:F_MAGENTA
     +f:F_RED
     +f:F_WHITE
     +f:F_YELLOW
     +f:RESET
     +f:S_BOLD
     +f:S_REVERSE
     +f:S_UNDER
    }
    >c:AbstractDrawable{
     +f:DRAWABLE_PARAM_BOTTOM_HEIGHT
     +f:DRAWABLE_PARAM_LEFT_WIDTH
     +f:DRAWABLE_PARAM_MIN_HEIGHT
     +f:DRAWABLE_PARAM_MIN_WIDTH
     +f:DRAWABLE_PARAM_RIGHT_WIDTH
     +f:DRAWABLE_PARAM_TOP_HEIGHT
     +m:getBottomHeight:
     +m:getLeftWidth:
     +m:getMinHeight:
     +m:getMinWidth:
     +m:getRightWidth:
     +m:getTopHeight:
     +m:setBottomHeight:float
     +m:setLeftWidth:float
     +m:setMinHeight:float
     +m:setMinWidth:float
     +m:setRightWidth:float
     +m:setTopHeight:float
    }
    >c:BitVector{
     -c:Serializer
     +x:
     +x:int
     +x:BitVector
     +f:words
     +m:and:BitVector
     +m:andNot:BitVector
     +m:cardinality:
     +m:clear:
     +m:clearAtIndex:int
     +m:containsAll:BitVector
     +m:ensureCapacity:int
     +m:equals:Object
     +m:exactlyTheSame:BitVector
     +m:flip:int
     +m:get:int
     +m:getCapacity:
     +m:hashCode:
     +m:intersects:BitVector
     +m:isEmpty:
     +m:length:
     +m:nextClearBit:int
     +m:nextSetBit:int
     +m:or:BitVector
     +m:set:int
     +m:setValue:int,boolean
     +m:toString:
     +m:unsafeClear:int
     +m:unsafeGet:int
     +m:unsafeSet:int
     +m:unsafeSetValue:int,boolean
     +m:xor:BitVector
    }
    >c:CRC{
     >c:Parameters{
      +x:Parameters
      +x:int,long,long,boolean,boolean,long
      +f:CCITT
      +f:CRC16
      +f:CRC32
      +f:CRC32C
      +f:CRC64ECMA
      +f:CRC64ISO
      +f:Castagnoli
      +f:IEEE
      +f:Koopman
      +f:XMODEM2
      +f:XMODEM
      +m:getFinalXor:
      +m:getInit:
      +m:getPolynomial:
      +m:getWidth:
      +m:isReflectIn:
      +m:isReflectOut:
     }
     +x:Parameters
     +m:calculateCRC:Parameters,byte[]
     +m:calculateCRC:Parameters,byte[],int,int
     +m:calculateCRC:byte[]
     +m:calculateCRC:byte[],int,int
     +m:finalCRC16:long
     +m:finalCRC32:long
     +m:finalCRC8:long
     +m:finalCRC:long
     +m:init:
     +m:update:long,byte[]
     +m:update:long,byte[],int,int
    }
    >c:CheatSafeInt{
     +x:int,int
     +m:add:int
     +m:get:
     +m:getSetOnCheat:
     -m:read:Kryo,Input
     +m:set:int
     +m:sub:int
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:CheatSafeLong{
     +x:long,long
     +m:add:long
     +m:get:
     +m:getSetOnCheat:
     -m:read:Kryo,Input
     +m:set:long
     +m:sub:long
     +m:toString:
     -m:write:Kryo,Output
    }
    -c:DebugPool
    >c:DrawUtils{
     +x:
     +m:bakeVertices:float[],TextureRegion,float,float,float,float,float,float,float,float,float
     +m:copyMesh:Mesh,boolean,boolean,int[]
     +m:drawFontToCache:SpriteCache,CharSequence,BitmapFont,float,float,float,float,int,boolean
     +m:drawFontToCacheScaled:SpriteCache,CharSequence,BitmapFont,float,float,float,float,int,boolean,float
     +m:getTexturedLineVertices:TextureRegion,float,float,float,float,float,float,float,float,float,float
     +m:getTexturedMultiLineVertices:float[],float,TextureRegion,float[],int,int
     +m:mergeMeshes:Array,Array
     +m:prepareBezierCurve:float[],Vector2[],int,Color,Color
     +m:texturedLineA:Batch,Texture,float,float,float,float,float,float,float,float,float,float,float,float,float,float
     +m:texturedLineB:Batch,TextureRegion,float,float,float,float,float
     +m:texturedLineC:Batch,TextureRegion,float,float,float,float,float,float,float
     +m:texturedLineCacheA:SpriteCache,TextureRegion,float,float,float,float,float,float,float
     +m:texturedLineCacheB:SpriteCache,TextureRegion,float,float,float,float,float,float,float,float,float,float
     +m:texturedLineD:Batch,TextureRegion,float,float,float,float,float,float,Color,Color
     +m:texturedLineE:Batch,TextureRegion,float,float,float,float,float,float,float,float,Color,Color
     +m:texturedLineF:Batch,TextureRegion,float,float,float,float,float,float,float,float,float,float
     +m:texturedMultiLine:Batch,float,TextureRegion,float[]
    }
    >c:EntityUtils{
     +x:
     +m:removeByValue:Array,Enemy
     +m:removeNullRefs:Array
    }
    >c:FastRandom{
     +x:
     +f:random
     +m:generateUniqueDistinguishableId:
     +m:getDistinguishableString:int,RandomXS128
     +m:getFairFloat:
     +m:getFairInt:int
     +m:getFloat:
     +m:getInt:int
     +m:getLongUUID:
    }
    >c:FileIntegrityChecker{
     -x:
     -m:generateHashListFile:
     +m:runTheTest:
    }
    >c:FileUtils{
     -m:fileToZip:File,File,String
     -m:tail:File,int
    }
    >c:FloatObjectPair{
     +x:
     +x:float,Object
     +f:a
     +f:t
     -m:read:Kryo,Input
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:FloatSorter{
     >c:Entity{
      +x:
      +f:object
      +f:value
     }
     +x:
     +x:Sort
     +f:COMPARATOR
     +m:add:Object,float
     +m:begin:
     +m:end:
     +m:getCount:
     +m:sort:
    }
    >c:FlowField{
     -c:Serializer
     +x:int,int,float
     +m:getCellSize:
     +m:getDirection:int,int
     +m:getHeight:
     +m:getWidth:
     +m:lookup:Vector
     +m:lookup:Vector2
     +m:setDirection:int,int,float,float
    }
    -c:GameResourcesJsonGenerator
    >c:GameSyncLoader{
     >c:SyncExecutionListener{
      +z
      +m:done:
      +m:startedTask:Task,Task
     }
     >c:Task{
      +x:String,Runnable
      +f:title
     }
     +x:
     +m:addListener:SyncExecutionListener
     +m:addTask:Task
     +m:getProgress:
     +m:isDone:
     +m:iterate:
     +m:iterateWithTimeout:long
    }
    >c:I18NBundle{
     -x:
     -m:createBundle:FileHandle
     -m:createBundle:FileHandle,Locale
     -m:getSimpleFormatter:
     -m:setSimpleFormatter:boolean
     +m:debug:String
     +m:format:String,Object[]
     +m:formatStr:String,Object[]
     +m:get:String
     +m:getLocale:
     +m:has:String
     +m:registerCustom:String,String
    }
    -c:I18nGenerator
    >c:InputListenerExtended{
     +x:
     +f:MODE_ALWAYS_FALSE
     +f:MODE_ALWAYS_TRUE
     +f:MODE_AUTO
     +m:getMode:Type
     +m:handle:Event
     +m:setMode:Type,int
    }
    >c:InputMultiplexerExtended{
     +x:
     +x:InputProcessor[]
     +m:addProcessor:InputProcessor
     +m:addProcessorAtIndex:int,InputProcessor
     +m:clear:
     +m:getProcessors:
     +m:isLogging:
     +m:keyDown:int
     +m:keyTyped:char
     +m:keyUp:int
     +m:mouseMoved:int,int
     +m:removeProcessor:InputProcessor
     +m:removeProcessorAtIndex:int
     +m:scrolled:float,float
     +m:setLogging:boolean
     +m:setProcessors:InputProcessor[]
     +m:setProcessorsArray:Array
     +m:size:
     +m:touchCancelled:int,int,int,int
     +m:touchDown:int,int,int,int
     +m:touchDragged:int,int,int
     +m:touchUp:int,int,int,int
    }
    >c:InputVoid{
     +x:
     +m:mouseMoved:InputEvent,float,float
     +m:touchDown:InputEvent,float,float,int,int
    }
    >c:IntObjectPair{
     +x:
     +x:int,Object
     +f:a
     +f:t
     -m:read:Kryo,Input
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:IntPair{
     +x:
     +x:int,int
     +f:a
     +f:b
     +m:toString:
    }
    >c:IntRectangle{
     +x:
     +x:int,int,int,int
     +f:maxX
     +f:maxY
     +f:minX
     +f:minY
     +m:contains:int,int
     +m:extendToContain:int,int
     +m:extendToContainRect:IntRectangle
     +m:overlaps:int,int,int,int
     +m:overlapsRect:IntRectangle
     +m:set:int,int,int,int
     +m:setRect:IntRectangle
    }
    >c:IntUtil{
     +x:
     +m:And:int,int
     +m:Not:int
     +m:Or:int,int
     +m:add:int,int
     +m:div:int,int
     +m:mod:int,int
     +m:mul:int,int
     +m:sls:int,int
     +m:srs:int,int
     +m:sub:int,int
     +m:toInt:int
     +m:urs:int,int
     +m:xor:int,int
    }
    >c:Intersector{
     +m:intersectSegmentCircle:float,float,float,float,float,float,float
     +m:intersectSegmentCircleV:Vector2,Vector2,Vector2,float
     +m:intersectSegmentRect:float,float,float,float,float,float,float,float
     +m:intersectSegmentSegment:float,float,float,float,float,float,float,float
     +m:isPointInRect:float,float,float,float,float,float
     +m:rectanglesOverlap:float,float,float,float,float,float,float,float
    }
    -c:JsonAssertUtils
    -c:JsonHandler
    >c:LimitedBAOS{
     +x:int,int,float
     +m:close:
     +m:reset:
     +m:size:
     +m:toByteArray:
     +m:toString:
     +m:toString:String
     +m:write:byte[],int,int
     +m:write:int
     +m:writeTo:OutputStream
    }
    -c:ListenerSubclass
    >c:MaterialColor{
     >c:AMBER{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:BLUE{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:BLUE_GREY{
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:BROWN{
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:CYAN{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:Colors{
      +f:AMBER
      +f:BLUE
      +f:BLUE_GREY
      +f:BROWN
      +f:CYAN
      +f:DEEP_ORANGE
      +f:DEEP_PURPLE
      +f:GREEN
      +f:GREY
      +f:INDIGO
      +f:LIGHT_BLUE
      +f:LIGHT_GREEN
      +f:LIME
      +f:ORANGE
      +f:PINK
      +f:PURPLE
      +f:RED
      +f:TEAL
      +f:YELLOW
      +f:values
      +m:valueOf:String
      +m:values:
     }
     >c:DEEP_ORANGE{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:DEEP_PURPLE{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:GREEN{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:GREY{
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:INDIGO{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:LIGHT_BLUE{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:LIGHT_GREEN{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:LIME{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:ORANGE{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:PINK{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:PURPLE{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:RED{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:TEAL{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     >c:Variants{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
      +m:valueOf:String
      +m:values:
     }
     >c:YELLOW{
      +f:A100
      +f:A200
      +f:A400
      +f:A700
      +f:P100
      +f:P200
      +f:P300
      +f:P400
      +f:P500
      +f:P50
      +f:P600
      +f:P700
      +f:P800
      +f:P900
      +f:values
     }
     +x:
     +f:BYTE_PALETTE
     +f:BYTE_PALETTE_COLOR_COUNT
     +f:BYTE_PALETTE_VARIANT_COUNT
     +f:allColors
    }
    >c:MovingAverageFloat{
     +x:int
     +m:getAverage:
     +m:getCount:
     +m:push:float
     -m:read:Kryo,Input
     +m:reset:
     -m:write:Kryo,Output
    }
    >c:MovingAverageInt{
     +x:int
     +m:getAverage:
     +m:getAverageFloat:
     +m:push:int
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:MovingAverageLong{
     +x:int
     +m:getAverage:
     +m:push:long
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:MultiOutputStream{
     +x:OutputStream[]
     +m:close:
     +m:flush:
     +m:write:byte[]
     +m:write:byte[],int,int
     +m:write:int
    }
    >c:MultiOutputStreamSync{
     +x:OutputStream[]
     +f:synchronizer
     +m:close:
     +m:flush:
     +m:write:byte[]
     +m:write:byte[],int,int
     +m:write:int
    }
    >c:MultiReasonBool{
     >c:Entry{
      +x:
      +x:String,float
      -m:read:Kryo,Input
      -m:write:Kryo,Output
     }
     +x:
     +m:addReason:String
     +m:addReasonForDuration:String,float
     +m:clear:
     +m:getReasonCount:
     +m:getReasonsBuffer:
     +m:hasReason:String
     +m:isTrue:
     -m:read:Kryo,Input
     +m:removeReason:String
     +m:update:float
     -m:write:Kryo,Output
    }
    >c:ObjectIntPair{
     +x:
     +x:Object,int
     +f:intValue
     +f:object
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:ObjectPair{
     +x:
     +x:Object,Object
     +f:first
     +f:second
     -m:read:Kryo,Input
     +m:reset:
     +m:set:Object,Object
     +m:toString:
     -m:write:Kryo,Output
    }
    >c:PMath{
     +x:
     +m:abgr8888ToColor:int
     +m:addDays:Date,int
     +m:addWithoutOverflow:int,int
     +m:circleIntersectsCircle:float,float,float,float,float,float
     +m:circleIntersectsCircleV:Vector2,float,Vector2,float
     +m:circleIntersectsRect:float,float,float,float,float,float,float
     +m:compareFingerprints:String,Enum[],byte[],Input
     +m:cos:float
     +m:cosDeg:float
     +m:generateNewId:
     +m:getAngleBetweenPoints:Vector2,Vector2
     +m:getAngleBetweenPoints:float,float,float,float
     +m:getBezierCurvePos:Vector2,Vector2,Vector2,Vector2,float
     +m:getByChance:RandomXS128,IntArray
     +m:getByChance:RandomXS128,int[],int
     +m:getDistanceBetweenAngles:float,float
     +m:getDistanceBetweenPoints:Vector2,Vector2
     +m:getDistanceBetweenPoints:float,float,float,float
     +m:getLineCircleIntersection:Vector2,Vector2,Vector2,float,Vector2
     +m:getLineCircleIntersectionFloats:float,float,float,float,float,float,float,Vector2
     +m:getPointByAngleFromPoint:float,float,float,float,Vector2
     +m:getSquareDistanceBetweenPoints:float,float,float,float
     +m:hash:Array[]
     +m:hash:Enum
     +m:hash:IntArray
     +m:hash:String
     +m:hash:Vector2
     +m:hash:boolean
     +m:hash:boolean[]
     +m:hash:byte[]
     +m:hash:double
     +m:hash:float
     +m:hash:float[]
     +m:hash:int
     +m:hash:int[]
     +m:hash:long
     +m:hashGameListeners:ListenerGroup
     +m:intHash:byte[],int,int
     +m:interpolatePoint:Vector2,Vector2,float
     +m:isFinite:double
     +m:isFinite:float
     +m:loopedDistance:float,float,float
     +m:multiplyWithoutOverflow:int,int
     +m:normalizeAngle:float
     +m:parseUnsignedInt:String,int
     +m:randomTriangular:RandomXS128
     +m:randomTriangularMax:float,RandomXS128
     +m:randomTriangularMinMax:float,float,RandomXS128
     +m:randomTriangularMinMaxMode:float,float,float,RandomXS128
     +m:removeArrayIndicesDirect:Array,IntArray
     +m:shiftPointByAngle:Vector2,float,float
     +m:sin:float
     +m:sinDeg:float
     +m:toString:int
     +m:willAdditionOverflow:int,int
     +m:willSubtractionOverflow:int,int
    }
    >c:PackColor{
     +x:
     +x:int
     +x:Color
     +m:fromColors:Color[]
     +m:isLooksLikeColorValue:String
     +m:parseColorConfig:String,ObjectMap
     +m:parseColorConfigArray:String[],ObjectMap
     +m:parseColorValue:String,ObjectMap
     +m:from:PackColor
     +m:getColorArray:
     +m:getColorAtIndex:int
     +m:isArray:
     +m:toString:
    }
    >c:ParallelBatch{
     +x:
     +x:int
     +x:int,ShaderProgram
     +f:FLUSH_VERTICES
     +f:drawing
     +f:maxSpritesInBatch
     +f:renderCalls
     +f:totalRenderCalls
     +m:begin:
     +m:disableBlending:
     +m:dispose:
     +m:draw:Texture,float,float
     +m:draw:Texture,float,float,float,float
     +m:draw:Texture,float,float,float,float,float,float,float,float
     +m:draw:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
     +m:draw:Texture,float,float,float,float,int,int,int,int,boolean,boolean
     +m:draw:Texture,float,float,int,int,int,int
     +m:draw:Texture,float[],int,int
     +m:draw:TextureRegion,float,float
     +m:draw:TextureRegion,float,float,Affine2
     +m:draw:TextureRegion,float,float,float,float
     +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float
     +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float,boolean
     +m:enableBlending:
     +m:end:
     +m:flush:
     +m:getBlendDstFunc:
     +m:getBlendDstFuncAlpha:
     +m:getBlendSrcFunc:
     +m:getBlendSrcFuncAlpha:
     +m:getColor:
     +m:getPackedColor:
     +m:getProjectionMatrix:
     +m:getShader:
     +m:getTransformMatrix:
     +m:isBlendingEnabled:
     +m:isDrawing:
     +m:render:Mesh
     +m:reset:
     +m:setBlendFunction:int,int
     +m:setBlendFunctionSeparate:int,int,int,int
     +m:setColor:Color
     +m:setColor:float,float,float,float
     +m:setPackedColor:float
     +m:setProjectionMatrix:Matrix4
     +m:setShader:ShaderProgram
     +m:setTransformMatrix:Matrix4
    }
    >c:ParallelBatchStack{
     >c:Entry{
      +x:
      +f:batch
      +f:job
      +f:postFlushRunnable
      +f:priority
      +f:threadRunnable
     }
     +x:int,ShaderProgram,int
     +f:batchesOrdered
     +m:dispose:
     +m:execute:
     +m:registerBatch:int,ObjectConsumer
     +m:registerBatchWithFlushCallback:int,ObjectConsumer,Runnable
    }
    >c:Quad{
     +x:AtlasTextureRegion
     +x:Quad,boolean
     +x:float,float
     +f:BINARY_FLOAT_PRECISION
     +f:BINARY_FLOAT_PRECISION_MUL
     +f:outputHelper
     +f:debugging
     +m:floatIsInt:float
     +m:fromByteArray:byte[]
     +m:fromBytes:FixedInput
     -m:fromJson:ArrayNode,AssetProvider
     +m:fromJson:JsonValue
     +m:fromString:String
     +m:getNoQuad:
     +m:intOrFloatString:float
     +m:jsonWriteIntOrFloat:Json,float
     +m:sbWriteIntOrFloat:StringBuilder,float
     +m:stripNonAscii:String
     +m:addRegion:QuadRegion
     +m:appendSet:Quad,Color,float,float,float,float
     +m:draw:Batch,float,float,float,float
     +m:draw:Batch,float,float,float,float,float,float,float
     +m:draw:Batch,float,float,float,float,float,float,float,float,float
     +m:drawDebug:ShapeRenderer,float,float,float,float,float,float,float,float,float
     +m:drawToCache:SpriteCache,float,float,float,float
     +m:getHeight:
     +m:getPivotX:
     +m:getPivotY:
     +m:getRegions:
     +m:getWidth:
     +m:multiplyRegionColors:Color
     +m:replaceRegionsColor:Color,Color
     +m:sameAs:Quad
     +m:set:Quad,boolean
     +m:setHeight:float
     +m:setPivot:float,float
     +m:setSize:float,float
     +m:setWidth:float
     +m:toBase64:
     +m:toBytes:FixedOutput
     +m:toJson5String:StringBuilder
     +m:toJson5StringWithIndent:StringBuilder,int
     +m:toJson:Json
    }
    >c:QuadDrawable{
     +x:
     +x:QuadActor
     +x:QuadDrawable
     +m:draw:Batch,float,float,float,float
     +m:draw:Batch,float,float,float,float,float,float,float,float,float
     +m:getQuadActor:
     +m:setQuadActor:QuadActor
    }
    >c:QuadDrawableStack{
     >c:QuadActorConfig{
      +x:QuadActor,float,float,float,float
      +f:actor
      +f:height
      +f:width
      +f:x
      +f:y
     }
     +x:
     +x:Array
     +x:QuadDrawableStack
     +m:draw:Batch,float,float,float,float
     +m:draw:Batch,float,float,float,float,float,float,float,float,float
     +m:setQuadActors:Array
    }
    >c:QuadRegion{
     >c:CornerColors{
      +z
      +m:cpyCornerColors:
      +m:get:int
      +m:isSingleColor:
      +m:sameAs:CornerColors
      +m:simplifyIfNeeded:
      +m:toJson5String:StringBuilder
      +m:toJson:Json
     }
     >c:AllWhiteCornerColors{
      +x:
      +f:INSTANCE
      +m:cpyCornerColors:
      +m:get:int
      +m:isSingleColor:
      +m:sameAs:CornerColors
      +m:simplifyIfNeeded:
      +m:toJson5String:StringBuilder
      +m:toJson:Json
     }
     >c:FourCornerColors{
      +x:Color,Color,Color,Color
      -m:of:JsonNode
      +m:of:JsonValue
      +m:cpyCornerColors:
      +m:get:int
      +m:isSingleColor:
      +m:sameAs:CornerColors
      +m:simplifyIfNeeded:
      +m:toJson5String:StringBuilder
      +m:toJson:Json
     }
     >c:SingleCornerColor{
      +x:
      +x:Color
      +m:cpyCornerColors:
      +m:get:int
      +m:isSingleColor:
      +m:sameAs:CornerColors
      +m:simplifyIfNeeded:
      +m:toJson5String:StringBuilder
      +m:toJson:Json
     }
     +x:QuadRegion
     +x:float[],float,float
     +x:AtlasTextureRegion,float,float,float,float
     +x:AtlasTextureRegion,float,float,float,float,Color
     +f:COLOR_MODE_INHERIT
     +f:COLOR_MODE_STATIC_RGB
     +f:COLOR_MODE_STATIC_RGBA
     +f:NINE_PATH_NONE
     +f:quadName
     +f:regionName
     +m:fromBytes:FixedInput
     -m:fromJson:JsonNode,AssetProvider
     +m:fromJson:JsonValue
     +m:draw:Batch,float,float,float,float
     +m:draw:Batch,float,float,float,float,float,float,float,float,float
     +m:drawDebug:ShapeRenderer,float,float,float,float,float,float,float,float,float,float
     +m:drawToCache:SpriteCache,float,float,float,float
     +m:getColorMode:
     +m:getCornerColors:
     +m:getCornerPositions:
     +m:getHeight:
     +m:getNinePathRegion:
     +m:getQuadName:
     +m:getRegionName:
     +m:getTextureRegion:
     +m:getWidth:
     +m:getX:
     +m:getY:
     +m:isDebugging:
     +m:isFullSizeRect:
     +m:isSingleColor:
     +m:isVisible:
     +m:multiplyCornerColors:Color
     +m:rotateAround:float,float,float
     +m:sameAs:QuadRegion
     +m:set:QuadRegion
     +m:setColorMode:byte
     +m:setCornerColorsObject:CornerColors
     +m:setCornerColorsSeparate:Color,Color,Color,Color
     +m:setCornerPositions:float,float,float,float,float,float,float,float
     +m:setCornerPositions:float[]
     +m:setDebugging:boolean
     +m:setNinePathRegion:byte
     +m:setPosition:float,float
     +m:setRegionName:String
     +m:setRegionNameFromProvider:String,AssetProvider
     +m:setSameCornerColors:Color
     +m:setTextureRegion:AtlasTextureRegion
     +m:setVisible:boolean
     +m:shiftPositionToMatchCorners:
     +m:toBytes:FixedOutput
     +m:toJson5String:StringBuilder
     +m:toJson:Json
     +m:translate:float,float
     +m:updateSize:
    }
    >c:ReflectionUtils{
     -c:LuaRelated
     -x:
     -f:CONSTRUCTOR_COMPARATOR
     -f:FIELD_COMPARATOR
     -f:METHOD_COMPARATOR
     -m:getAllSerializableFields:Class
     -m:getClassByName:String
     -m:getEnumKeyArrayFieldAnnotationCached:Field
     -m:isFieldIgnoredBySerialization:Field
     +m:isFirstOverridesSecond:Class,Class
     -m:newObject:Class
    }
    -c:SafePools
    >c:SpriteCacheExtended{
     >c:CacheArray{
      +x:String,int,ShaderProgram,boolean
      +f:dirty
      +m:dispose:
      +m:end:
      +m:getPreparedCaches:
      +m:getShaderProgram:
      +m:getSizePerCache:
      +m:isUseIndices:
      +m:start:
      +m:swapCachesIfFull:
     }
     +x:String,int,ShaderProgram,boolean
     +f:addCount
     +f:lastCacheId
     +f:maxAdds
     +f:size
     +f:useIndices
     +f:vertexPerAdd
     +m:createDefaultShader:
     +m:add:Texture,float[],int,int
     +m:beginCache:
     +m:clear:
     +m:disableBlending:
     +m:draw:Texture,float,float
     +m:draw:Texture,float,float,float,float
     +m:draw:Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean
     +m:draw:Texture,float,float,float,float,int,int,int,int,boolean,boolean
     +m:draw:Texture,float,float,int,int,int,int
     +m:draw:Texture,float[],int,int
     +m:draw:TextureRegion,float,float
     +m:draw:TextureRegion,float,float,Affine2
     +m:draw:TextureRegion,float,float,float,float
     +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float
     +m:draw:TextureRegion,float,float,float,float,float,float,float,float,float,boolean
     +m:enableBlending:
     +m:endCache:
     +m:flush:
     +m:getBlendDstFunc:
     +m:getBlendDstFuncAlpha:
     +m:getBlendSrcFunc:
     +m:getBlendSrcFuncAlpha:
     +m:getShader:
     +m:isBlendingEnabled:
     +m:isFull:
     +m:setAlphaMultiplier:float
     +m:setBlendFunction:int,int
     +m:setBlendFunctionSeparate:int,int,int,int
     +m:setOutputToBatch:Batch
    }
    >c:StringFormatter{
     >c:MeasureUnits{
      +f:degrees
      +f:degrees_per_second
      +f:percent
      +f:percent_per_second
      +f:seconds
      +f:tiles
      +f:tiles_per_second
      +f:units_per_second
      +f:values
      +m:valueOf:String
      +m:values:
     }
     +x:
     +f:DISTINGUISHABLE_STRING_CHARS
     +f:DIST_STRING_CHAR_TO_IDX
     +f:VALID_EMAIL_ADDRESS_REGEX
     +m:bytesMd5Hash:byte[]
     +m:bytesToHex:byte[]
     +m:calculateWidth:CharSequence,BitmapFont
     +m:commaSeparatedNumber:long
     +m:compactBytes:byte[],int,int
     +m:compactNumber:double,boolean
     +m:compactNumberWithPrecision:double,int
     +m:compactNumberWithPrecisionTrimZeros:double,int,boolean
     +m:digestTime:int
     +m:digestTimeWithZeroHours:int,boolean
     +m:distinguishableString:int
     +m:fitToWidth:CharSequence,float,BitmapFont,CharSequence
     +m:fromBase64:String
     +m:fromCompactBase64:String
     +m:fromCompactBytes:byte[],int,int
     +m:intToString:int
     +m:md5Hash:String
     +m:md5HashToBytes:String
     +m:romanNumber:int
     +m:shortenFirstWord:String
     +m:stringFromCompactBase64:String
     +m:stringToCompactBase64:String
     +m:stripTerminalColors:String
     +m:timePassed:int,boolean,boolean
     +m:toBase64:byte[],int,int
     +m:toCompactBase64:byte[],int,int
     +m:toLowerCase:CharSequence
     +m:toRGB:Color
     +m:toUpperCase:CharSequence
    }
    -c:TestInvocationHandler
    >c:TextureRegionConfig{
     -x:TextureRegion
     -x:TextureRegionConfig
     -x:TextureRegion,float,float,float
     -x:TextureRegion,float,float,float,float,float,float
     -x:TextureRegion,float,float,float,float,float,float,Color
     -x:TextureRegion,float,float,float,float,float,float,float
     -x:TextureRegion,float,float,float,float,float,float,float,Color
     +f:color
     +f:height
     +f:originX
     +f:originY
     +f:textureRegion
     +f:width
     +f:x
     +f:y
     +m:drawBatch:Array,Batch,float,float,float
     +m:drawBatch:Array,Batch,float,float,float,float,float
     +m:drawCache:Array,SpriteCache,float,float,float
     +m:fromJson:JsonValue
     +m:toQuad:Array
     +m:toQuadWithSize:Array,float,float
     +m:createImage:float,float,float
     +m:createSprite:float
     +m:drawBatch:Batch,float,float,float
     +m:drawBatch:Batch,float,float,float,float,float
     +m:drawCache:SpriteCache,float,float,float
    }
    >c:UiUtils{
     -x:
     +m:bouncyHideOverlay:Actor,Actor,Group
     +m:bouncyHideOverlayWithCallback:Actor,Actor,Group,Runnable
     +m:bouncyShowOverlay:Actor,Actor,Group
     +m:bouncyShowOverlayWithCallback:Actor,Actor,Group,Runnable
     +m:bringToFront:Actor
     +m:enableMouseMoveScrollFocus:ScrollPane
     +m:finishActions:Actor,float
     +m:getFullPathToStage:Actor
     +m:hasParent:Actor,Group
     +m:isVisibleRecursive:Actor
    }
    -c:UnsafeFactory
    >c:WaveDifficultyProvider{
     +x:int,float,float
     +m:getDifficultWavesMultiplier:int
    }
    >c:WaveDifficultyProviderOld{
     +x:int[]
     +m:getDifficultWavesMultiplier:int,int
    }
   }
   >p:waves{
    >p:processors{
     >c:BrootBossWaveProcessor{
      >c:BrootBossWaveProcessorFactory{
       +x:
       +m:create:
      }
      -c:OnGiveDamageToEnemy
      +f:DEFAULT_SPEED
      +f:HEALTH_MULT
      +f:NEXT_WAVE_DELAY_MULT
      +f:RAGE_HP_COEFF
      +f:RAGE_HP_RESTORE_MULT
      +m:draw:Batch,float
      +m:generateEnemyGroups:int,int
      +m:getNextWaveDelayMultiplier:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      +m:isDone:
      -m:read:Kryo,Input
      +m:setup:GameSystemProvider,int,int
      +m:update:float
      -m:write:Kryo,Output
     }
     >c:ConstructorBossWaveProcessor{
      >c:ConstructorBossWaveProcessorFactory{
       +x:
       +m:create:
      }
      +m:draw:Batch,float
      +m:generateEnemyGroups:int,int
      +m:getInvulnerabilityProgress:
      +m:getNextWaveDelayMultiplier:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      +m:isDone:
      -m:read:Kryo,Input
      +m:setup:GameSystemProvider,int,int
      +m:update:float
      -m:write:Kryo,Output
     }
     >c:MetaphorBossWaveProcessor{
      >c:MetaphorBossWaveProcessorFactory{
       +x:
       +m:create:
      }
      -c:OnEnemyDespawn
      -c:OnEnemyDie
      -c:OnEnemySpawn
      +m:draw:Batch,float
      +m:generateEnemyGroups:int,int
      +m:getNextWaveDelayMultiplier:
      +m:getTowerOutOfOrderReasonNearby:
      +m:getTowerOutOfOrderReasonPower:
      +m:isDone:
      -m:read:Kryo,Input
      +m:setup:GameSystemProvider,int,int
      +m:update:float
      -m:write:Kryo,Output
     }
     >c:MobchainBossWaveProcessor{
      >c:MobchainBossWaveProcessorFactory{
       +x:
       +m:create:
      }
      -c:OnEnemyDespawn
      -c:OnEnemyDie
      +m:draw:Batch,float
      +m:generateEnemyGroups:int,int
      +m:getNextWaveDelayMultiplier:
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      +m:isDone:
      -m:read:Kryo,Input
      +m:setup:GameSystemProvider,int,int
      +m:update:float
      -m:write:Kryo,Output
     }
     >c:SnakeBossWaveProcessor{
      -c:OnEnemyDespawn
      -c:OnEnemyDie
      >c:SnakeBossWaveProcessorFactory{
       +x:
       +m:create:
      }
      +m:draw:Batch,float
      +m:generateEnemyGroups:int,int
      -m:handleEvent:EnemySpawn
      -m:handleEvent:Event
      +m:isDone:
      -m:read:Kryo,Input
      +m:setup:GameSystemProvider,int,int
      +m:update:float
      -m:write:Kryo,Output
     }
    }
    >p:templates{
     >c:ArmoredLow{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:ArmoredRegular{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:ArmoredStrong{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:FastHigh{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:FastLow{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:FastMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:FighterArmored{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:FighterLow{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:FighterMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HealerArmored{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HealerIcy{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HealerJet{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HealerRegular{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HealerSlow{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HealerStrong{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:HeliMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:IcyHigh{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:IcyToxic{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:JetMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:LightFast{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:LightHigh{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:LightMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:RegularHigh{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:RegularLow{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:RegularMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:StrongLow{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:StrongMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:ToxicArmored{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:ToxicHigh{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
     >c:ToxicMedium{
      +x:
      +m:getEnemyGroupConfigs:
      +m:getProbability:int,float,float
      +m:getWaveMessage:
      +m:getWaveName:
     }
    }
   }
   >c:ActionResolver{
    >c:ActionResolverAdapter{
     -m:addNotification:int,String,String,long
     -m:canShowRewardAd:
     -m:clearNotification:int
     -m:doubleGainEnabledBySteamGamePurchase:
     -m:generateDeviceReport:Json
     +m:getBestScreenResolution:
     -m:getByteBuddyClassLoadingStrategy:
     -m:getCachedMusicManager:
     -m:getClasses:String
     +m:getDefaultLocale:
     -m:getInitConfigManager:
     +m:getMobilePasswordInput:TextInputListener,String,String,String
     -m:getPurchaseManager:
     +m:getScreenSafeAreaInsets:
     -m:getSecondsTillCanShowRewardAd:
     +m:getWindowsGraphicsScale:
     +m:handleTextFieldFocus:FocusEvent,TextField,boolean
     -m:handleThreadExceptions:Thread
     -m:hasGoogleAuth:
     -m:hasNotifications:
     +m:isAppModified:
     -m:isSignedInWithGoogle:
     -m:logCurrencyReceived:String,String,int
     -m:logCurrencySpent:String,String,int
     -m:logCustomEvent:String,String[]
     -m:logIAP:ProductId,Transaction
     -m:logLogined:String
     -m:logRewardedVideoViewed:RewardingAdsType
     -m:logScreenChange:String
     -m:logShopOfferPurchased:String,int,String,int
     -m:logShopOffersSkipped:int
     -m:logSignedUp:String
     +m:newAudioDevice:int,boolean
     -m:onExit:
     +m:openHandbook:
     +m:openSupportPage:
     +m:parseHtml:String
     -m:personalizedAdsEnabled:
     -m:personalizedAdsSupported:
     -m:requestGoogleAuth:ObjectConsumer
     -m:requestLogin:
     -m:requestSteamAuthTicket:ObjectConsumer
     -m:rewardAdsAvailable:
     +m:setFpsLimit:int
     -m:setPersonalizedAds:boolean
     -m:showInterstitialAd:ObjectConsumer
     -m:showRewardAd:ObjectConsumer,RewardingAdsType
     -m:signOutGoogle:
     -m:unlockAchievement:AchievementType
    }
    -c:InitConfigManager
    -z
    -m:createDummy:FileHandle,PlatformLogger
    -m:addNotification:int,String,String,long
    -m:canShowRewardAd:
    -m:clearNotification:int
    +m:createPlatformLogger:
    -m:doubleGainEnabledBySteamGamePurchase:
    -m:generateDeviceReport:Json
    +m:getBestScreenResolution:
    -m:getByteBuddyClassLoadingStrategy:
    -m:getCachedMusicManager:
    -m:getClasses:String
    +m:getDefaultLocale:
    -m:getDeviceInfo:
    -m:getFileChooser:
    -m:getInitConfigManager:
    -m:getLogFile:
    +m:getMobilePasswordInput:TextInputListener,String,String,String
    -m:getPurchaseManager:
    +m:getScreenSafeAreaInsets:
    -m:getSecondsTillCanShowRewardAd:
    -m:getShortDeviceInfo:
    +m:getWindowsGraphicsScale:
    +m:glGetStringi:int,int
    +m:handleTextFieldFocus:FocusEvent,TextField,boolean
    -m:handleThreadExceptions:Thread
    -m:hasGoogleAuth:
    -m:hasNotifications:
    +m:isAppModified:
    -m:isSignedInWithGoogle:
    -m:logCurrencyReceived:String,String,int
    -m:logCurrencySpent:String,String,int
    -m:logCustomEvent:String,String[]
    -m:logIAP:ProductId,Transaction
    -m:logLogined:String
    -m:logRewardedVideoViewed:RewardingAdsType
    -m:logScreenChange:String
    -m:logShopOfferPurchased:String,int,String,int
    -m:logShopOffersSkipped:int
    -m:logSignedUp:String
    +m:newAudioDevice:int,boolean
    -m:onExit:
    +m:openHandbook:
    +m:openSupportPage:
    +m:parseHtml:String
    -m:personalizedAdsEnabled:
    -m:personalizedAdsSupported:
    -m:requestGoogleAuth:ObjectConsumer
    -m:requestLogin:
    -m:requestSteamAuthTicket:ObjectConsumer
    -m:rewardAdsAvailable:
    +m:setFpsLimit:int
    -m:setPersonalizedAds:boolean
    -m:showInterstitialAd:ObjectConsumer
    -m:showRewardAd:ObjectConsumer,RewardingAdsType
    -m:signOutGoogle:
    -m:unlockAchievement:AchievementType
   }
   >c:EntityFactory{
    +z
   }
   >c:GameListener{
    +z
    +m:affectsGameState:
    +m:getConstantId:
   }
   >c:GameValueProvider{
    +z
    +m:getBooleanValue:GameValueType
    +m:getFloatValue:GameValueType
    +m:getFloatValueSum:GameValueType,GameValueType
    +m:getIntValue:GameValueType
    +m:getIntValueSum:GameValueType,GameValueType
    +m:getPercentValueAsMultiplier:GameValueType
    +m:getPercentValueAsMultiplierSum:GameValueType,GameValueType
    +m:getPercentValueAsMultiplierSumAll:GameValueType[]
    +m:getValue:GameValueType
   }
   >c:Manager{
    >c:ManagerAdapter{
     +m:dispose:
     +m:postRender:float
     +m:preRender:float
     +m:setup:
     +m:test:
    }
    >c:ManagerWithListeners{
     +m:addListener:Object
     +m:dispose:
     +m:postRender:float
     +m:preRender:float
     +m:removeListener:Object
     +m:setup:
     +m:test:
    }
    +z
    +m:postRender:float
    +m:preRender:float
    +m:setup:
    +m:test:
   }
   >c:MapElementPos{
    +z
   }
   >c:ProjectileTrail{
    +z
    +m:draw:Batch
    +m:free:
    +m:isFinished:
    +m:update:float
   }
   >c:WaveProcessor{
    >c:WaveProcessorFactory{
     +f:bossType
     +m:create:
     +m:getIconTexture:
     +m:setup:
    }
    +z
    +m:draw:Batch,float
    +m:generateEnemyGroups:int,int
    +m:getNextWaveDelayMultiplier:
    +m:isDone:
    +m:setup:GameSystemProvider,int,int
    +m:update:float
   }
   >c:Ability{
    >c:Factory{
     +f:abilityType
     +m:create:
     +m:getColor:
     +m:getDarkerColor:
     +m:getDescription:GameValueProvider
     +m:getFancyTitle:
     +m:getIconDrawable:
     +m:getPriceInGreenPapers:int
     +m:getPriceInResources:ResourceType,int
     +m:getTitle:
     +m:requiresMapPointing:
     +m:setup:
     +m:setupAssets:
    }
    +m:configure:int,int,double
    +m:draw:Batch,float
    +m:drawBatchAdditive:Batch,float
    +m:getKilledEnemiesCoinMultiplier:
    +m:getType:
    +m:isDone:
    +m:onDone:
    -m:read:Kryo,Input
    +m:start:
    +m:startEffects:
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:Action{
    +m:fromJson:JsonValue
    +m:affectsPlayerXp:
    +m:getType:
    +m:toJson:Json
   }
   >c:BasicLevel{
    >c:WaveQuest{
     +x:BasicLevel,String,int
     +f:basicLevel
     +f:id
     +f:prizes
     +f:waves
     +m:fromJson:BasicLevel,JsonValue
     +m:createIngameQuest:GameSystemProvider
     +m:isCompleted:
     +m:setCompleted:boolean
     +m:toJson:Json
    }
    +f:achievementsDisabled
    +f:bonusStagesConfig
    +f:customWaves
    +f:dailyQuest
    +f:difficultyExpectedPlaytime
    +f:enemyWaves
    +f:fastForwardFrame
    +f:fixedQuests
    +f:forcedDifficulty
    +f:hasLeaderboards
    +f:isBonus
    +f:name
    +f:notAffectsStatistics
    +f:openRequirements
    +f:priceInMoney
    +f:priceInResources
    +f:quests
    +f:seed
    +f:showRequirements
    +f:stageName
    +f:stagePosition
    +f:waveQuests
    +m:createNew:String
    +m:createNewFromFullJson:String
    +m:fromJson:JsonValue
    +m:clone:String
    +m:getAllowedEnemies:
    +m:getDifficultyExpectedPlaytime:
    +m:getMap:
    +m:getPreview:
    +m:getQuest:String
    +m:getStarMilestoneWaves:
    +m:getWaveQuest:String
    +m:isPurchased:
    +m:isPurchasedOrPlayed:
    +m:reloadMap:
    +m:saveToDisk:
    +m:setMap:Map
    +m:toJson:Json
    +m:toJsonStringEverything:
    +m:toString:
   }
   >c:BasicLevelQuestConfig{
    +x:String,boolean,StatisticsType,long,boolean,BasicLevel
    +f:duringGame
    +f:id
    +f:level
    +f:prizes
    +f:requiredValue
    +f:scripted
    +f:scriptedTitle
    +f:statisticsType
    +m:fromJson:JsonValue,BasicLevel
    +m:createIngameQuest:GameSystemProvider
    +m:formatValueForUi:double
    +m:formatValueForUiWithRequiredValue:double,double,boolean
    +m:getCurrentValue:GameValuesSnapshot
    +m:getExtraDustInEndless:GameValueProvider
    +m:getId:
    +m:getPrizes:GameValuesSnapshot
    +m:getRequiredValue:GameValuesSnapshot
    +m:getSavedValue:
    +m:getTitle:boolean,boolean
    +m:isCompleted:
    +m:isDuringGame:
    +m:isScripted:
    +m:setCompleted:boolean
    +m:setSavedValue:long
    +m:toJson:Json
    +m:wasEverCompleted:
   }
   >c:BasicLevelStage{
    +x:String,Color,String
    +f:color
    +f:levels
    +f:name
    +f:regular
    +f:showRequirements
    +f:titleAlias
    +m:fromJson:JsonValue
    +m:getTitle:
    +m:sortLevels:
    +m:toJson:Json
   }
   >c:Buff{
    >c:Factory{
     +m:createProcessor:
     +m:dispose:
     +m:getHealthBarIcon:
     +m:setup:
     +m:setupAssets:
    }
    +f:MAX_DURATION_MULTIPLIER
    +f:duration
    +f:maxDuration
    +m:cpy:float
    +m:getHealthBarIcon:
    +m:getType:
    -m:read:Kryo,Input
    +m:setup:float,float
    -m:write:Kryo,Output
   }
   >c:BuffProcessor{
    >c:BuffProcessorListener{
     +z
     +m:buffAdded:Enemy,Buff
     +m:buffRemoved:Enemy,Buff
    }
    +f:listeners
    +m:addBuff:Enemy,Buff
    +m:getBuffCountStatistic:
    +m:isDebuff:
    -m:read:Kryo,Input
    +m:removeAllBuffs:Enemy,BuffType
    +m:removeBuff:Enemy,Buff
    +m:removeBuffAtIndex:Enemy,BuffType,int
    -m:update:float
    -m:write:Kryo,Output
   }
   >c:Building{
    +f:buildingType
    +m:fromJson:JsonValue
    +m:cloneBuilding:
    +m:drawBase:Batch,float,float,float,float,DrawMode
    +m:drawHoveredRange:Batch,RangeCircle
    +m:drawSelectedRange:Batch,RangeCircle
    +m:getTile:
    +m:getWalkCost:
    +m:placedOnMap:
    -m:read:Kryo,Input
    +m:removedFromMap:
    +m:sameAs:Building
    +m:setTile:PlatformTile
    +m:toJson:Json
    +m:updateCache:
    -m:write:Kryo,Output
   }
   >c:CameraController{
    >c:CameraControllerAnimation{
     +z
     +m:end:
     +m:isDone:
     +m:start:CameraController
     +m:update:float
    }
    >c:CameraControllerListener{
     +z
     +m:onViewportUpdated:CameraController
    }
    >c:BasicAnimation{
     +x:float,float,double,float,Interpolation
     +m:end:
     +m:isDone:
     +m:start:CameraController
     +m:update:float
    }
    >c:ShakeAnimation{
     +x:float,float
     +m:end:
     +m:isDone:
     +m:start:CameraController
     +m:update:float
    }
    +x:OrthographicCamera,int,int
    +f:DEFAULT_MAX_ZOOM_MAP_SCALE
    +f:DEFAULT_MIN_ZOOM_TILE_SIZE
    +f:camera
    +f:currentScenario
    +f:dragButtonIndices
    +f:hardMaxZoom
    +f:hardMinZoom
    +f:hardZoomLimits
    +f:outmapCheckEnabled
    +f:scenarioLooped
    +f:scenarioTime
    +f:scrollZoomRequiresAlt
    +f:zoom
    +m:addListener:CameraControllerListener
    +m:animate:CameraControllerAnimation
    +m:fitMapToScreen:float
    +m:getInputProcessor:
    +m:getLookPos:
    +m:getMapHeight:
    +m:getMapWidth:
    +m:getMaxZoom:
    +m:getMinZoom:
    +m:getRevZoomPercent:
    +m:isIntRectVisible:IntRectangle
    +m:isPointVisible:Vector2,float
    +m:isPointVisible:float,float,float
    +m:isRectVisible:Rectangle
    +m:isRectVisibleMarginSmall:Rectangle
    +m:lookAt:float,float
    +m:lookAtAlignToViewport:float,float,float,float
    +m:mapToScreen:Vector2
    +m:mapToStage:Vector2
    +m:mapToViewport:Vector2
    +m:playScenario:Scenario,float,boolean
    +m:realUpdate:float
    +m:removeListener:CameraControllerListener
    +m:screenToMap:Vector2
    +m:screenToStage:Vector2
    +m:screenToViewport:Vector2
    +m:setMap:Map
    +m:setMapSize:int,int
    +m:setRevZoomPercent:double
    +m:setScreenSize:int,int
    +m:setZoom:double
    +m:setZoomBoundaries:float,float
    +m:stageToMap:Vector2
    +m:stageToScreen:Vector2
    +m:stopAnimations:
    +m:stopScenario:
    +m:updateCamera:
    +m:updateMinMaxZoom:
    +m:viewportToScreen:Vector2
   }
   >c:CollidingProjectile{
    +f:RAYCAST_INTERVAL_MIN
    +f:RAYCAST_INTERVAL_MIN_SQR
    +f:drawAngle
    +f:drawPosition
    +f:flyTime
    +f:totalFlyTime
    +m:applyDrawInterpolation:float
    +m:flyOnEnemy:Enemy
    +m:hasReachedTarget:
    +m:isDone:
    -m:read:Kryo,Input
    +m:reset:
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:Config{
    -c:ProductId
    -x:
    -f:AD_DEBUG_MODE
    -f:ANALYTICS_FOR_ACTIONS_URL
    -f:ANDROID_INTERSTITIAL_AD_ID
    -f:ANDROID_REWARDED_INTERSTITIAL_AD_ID
    -f:ANDROID_REWARDED_VIDEOS_ID
    +f:APP_STORE_URI
    -f:AUTH_BACKUP_PROGRESS_URL
    -f:AUTH_CONFIRM_EMAIL_URL
    -f:AUTH_DELETE_GAME_URL
    -f:AUTH_GET_SESSION_INFO_URL
    -f:AUTH_LINK_ACCOUNT_STATUS_URL
    -f:AUTH_LINK_STEAM_URL
    -f:AUTH_LOAD_GAME_URL
    -f:AUTH_NICKNAME_CHANGE_URL
    -f:AUTH_PASSWORD_RESET_URL
    -f:AUTH_PASSWORD_SET_URL
    -f:AUTH_PASTEBIN_URL
    -f:AUTH_SAVE_GAME_URL
    -f:AUTH_SIGN_IN_CONFIRM_OTP_URL
    -f:AUTH_SIGN_IN_GOOGLE_URL
    -f:AUTH_SIGN_IN_OKJOY_URL
    -f:AUTH_SIGN_IN_STEAM_URL
    -f:AUTH_SIGN_IN_URL
    -f:AUTH_SIGN_OUT_URL
    -f:AUTH_SIGN_UP_GOOGLE_URL
    -f:AUTH_SIGN_UP_STEAM_URL
    -f:AUTH_SIGN_UP_URL
    +f:AVATAR_WEB_TEXTURES_URL
    +f:BACKGROUND_COLOR
    +f:BUILD
    +f:BUILD_PROTOCOL
    +f:DAILY_QUEST_RULES_WIKI_URL
    +f:DEBUG_GENERATE_KRYO_REGISTRY
    +f:DEBUG_GENERATE_LOCALE_STUFF
    +f:DEBUG_GENERATE_RESOURCES_JSON
    -f:DEBUG_ITEM_DROP_RATE
    +f:DEBUG_MODE
    -f:DEBUG_TEST_MANAGERS
    +f:DEBUG_VALIDATE_LOCALES
    +f:DEVELOPER_DOCUMENTATION_URL
    -f:DEVELOPER_MODE_AVAILABLE
    +f:DISPLAY_HEIGHT
    +f:DISPLAY_WIDTH
    -f:DYNAMIC_SETTINGS_URL
    +f:ENDLESS_MAX_REPLAY_DURATION
    +f:ENEMY_DIE_SCORE_MULTIPLIER
    +f:FEEDBACK_EMAIL
    +f:FONT_SIZE_HUGE
    +f:FONT_SIZE_LARGE
    +f:FONT_SIZE_MEDIUM
    +f:FONT_SIZE_SMALL
    +f:FONT_SIZE_XX_SMALL
    +f:FONT_SIZE_X_SMALL
    -f:GAME_REPLAY_REPORT_URL
    -f:GAME_START_LOG_URL
    +f:GAME_STATE_UPDATE_RATE
    -f:GET_ACCOUNT_SETTINGS_URL
    -f:GET_BACKUPS_TO_RESTORE_PREFERENCES_URL
    -f:GET_BASIC_LEVELS_TOP_LEADERBOARDS_URL
    -f:GET_BEST_GAME_REPLAY_URL
    -f:GET_BETA_ACCOUNT_LINK_STATUS_URL
    -f:GET_COMMUNITY_TRANSLATORS_URL
    -f:GET_DAILY_QUEST_HASH_URL
    -f:GET_DAILY_QUEST_INFO_URL
    -f:GET_DAILY_QUEST_LEADERBOARDS_ADVANCE_RANK_URL
    -f:GET_DAILY_QUEST_LEADERBOARDS_URL
    -f:GET_DAILY_QUEST_MAP_URL
    -f:GET_LAST_REPLAYS_TO_RESTORE_PREFERENCES_URL
    -f:GET_LATEST_NEWS_URL
    -f:GET_LEADERBOARDS_ADVANCE_RANK_URL
    -f:GET_LEADERBOARDS_RANK_URL
    -f:GET_LEADERBOARDS_URL
    -f:GET_MESSAGES_URL
    -f:GET_RUNTIME_LEADERBOARDS_URL
    -f:GET_SAVED_GAMES_LIST_URL
    -f:GET_SKILL_POINT_LEADER_BOARD_URL
    -f:GET_STEAM_AUTH_TICKET_INFO_URL
    +f:GIVEN_DAMAGE_EXP_COEFF
    +f:I18N_SUGGEST_FIX_URL
    -f:IAP_VALIDATION_URL
    -f:IOS_REWARDED_VIDEOS_ID
    +f:IS_HEADLESS
    -f:LEGACY_PREFERENCES_NAMES
    -f:LEGACY_PREFERENCES_NAME_PREFIX
    -f:LEGACY_PREFERENCES_NAME_PROGRESS
    -f:LEGACY_PREFERENCES_NAME_SETTINGS
    -f:LEGACY_PREFERENCES_NAME_STATISTICS
    -f:LEGACY_PREFERENCES_NAME_USER_MAPS
    -f:LINK_BETA_ACCOUNT_URL
    -f:LOGGER_REPORT_URL
    -f:MARK_MESSAGE_URL
    +f:MAX_UPDATES_DURATION
    +f:MAX_UPDATES_TIME_ACCUMULATOR
    -f:NEWS_URI
    +f:OPTIONAL_WEB_TEXTURES_URL
    +f:PACKAGE
    -f:PAYMENTS_STORE_PARAM_ANDROID_GOOGLE
    -f:PLAYER_XP_INACTIVITY_DURATION
    -f:PLAYER_XP_ISSUE_INTERVAL
    -f:PLAYER_XP_ISSUE_INTERVAL_ENDLESS
    +f:PLAYER_XP_MAX_PER_GAME
    +f:PLAY_STORE_URI
    +f:PRESTIGE_MAP_SELL_STAT_MIN_PRICE
    +f:PRIVACY_POLICY_URL
    -f:PROFILE_STATUS_DOUBLE_GAIN
    -f:PROFILE_STATUS_PREMIUM
    +f:PUBLIC_BETA_MODE
    -f:RECEIVE_ISSUED_ITEMS_URL
    +f:REPLAY_CHARTS_INTERVAL
    +f:REPLAY_CHARTS_VERSION
    -f:REQUEST_OF_MERIT_BADGE
    -f:RESOURCES_DIR
    -f:REVIEW_URL
    -f:SECRET_CODE_APPLICATION_URL
    -f:SERVER_TIMESTAMP_FALLBACK_URL
    -f:SERVER_TIMESTAMP_URL
    -f:SET_CLOUD_SAVE_NOTE
    -f:SITE_SHARED_GET_PART
    +f:SITE_URL
    +f:STEAM_APP_ID
    -f:STEAM_TXN_FINALIZE_URL
    -f:STEAM_TXN_PRODUCT_LIST_URL
    -f:STEAM_TXN_START_URL
    -f:SUBMIT_MUSIC_URL
    -f:SYNC_CHECK_COLD_START_ON_CONTINUE
    -f:SYNC_CHECK_MAX_DEPTH
    +f:TERMS_AND_CONDITIONS_URL
    +f:TILE_HALF_SIZE
    +f:TILE_HALF_SIZE_INV
    +f:TILE_SIZE
    +f:TILE_SIZE_INV
    +f:UPDATE_DELTA_TIME
    +f:VERSION
    +f:VIEWPORT_HEIGHT
    -f:VOTE_MUSIC_URL
    +f:WHITE_COLOR_CACHED_FLOAT_BITS
    +f:WHY_ACCOUNT_URL
    +f:WIKI_URL
    -f:XDX_ROOT_URL
    -f:XDX_VIEW_NEWS_URL
    -f:XDX_VIEW_PLAYER_PROFILE_BY_NICKNAME_URL
    -f:XDX_VIEW_PLAYER_PROFILE_URL
    -f:XDX_VIEW_SEASONAL_LEADERBOARD_URL
    +m:getMaxTextureSize:
    +m:getModId:
    +m:isCompatibleWithBuild:int
    +m:isHeadless:
    +m:isModdingMode:
    -m:preferencesEncryptionEnabled:
   }
   >c:CraftRecipe{
    >c:Ingredient{
     +x:ItemType,int
     +x:ItemType,int,int[]
     +x:ItemType,int,RarityType
     +x:ItemType,int,RarityType,int[]
     +f:count
     +f:exampleItems
     +f:ignoresDiscounts
     +f:itemParams
     +f:itemRarity
     +f:itemType
     +f:minCount
     +m:fits:Item
     +m:getCountWithGVs:
     +m:getExampleItems:
     +m:getSuitableItemsFromInventory:
    }
    +x:
    +f:ingredients
    +f:result
    +m:getMaxQueueStackWithGVs:
    +m:getTimeWithGVs:
    +m:hasEnoughItemsToRun:
    +m:isAvailable:
    +m:setStockMaxQueueStack:int
    +m:setStockTime:float
   }
   >c:DamageRecord{
    -x:
    +m:copyFor:Enemy,DamageRecord
    +m:getAbility:
    +m:getDamage:
    +m:getDamageType:
    +m:getEfficiency:
    +m:getEnemy:
    +m:getExplosion:
    +m:getFactDamage:
    +m:getProjectile:
    +m:getTower:
    +m:getUnit:
    +m:isCleanForDps:
    +m:isIgnoreTowerEfficiency:
    +m:isLethal:
    -m:read:Kryo,Input
    +m:reset:
    +m:setAbility:Ability
    +m:setCleanForDps:boolean
    +m:setDamage:float
    +m:setDamageType:DamageType
    +m:setEfficiency:int
    +m:setEnemy:Enemy
    +m:setExplosion:Explosion
    +m:setFactDamage:float
    +m:setIgnoreTowerEfficiency:boolean
    +m:setLethal:boolean
    +m:setProjectile:Projectile
    +m:setTower:Tower
    +m:setUnit:Unit
    +m:setup:Enemy,float,DamageType
    +m:toString:
    -m:write:Kryo,Output
   }
   >c:Enemy{
    >c:EnemyReference{
     +x:
     +f:NULL
     +f:enemy
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:Factory{
     +m:dispose:
     +m:getColor:
     +m:getDescription:
     +m:getEmojiTexture:
     +m:getHighlightTexture:
     +m:getTexture:
     +m:getTextureSize:
     +m:getTitle:
     +m:obtain:
     +m:setup:
     +m:setupAssets:
    }
    +f:ATTACHED_PARTICLE_REGENERATION_BUFF
    +f:HEALTH_BAR_BACKGROUND_COLOR
    +f:SIZE
    +f:UNREGISTERED_ID
    +f:angle
    +f:attachedParticles
    +f:bounty
    +f:buffFreezingLightningLengthBonus
    +f:buffFreezingPercent
    +f:buffFreezingPoisonDurationBonus
    +f:buffSnowballHits
    +f:buffsAppliedByType
    +f:buffsByType
    +f:caughtByCrushersSet
    +f:chasedByCrusher
    +f:disabled
    +f:drawAngle
    +f:drawPosition
    +f:drawScale
    +f:existsTime
    +f:gaveMiningSpeedForGauss
    +f:graphPath
    +f:healthBarInvisible
    +f:healthBarScale
    +f:id
    +f:ignitionIncreasedLastFrame
    +f:ignitionProgress
    +f:ignorePathfinding
    +f:ignoredByAutoWaveCall
    +f:ignoredOnGameOverNoEnemies
    +f:invisible
    +f:killScore
    +f:loot
    +f:lowAimPriority
    +f:maxHealth
    +f:multishotTowerHits
    +f:notAffectsWaveKillCounter
    +f:otherEnemiesNearby
    +f:passedTiles
    +f:pathSearches
    +f:sideShiftIndex
    +f:spawnTile
    +f:stunDebuffStats
    +f:sumPassedTiles
    +f:thrownBackBy
    +f:totalCatchesByCrushers
    +f:type
    +f:wasAimedAtWithChainReactionBuff
    +f:wasStunnedByGauss
    +f:wave
    +m:addLoot:Item,int
    +m:applyDrawInterpolation:float
    +m:canBeAttackedBy:Tower
    +m:canBeBuffed:BuffType
    +m:canHaveRandomSideShift:
    +m:drawBatch:Batch,float
    +m:drawBatchAdditive:Batch,float
    +m:drawHealth:Batch
    +m:dynamicPathfindingAllowed:
    +m:getAbilityVulnerability:AbilityType
    +m:getBaseDamage:
    +m:getBreakParticle:
    +m:getBuffVulnerability:BuffType
    +m:getBuffedDamageMultiplier:TowerType,DamageType
    +m:getBuffedSpeed:
    +m:getBuffsByTypeOrNull:BuffType
    +m:getColor:
    +m:getCurrentTile:
    +m:getEmojiTexture:
    +m:getHealth:
    +m:getHighlightTexture:
    +m:getHitParticle:
    +m:getKillExp:
    +m:getKillScore:
    +m:getPassedTilesDelta:float
    +m:getPosition:
    +m:getSize:
    +m:getSpeed:
    +m:getSquaredSize:
    +m:getTexture:
    +m:getTowerDamageMultiplier:TowerType
    +m:getUserData:String
    +m:giveDamage:Tower,float,DamageType
    +m:giveDamageRaw:float,DamageType
    +m:hasBuffsByType:BuffType
    +m:hasDrawPriority:
    +m:initBuffsByTypeArray:
    +m:isAir:
    +m:isBossMainBodyPart:
    +m:isBossRelated:
    +m:isVulnerableTo:DamageType
    +m:isVulnerableToSpecial:SpecialDamageType
    +m:onPositionSetToPath:
    +m:onPreDie:
    +m:onSpawned:
    -m:read:Kryo,Input
    +m:setHealth:float
    +m:setKillExp:float
    +m:setMaxHealth:float
    +m:setPosition:Vector2
    +m:setPosition:float,float
    +m:setPositionToPath:
    +m:setSpeed:float
    +m:setUserData:String,Object
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:EnemyFollowingExplosiveProjectile{
    +m:hit:
    +m:multiplyDamage:float
    -m:read:Kryo,Input
    +m:reset:
    +m:setUnregistered:
    -m:write:Kryo,Output
   }
   >c:EnemyFollowingProjectile{
    +f:DEFAULT_MAX_ROT_SPEED
    +f:DEFAULT_MAX_ROT_SPEED_DYNAMIC
    +f:RAYCAST_INTERVAL_FOLLOWING_MIN
    +f:RAYCAST_INTERVAL_FOLLOWING_MIN_SQR
    +f:drawAngle
    +f:drawPosition
    +f:maxRotationSpeed
    +f:maxRotationSpeedDynamic
    +f:speed
    +m:applyDrawInterpolation:float
    +m:draw:Batch,float
    +m:flyOnEnemy:Enemy
    +m:getPosition:
    +m:getTarget:
    +m:getTimeExists:
    +m:hasReachedTarget:
    +m:isDone:
    -m:read:Kryo,Input
    +m:reset:
    +m:setTarget:Enemy
    +m:setUnregistered:
    +m:toString:
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:EnemyGroup{
    >c:SpawnEnemyGroup{
     +x:
     +x:EnemyGroup,EnemyType,float,float,int,float,float,float,float,int
     +f:waveGroup
     +m:addSpawnedCount:int
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    +x:EnemyType,float,float,int,float,float,float,float,int
    +f:bounty
    +f:count
    +f:delay
    +f:health
    +f:interval
    +f:killExp
    +f:killScore
    +f:speed
    +m:fromJson:JsonValue
    +m:cpy:
    +m:createSpawnPortion:int
    +m:getEnemyType:
    +m:getSpawnCountByTime:float
    +m:getSpawnedCount:
    -m:read:Kryo,Input
    +m:setEnemyType:EnemyType
    +m:toJson:Json
    +m:toString:
    -m:write:Kryo,Output
   }
   >c:Explosion{
    >c:Factory{
     +m:dispose:
     +m:free:Explosion
     +m:obtain:
     +m:setup:ExplosionSystem
     +m:setupAssets:
    }
    +f:EXPLOSION_RANGE_ENEMY_SEARCH_SPACING
    +f:RAY_COUNT
    +f:damage
    +f:fromAbility
    +f:piercingMultiplier
    +f:position
    +f:type
    +m:calculateDamage:float,float,float
    +m:getRayIndex:Vector2,Vector2
    +m:addExplosionParticle:Color,LimitedParticleType
    +m:cpy:
    +m:explode:
    +m:getTower:
    +m:isDone:
    +m:multiplyDamage:float
    -m:read:Kryo,Input
    +m:reset:
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:Game{
    +f:EVENTS
    +f:i
    +f:abilityManager
    +f:achievementManager
    +f:actionResolver
    -f:analyticsManager
    +f:assetManager
    +f:authManager
    +f:basicLevelManager
    +f:buffManager
    +f:cursorGraphics
    +f:dailyQuestManager
    +f:debugManager
    +f:defaultSmallFuturaFont
    +f:enemyManager
    +f:gameSyncLoader
    +f:gameValueManager
    +f:gateManager
    -f:httpManager
    +f:itemManager
    +f:leaderBoardManager
    +f:localeManager
    +f:managers
    +f:mapManager
    +f:messageManager
    +f:minerManager
    +f:modifierManager
    +f:musicManager
    +f:networkManager
    -f:preferencesManager
    +f:progressManager
    -f:purchaseManager
    -f:ratingManager
    +f:renderingManager
    +f:replayManager
    +f:researchManager
    +f:resourceManager
    +f:screenManager
    -f:scriptManager
    -f:secretCodeManager
    +f:settingsManager
    +f:shapeManager
    +f:soundManager
    +f:statisticsManager
    +f:tileManager
    +f:towerManager
    +f:towerStatManager
    +f:triggeredActionManager
    +f:trophyManager
    +f:uiManager
    +f:unitManager
    +f:userMapManager
    -m:checkConfiguredForProduction:
    +m:exit:
    +m:getFreeHeapSpaceSize:
    +m:getRealTickCount:
    +m:getTimestampMillis:
    +m:getTimestampSeconds:
    +m:isLoaded:
    +m:assertInMainThread:
    -m:create:
    -m:dispose:
    +m:getMillisTillGameStart:
    +m:getVisibleDisplayFrame:
    +m:isDisposed:
    +m:isInMainThread:
    -m:notifyVisibleDisplayFrameChanged:int,int,int,int
    -m:pause:
    -m:render:
    -m:resize:int,int
    -m:resume:
   }
   >c:GameState{
    +x:
    +f:canLootCases
    +f:difficultyMode
    +f:encryptedChestsInInventory
    +f:gameMode
    +f:lootBoostEnabled
    +f:modeDifficultyMultiplier
    +f:seed
    +f:startingAbilitiesConfiguration
    -m:read:Kryo,Input
    -m:write:Kryo,Output
   }
   >c:GameSystem{
    +m:affectsGameState:
    +m:dispose:
    +m:getFastStateHash:
    +m:getSystemName:
    +m:postSetup:
    +m:postStateRestore:
    +m:profileUpdate:
    +m:setup:
    +m:update:float
   }
   >c:GameSystemProvider{
    >c:SystemsConfig{
     >c:Setup{
      +f:GAME
      +f:MAP_EDITOR
      +m:valueOf:String
      +m:values:
     }
     +x:Setup,boolean
     +f:headless
     +f:noScripts
     +f:setup
     +m:disableScripts:
     -m:read:Kryo,Input
     -m:write:Kryo,Output
    }
    >c:ThreadSafeSharedHelpers{
     +x:
     +f:MAX_ENEMY_ARRAYS
     +f:MAX_MINER_ARRAYS
     +f:MAX_TILE_ARRAYS
     +f:MAX_TOWER_ARRAYS
     +f:floatSorter
     +f:sort
     +m:freeEnemyArray:Array
     +m:freeMinerArray:Array
     +m:freeTileArray:Array
     +m:freeTowerArray:Array
     +m:getEnemyArray:
     +m:getMinerArray:
     +m:getTileArray:
     +m:getTowerArray:
    }
    +x:SystemsConfig
    -f:CLASS_COMPARATOR
    +f:CFG
    +f:TSH
    +f:_cachedRendering
    +f:_gameMapSelection
    +f:_gameUi
    +f:_hotKey
    +f:_input
    +f:_inventory
    +f:_mapEditor
    +f:_mapEditorUi
    +f:_mapRendering
    +f:_particle
    +f:_pathRendering
    +f:_projectileTrail
    +f:_quest
    +f:_render
    +f:_sound
    +f:ability
    +f:achievement
    +f:bonus
    +f:buff
    +f:damage
    +f:enemy
    +f:events
    +f:experience
    +f:explosion
    +f:gameState
    +f:gameValue
    +f:gameplayMod
    +f:loot
    +f:map
    +f:miner
    +f:modifier
    +f:pathfinding
    +f:projectile
    +f:script
    +f:state
    +f:statistics
    +f:syncCheckLog
    +f:syncChecking
    +f:tower
    +f:unit
    +f:wave
    +m:unserialize:Input
    +m:addSystem:GameSystem
    +m:compareSync:GameSystemProvider,StringBuilder,boolean
    +m:createAndSetupNonStateAffectingSystemsAfterDeserialization:
    +m:createSystems:
    +m:deepCopy:
    +m:dispose:
    +m:flushSystemsFrameProfiling:
    +m:getSystemsOrdered:
    +m:postSetupSystems:
    -m:read:Kryo,Input
    +m:resetSystemsFrameProfiling:
    +m:serialize:Output
    +m:setupSystems:
    +m:syncLog:String,Object[]
    +m:syncLogTrace:
    +m:updateSystems:
    -m:write:Kryo,Output
   }
   >c:GameValueConfig{
    +x:GameValueType,double,boolean,boolean
    +m:fromJson:JsonValue
    +m:cpy:
    +m:getType:
    +m:getValue:
    +m:isAllowBonuses:
    +m:isFinalGlobalMultiplier:
    +m:isOverwrite:
    -m:read:Kryo,Input
    +m:sameAs:GameValueConfig
    +m:setAllowBonuses:boolean
    +m:setFinalGlobalMultiplier:boolean
    +m:setOverwrite:boolean
    +m:setType:GameValueType
    +m:setValue:double
    +m:toJson:Json
    +m:toString:
    -m:write:Kryo,Output
   }
   >c:Gate{
    >c:Factory{
     >c:AbstractFactory{
      +m:dispose:
      +m:fromJson:JsonValue
      +m:getDescription:Gate
      +m:getTitle:Gate
      +m:setup:
      +m:setupAssets:
     }
     +z
     +m:create:
     +m:createRandom:float,RandomXS128
     +m:fromJson:JsonValue
     +m:getDescription:Gate
     +m:getTitle:Gate
     +m:setup:
    }
    >c:Pos{
     +x:
     +x:Pos
     +x:Gate
     +x:int,int,boolean
     +m:equals:Object
     +m:getX:
     +m:getY:
     +m:hashCode:
     +m:is:int,int,boolean
     +m:isLeft:
     -m:read:Kryo,Input
     +m:set:Pos
     +m:setLeft:boolean
     +m:setX:int
     +m:setY:int
     +m:toString:
     -m:write:Kryo,Output
    }
    +f:THICKNESS
    +f:highlightParticleA
    +f:highlightParticleB
    +m:addSellItems:Array
    +m:cloneGate:
    +m:drawBatch:Batch,float,float,float,float,float
    +m:drawStatic:Batch,float,float,float,float
    +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
    +m:generateIcon:float,boolean
    +m:getBoundingBox:
    +m:getPrestigeScore:
    +m:getRarity:
    +m:getSortingScore:ItemSortingType
    +m:getType:
    +m:getX:
    +m:getY:
    +m:isLeftSide:
    -m:read:Kryo,Input
    +m:sameAs:Gate
    +m:setPosition:int,int,boolean
    +m:toJson:Json
    -m:write:Kryo,Output
   }
   >c:GateBarrier{
    +m:canEnemyPass:EnemyType
   }
   -c:HeadlessReplayReportGenerator
   -c:HeadlessReplayValidationGame
   >c:IssuedItems{
    >c:IssueReason{
     +f:ACHIEVEMENT
     +f:BASIC_LEVEL_BONUS_ITEMS
     +f:CASE
     +f:DAILY_LOOT
     +f:DAILY_QUEST
     +f:DAILY_QUEST_LEADER_BOARD
     +f:FAILURE_COMPENSATION
     +f:FOR_INVITED_PLAYER
     +f:GAME_OVER_BASIC_LEVEL
     +f:GAME_OVER_DAILY_QUEST
     +f:GAME_OVER_USER_MAP
     +f:LUCKY_SHOT
     +f:MAP_PRESTIGE
     +f:PREMIUM_REWARD_VIDEO
     +f:PURCHASE
     +f:QUEST
     +f:QUESTS_PRESTIGE
     +f:RANDOM_BARRIER_PACK
     +f:RANDOM_TELEPORT_PACK
     +f:RANDOM_TILE_PACK
     +f:REGULAR_REWARD
     +f:REWARD_VIDEO
     +f:SECRET_CODE
     +f:SIGNED_UP_BY_INVITE
     +f:WAVE_QUEST
     +m:valueOf:String
     +m:values:
    }
    +x:IssueReason,int
    +f:achievementType
    +f:addedToIssuedItemsArray
    +f:basicLevelGameMode
    +f:caseType
    +f:dailyLootDate
    +f:dailyQuestDate
    +f:dqBoardPlace
    +f:dqBoardRankPercentage
    +f:dqBoardTotalPlaces
    +f:dqDate
    +f:failureCompensationDescription
    +f:gameOverBasicLevel
    +f:invitedPlayerId
    +f:invitedPlayerNickname
    +f:issueTimestamp
    +f:items
    +f:mapPrestigeConfig
    +f:massUnpackCount
    +f:questBasicLevel
    +f:questId
    +f:randomBarrierPackQuality
    +f:randomTilePackQuality
    +f:reason
    +f:secretCode
    +f:secretCodeDescription
    +f:shown
    +f:userMapHash
    +f:userMapId
    +f:waveQuestBasicLevel
    +f:waveQuestId
    +m:fromJson:JsonValue
    +m:compactItems:
    +m:getReasonDescription:
    -m:read:Kryo,Input
    +m:toJson:Json
    +m:toString:
    -m:write:Kryo,Output
   }
   >c:Item{
    >c:Factory{
     >c:AbstractFactory{
      +m:setup:
     }
     +z
     +m:createDefault:
     +m:fromJson:JsonValue
     +m:setup:
    }
    >c:UsableItem{
     +z
     +m:autoUseWhenAdded:
     +m:useItem:
     +m:useItemNeedsConfirmation:
    }
    >c:D{
     +x:
     +f:ABILITY_TOKEN
     +f:ACCELERATOR
     +f:BIT_DUST
     +f:BLUEPRINT_AGILITY
     +f:BLUEPRINT_EXPERIENCE
     +f:BLUEPRINT_POWER
     +f:BLUEPRINT_SPECIAL_I
     +f:BLUEPRINT_SPECIAL_II
     +f:BLUEPRINT_SPECIAL_III
     +f:BLUEPRINT_SPECIAL_IV
     +f:CASE_KEY_BLUE
     +f:CASE_KEY_CYAN
     +f:CASE_KEY_ORANGE
     +f:CASE_KEY_PURPLE
     +f:DAT_PAPER
     +f:F_ABILITY
     +f:F_ABILITY_TOKEN
     +f:F_ACCELERATOR
     +f:F_BIT_DUST
     +f:F_BLUEPRINT
     +f:F_CASE
     +f:F_CASE_KEY
     +f:F_DOUBLE_GAIN_SHARD
     +f:F_GAME_VALUE_GLOBAL
     +f:F_GAME_VALUE_LEVEL
     +f:F_GATE
     +f:F_GREEN_PAPER
     +f:F_LUCKY_SHOT_TOKEN
     +f:F_OPENED_RESEARCH
     +f:F_PRESTIGE_TOKEN
     +f:F_RANDOM_BARRIER
     +f:F_RANDOM_TILE
     +f:F_RESEARCH_TOKEN
     +f:F_RESEARCH_TOKEN_USED
     +f:F_RESOURCE
     +f:F_TILE
     +f:F_TROPHY
     +f:GREEN_PAPER
     +f:LOOT_BOOST
     +f:LUCKY_SHOT_TOKEN
     +f:PRESTIGE_DUST
     +f:PRESTIGE_TOKEN
     +f:RANDOM_TELEPORT
     +f:RARITY_BOOST
     +f:RESEARCH_TOKEN
     +f:RESEARCH_TOKEN_USED
     +f:RESOURCE_INFIAR
     +f:RESOURCE_MATRIX
     +f:RESOURCE_SCALAR
     +f:RESOURCE_TENSOR
     +f:RESOURCE_VECTOR
     +f:SKILL_POINT
     +f:STAR
     +m:setup:
    }
    +m:fromJson:JsonValue
    +m:addSellItems:Array
    +m:addSellItemsMultiplied:Array,int
    +m:affectedByLuckyWheelMultiplier:
    +m:canBeSold:
    +m:canBeUnpacked:
    +m:cpy:
    +m:fillItemCreationForm:ItemCreationOverlay
    +m:fillWithInfo:Table,float
    +m:from:Item
    +m:generateIcon:float,boolean
    +m:getAnalyticName:
    +m:getCategory:
    +m:getData:
    +m:getDataOfType:ItemDataType
    +m:getDescription:
    +m:getIconDrawable:
    +m:getPriceInAcceleratorsForResearchReset:int
    +m:getRarity:
    +m:getSortingScore:ItemSortingType
    +m:getSubcategory:
    +m:getTitle:
    +m:getType:
    +m:isAffectedByDoubleGain:
    +m:isCountable:
    +m:openPack:InventoryStatistics
    -m:read:Kryo,Input
    +m:sameAs:Item
    +m:toJson:Json
    +m:toJsonString:
    -m:write:Kryo,Output
   }
   >c:ItemStack{
    +x:ItemStack
    +x:Item,int
    +f:MAX_COUNT
    +f:SORT_COMPARATOR_KIND
    +f:SORT_COMPARATOR_RARITY_ASC
    +f:SORT_COMPARATOR_RARITY_DESC
    +f:covered
    +m:fromJson:JsonValue
    +m:fromJsonOrNull:JsonValue
    +m:add:int
    +m:cpy:
    +m:getCount:
    +m:getItem:
    -m:read:Kryo,Input
    +m:setCount:int
    +m:setItem:Item
    +m:setItemAndCount:Item,int
    +m:toJson:Json
    +m:toString:
    -m:write:Kryo,Output
   }
   >c:ListenerGroup{
    -c:Serializer
    +x:Class
    +x:Class,String
    -f:CLASS_COMPARATOR
    +m:add:GameListener
    +m:begin:
    +m:clear:
    +m:contains:GameListener
    +m:describe:
    +m:end:
    +m:get:int
    +m:getStateHash:
    +m:remove:GameListener
    +m:size:
   }
   >c:Map{
    >c:EnemyTypeSpawnPair{
     +x:EnemyType,SpawnTile
     +f:enemyType
     +f:spawnTile
    }
    >c:InvalidMapException{
     >c:Reason{
      +f:MULTIPLE_BOSS_TILES
      +f:MULTIPLE_CORES
      +f:MULTIPLE_SOUND_TRACKS
      +f:MULTIPLE_TARGETS
      +f:SPAWN_NOT_FOUND
      +f:TARGET_NOT_FOUND
      +f:TOO_MANY_PORTALS
      +m:valueOf:String
      +m:values:
     }
     +x:Reason,Array
     +f:invalidTiles
     +f:reason
     +m:getFixHintMessage:
    }
    >c:PathNotFoundForEnemyTypeException{
     +x:EnemyType,Throwable
     +f:enemyType
    }
    +x:int,int
    +x:Tile[][],Gate[][][]
    +f:BARRIER_WALK_COST
    +f:GATE_HIT_AREA_WIDTH
    +f:MAX_SIZE
    +f:MAX_TECHNICAL_SIZE
    +f:VOID_WALK_COST
    +f:WALK_COST_1
    +f:WALK_COST_2
    +f:WALK_COST_3
    +f:WALK_COST_4
    +f:WALK_COST_MAX
    +m:fromJson:JsonValue
    +m:getTileIdByPos:Tile
    +m:getTileIndex:float
    +m:posToCell:float
    +m:positionToCoordinate:float
    +m:cpy:
    +m:cpyTrimmed:
    +m:fitGateToMapPos:float,float,Gate
    +m:generateSeed:
    +m:getAllGates:
    +m:getAllTiles:
    +m:getAllowedEnemies:
    +m:getAllowedEnemiesSet:
    +m:getAverageDifficulty:
    +m:getBossWaves:
    +m:getDifficultyExpectedPlaytime:
    +m:getGate:int,int,boolean
    +m:getGateAtPos:Pos
    +m:getGateByMapPos:float,float
    +m:getGatesByType:Class
    +m:getGatesRaw:
    +m:getHeight:
    +m:getMaxedAbilitiesConfiguration:
    +m:getMusicTile:
    +m:getNeighbourTiles:Array,int,int
    +m:getPrestigeScore:
    +m:getPreview:
    +m:getResourcesCount:
    +m:getTargetTile:boolean
    +m:getTargetTileOrThrow:
    +m:getTeleportGates:IntMap
    +m:getTile:int,int
    +m:getTileAtPos:Pos
    +m:getTileByMapPos:float,float
    +m:getTileByMapPosV:Vector2
    +m:getTileCoordinatesByMapPos:float,float
    +m:getTilesByType:Class
    +m:getTilesRaw:
    +m:getTrimBounds:
    +m:getWidth:
    +m:hasTileThatAllowsWalkablePlatforms:
    +m:multiplyPortalsDifficulty:float
    -m:read:Kryo,Input
    +m:regeneratePreview:
    +m:setGate:int,int,boolean,Gate
    +m:setSize:int,int
    +m:setTile:int,int,Tile
    +m:toJson:Json
    +m:traverseNeighborTiles:int,int,Predicate
    +m:unloadPreview:
    +m:validate:
    -m:write:Kryo,Output
   }
   >c:MapPrestigeConfig{
    +x:String,double,int,boolean,boolean,boolean,boolean,boolean,long
    +f:BASE_BONUS
    +f:MAX_DIFFICULTY_BONUS
    +f:NO_ABILITIES_BONUS
    +f:NO_BOUNTY_MOD_BONUS
    +f:NO_MINERS_BONUS
    +f:NO_RESEARCH_BONUS
    +f:WALKABLE_PLATFORMS_BONUS
    +f:averageDifficulty
    +f:mapPrice
    +f:noAbilities
    +f:noBounty
    +f:noMiners
    +f:noResearch
    +f:score
    +f:userMapId
    +f:walkablePlatforms
    +m:fromJson:JsonValue
    +m:getMaxPrestigeScore:int,boolean
    +m:describe:
    +m:getCrownsCount:
    +m:getDifficultyBonus:
    +m:getFinalPrestigeTokens:
    +m:getMaxPrestigeScore:
    +m:getScoreMultiplier:
    +m:getTotalBonus:
    -m:read:Kryo,Input
    +m:toJson:Json
    -m:write:Kryo,Output
   }
   >c:Miner{
    >c:Factory{
     +m:canMineResource:ResourceType
     +m:create:
     +m:createIconActor:float
     +m:dispose:
     +m:getBaseBuildPrice:GameValueProvider
     +m:getBaseMiningSpeed:GameValueProvider
     +m:getDescription:
     +m:getTexture:
     +m:getTitle:
     +m:setup:
     +m:setupAssets:
    }
    +f:MAX_UPGRADE_LEVEL
    +f:affectedByLoopAbility
    +f:doubleSpeedParticle
    +f:doubleSpeedTimeLeft
    +f:existsTime
    +f:id
    +f:lastMinedItemTime
    +f:loopAbilityResourceBuffer
    +f:minedResources
    +f:miningTime
    +f:moneySpentOn
    +f:nearbyModifiers
    +f:nextMinedResourceType
    +f:totalScoreGained
    +f:type
    +m:cloneMiner:
    +m:drawBase:Batch,float,float,float,float,DrawMode
    +m:drawBatch:Batch,float,float,float,float,DrawMode
    +m:getBaseUpgradePrice:int
    +m:getCurrentMiningSpeedFromSystem:
    +m:getInstallDuration:
    +m:getInstallTimeLeft:
    +m:getPreparationProgress:
    +m:getSellPrice:
    +m:getTile:
    +m:getUpgradeLevel:
    +m:getVisualMiningProgress:
    +m:isPrepared:
    +m:loadFromJson:JsonValue
    +m:placedOnMap:
    -m:read:Kryo,Input
    +m:reduceInstallTime:float
    +m:removedFromMap:
    +m:sameAs:Miner
    +m:setInstallTime:float
    +m:setTile:SourceTile
    +m:setUpgradeLevel:int
    +m:toJson:Json
    +m:updateCache:
    +m:updatePieChart:float,float,float
    -m:write:Kryo,Output
   }
   >c:Modifier{
    >c:ConnectionSide{
     +f:BOTTOM
     +f:BOTTOM_LEFT
     +f:BOTTOM_RIGHT
     +f:LEFT
     +f:RIGHT
     +f:TOP
     +f:TOP_LEFT
     +f:TOP_RIGHT
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:Factory{
     +f:color
     +f:iconName
     +f:modifierType
     +f:wires
     +m:canBePlacedNear:ModifierType,GameValueProvider
     +m:create:
     +m:createIconActor:float
     +m:createProcessor:
     +m:getBaseTexture:
     +m:getBuildPrice:GameSystemProvider,int
     +m:getDescription:GameValueProvider
     +m:getFancyTitle:
     +m:getTitle:
     +m:isAvailable:GameValueProvider
     +m:setup:
     +m:setupAssets:
    }
    +f:PENALTY_SELL_PRICE
    +f:WIRES_TEXTURES_CONFIG
    +f:id
    +f:moneySpentOn
    +f:timeSinceBuilt
    +f:type
    +f:visuallyConnectedSides
    +m:cloneBuilding:
    +m:connectsToMiners:
    +m:connectsToTowers:
    +m:customButtonAction:int,int
    +m:dispose:
    +m:drawBatch:Batch,float,DrawMode
    +m:drawBatchAdditive:Batch,float,DrawMode
    +m:fillModifierMenu:Group,ObjectMap
    +m:getSellDelay:
    +m:getSellPrice:
    +m:getTimeTillSellAvailable:
    +m:getWalkCost:
    +m:hasCustomButton:
    +m:isCustomButtonNeedMapPoint:
    +m:isSellAvailable:
    +m:loadFromJson:JsonValue
    -m:read:Kryo,Input
    +m:sameAs:Building
    +m:setSideConnected:ConnectionSide,boolean
    +m:toJson:Json
    +m:update:float
    +m:updateCache:
    +m:updateCustomButton:ComplexButton,boolean
    -m:write:Kryo,Output
   }
   >c:ModifierProcessor{
    -m:read:Kryo,Input
    -m:write:Kryo,Output
   }
   -c:NormalGame
   >c:Projectile{
    >c:Factory{
     +m:free:Projectile
     +m:obtain:
     +m:setup:ProjectileSystem
     +m:setupAssets:
    }
    +f:id
    +f:position
    +f:type
    +m:applyDrawInterpolation:float
    +m:draw:Batch,float
    +m:flyOnEnemy:Enemy
    +m:getDamage:
    +m:getPosition:
    +m:hasReachedTarget:
    +m:hit:
    +m:isDone:
    +m:multiplyDamage:float
    +m:onDone:
    -m:read:Kryo,Input
    +m:reset:
    +m:setDamage:float
    +m:setup:
    +m:toString:
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:Registrable{
    +f:S
    +m:isRegistered:
    -m:read:Kryo,Input
    +m:setRegistered:GameSystemProvider
    +m:setUnregistered:
    -m:write:Kryo,Output
   }
   >c:Requirement{
    +x:
    +f:levelName
    +f:levelStars
    +f:openedLevelName
    +f:researchLevel
    +f:researchType
    +f:stageName
    +f:stageStars
    +f:statisticsType
    +f:statisticsValue
    +f:type
    -m:fromJson:JsonParser
    +m:fromJson:JsonValue
    +m:getFormattedValue:
    +m:getIconTextureName:
    +m:getTitle:boolean
    +m:isSatisfied:
    +m:setType:RequirementType
    +m:toJson:Json
    +m:toString:
   }
   >c:Research{
    >c:EndlessResearchLevel{
     +f:blueprintType
     +f:effects
     +f:prestigeTokens
     +f:priceBase
     +f:randomSeed
     +m:getPrice:int
    }
    >c:ResearchLevel{
     +x:
     +f:effects
     +f:number
     +f:price
     +f:requirements
     +f:researchDuration
     -m:fromJson:JsonParser
    }
    >c:ResearchLink{
     +x:Research,Research,int,int,int,float
     +f:child
     +f:parent
     +f:pivotX
     +f:pivotY
     +f:requiredLevels
     +f:requiredLevelsLabelPos
     +f:requiredLevelsLabelX
     +f:requiredLevelsLabelY
     -m:fromJson:JsonParser
     +m:isVisible:
    }
    +x:ResearchType,ResearchCategory,ResearchLevel[],int
    +f:RESET_RESEARCH_STATE_AVAILABLE
    +f:RESET_RESEARCH_STATE_HAS_CHILD
    +f:RESET_RESEARCH_STATE_NOT_ENOUGH_ACCELERATORS
    +f:RESET_RESEARCH_STATE_NOT_INSTALLED
    +f:RESET_RESEARCH_STATE_NOT_SUITABLE
    +f:RESET_RESEARCH_STATE_STAR_BRANCH
    +f:cantBeIgnoredOnUserMaps
    +f:category
    +f:distanceToCenter
    +f:endlessLevel
    +f:endlessOnly
    +f:endlessPriceExp
    +f:endlessPriceLevel
    +f:levels
    +f:linksToChildren
    +f:linksToParents
    +f:maxEndlessLevel
    +f:priceInStars
    +f:relatedToTowerType
    +f:small
    +f:type
    +f:unlocksTower
    +f:x
    +f:y
    -m:fromJson:JsonParser
    +m:getCumulativePrice:int,int,boolean
    +m:getDescription:
    +m:getEffects:int
    +m:getInstalledLevel:
    +m:getMaxLevel:
    +m:getMaxRegularLevel:
    +m:getRelatedToTowerType:
    +m:getResetPrice:
    +m:getShortName:
    +m:getTitle:
    +m:isMaxEndlessLevel:
    +m:isMaxNormalLevel:
    +m:isUnlocksTower:
    +m:resetForAcceleratorsState:
    +m:setInstalledLevel:int
   }
   >c:ResearchCategory{
    +x:ResearchCategoryType,String,String,String
    +f:alias
    +f:descriptionAlias
    +f:titleAlias
    -m:fromJson:JsonParser
    +m:getDescription:
    +m:getIcon:
    +m:getIconString:
    +m:getTitle:
   }
   >c:Resource{
    +x:
    +f:NAMES
    +f:TEXTURE_REGION_NAMES
   }
   >c:ResourcePack{
    >c:AtlasTextureRegion{
     +m:getAtlas:
    }
    >c:ResourcePackBitmapFont{
     -x:FileHandle,Array,boolean
     +f:resourcePack
    }
    -x:String,boolean
    -f:RESOURCE_PACKS_DIR
    +f:fontResolution
    +f:name
    +f:version
    -m:preloadQuadRegionSetRecursive:JsonNode,String,String,ObjectMap,AssetProvider
    -m:dispose:
    +m:getBlankWhiteTextureRegion:
    +m:getColor:String
    +m:getFont:int
    +m:getFontWithMarkup:int,boolean
    +m:getLoadedAtlases:
    +m:getMenuXmSoundTrack:
    +m:getQuad:String
    +m:getSound:StaticSoundType
    +m:getTextureRegion:String
    +m:getTextureRegionSet:String
    +m:getTextureRegionSets:
    +m:getTextureRegions:
    +m:hasSounds:
   }
   >c:Screen{
    +m:dispose:
    +m:draw:float
    +m:hide:
    +m:pause:
    +m:render:float
    +m:resize:int,int
    +m:resume:
    +m:show:
   }
   -c:SerializableListener
   >c:Shape{
    >c:Factory{
     -m:dispose:
     +m:free:Shape
     +m:obtain:
     -m:setup:
    }
    +m:draw:Batch
   }
   >c:SpaceTileBonus{
    -x:
    +f:MAX_LEVEL
    +m:getBrightColor:SpaceTileBonusType
    +m:getColor:SpaceTileBonusType
    +m:getDetailedName:SpaceTileBonusType,int
    +m:getEffect:SpaceTileBonusType,int
    +m:getIconName:SpaceTileBonusType
   }
   >c:StaticSound{
    +x:StaticSoundType,Sound,int
    +f:durationMs
    +f:sound
    +f:type
   }
   >c:Threads{
    >c:DaemonThreadFactory{
     +x:String,boolean
     +m:newThread:Runnable
    }
    +m:i:
    +m:sort:Object[],Comparator
    +m:sortArraySlice:Object[],int,int,Comparator
    +m:sortGdxArray:Array,Comparator
    -m:asyncConcurrentLoop:Object[],int,int,IntObjectConsumer,Runnable,ObjectConsumer
    -m:concurrentLoop:Array,IntObjectConsumer
    -m:concurrentLoop:Object[],int,int,IntObjectConsumer
    +m:createThread:String,Runnable,boolean
    +m:postRunnable:Runnable
    +m:postRunnableOnce:Runnable
    -m:runAsync:Runnable
    -m:runAsync:Runnable,ObjectConsumer
    +m:runOnMainThread:Runnable
    +m:runOnMainThreadBlocking:Runnable,float
    +m:synchronize:Object,Runnable
    +m:tryCatch:Runnable,ObjectConsumer
    +m:tryFinally:Runnable,Runnable
   }
   >c:Tile{
    >c:Factory{
     >c:AbstractFactory{
      +m:createRandom:float,RandomXS128
      +m:dispose:
      +m:fromJson:JsonValue
      +m:getDescription:
      +m:getTitle:
      +m:setup:
      +m:setupAssets:
     }
     +z
     +m:create:
     +m:createRandom:float,RandomXS128
     +m:fromJson:JsonValue
     +m:getDescription:
     +m:getProbabilityForPrize:float,InventoryStatistics
     +m:getTitle:
     +m:setup:
    }
    >c:Pos{
     +x:
     +x:Pos
     +x:Tile
     +x:int,int
     +m:equals:Object
     +m:getX:
     +m:getY:
     +m:hashCode:
     +m:is:int,int
     -m:read:Kryo,Input
     +m:set:Pos
     +m:setX:int
     +m:setY:int
     +m:toString:
     -m:write:Kryo,Output
    }
    +f:boundingBox
    +f:center
    +f:enemyCount
    +f:highlightParticleA
    +f:highlightParticleB
    +f:type
    +f:visibleOnScreen
    +m:addSellItems:Array
    +m:affectedByLuckyWheelMultiplier:
    +m:canBeSelected:
    +m:canBeSold:
    +m:canBeUpgraded:
    +m:cloneTile:
    +m:createUpgradedTile:
    +m:drawBatch:Batch,float,float,float,float,float,DrawMode
    +m:drawExtras:Batch,float,float,float,float,DrawMode
    +m:drawHoveredRange:Batch,RangeCircle
    +m:drawRoadStatic:Batch,float,float,float,float,Map
    +m:drawSelectedRange:Batch,RangeCircle
    +m:drawStatic:Batch,float,float,float,float,Map,DrawMode
    +m:fillInventoryWithInfo:Table,float
    +m:fillItemCreationForm:ItemCreationOverlay
    +m:fillMapEditorMenu:Table,MapEditorItemInfoMenu
    +m:from:Tile
    +m:generateSeedSalt:
    +m:generateUiIcon:float
    +m:getBoundingBox:
    +m:getData:IntArray
    +m:getDescription:
    +m:getInventorySubcategory:
    +m:getPrestigeScore:
    +m:getRarity:
    +m:getSortingScore:ItemSortingType
    +m:getTitle:
    +m:getUpgradePriceInAccelerators:
    +m:getUpgradePriceInGreenPapers:
    +m:getUpgradePriceInResources:ResourceType
    +m:getUserData:String
    +m:getValue:
    +m:getWalkCost:boolean
    +m:getX:
    +m:getY:
    +m:isRoadType:
    +m:postDrawBatch:Batch,float,float,float,float,float,DrawMode
    -m:read:Kryo,Input
    +m:removeExtrasForInventory:
    +m:sameAs:Tile
    +m:sameAsWithExtras:Tile
    +m:setPos:int,int
    +m:setUserData:String,Object
    +m:toJson:Json
    +m:toString:
    +m:updateCache:
    -m:write:Kryo,Output
   }
   >c:Tower{
    >c:AbilityConfig{
     +x:String,String
     +f:descriptionArgs
     +m:getDescription:
     +m:getName:
    }
    >c:AimStrategy{
     +f:FIRST
     +f:LAST
     +f:NEAREST
     +f:RANDOM
     +f:STRONGEST
     +f:WEAKEST
     +f:values
     +m:valueOf:String
     +m:values:
    }
    >c:Factory{
     +f:roundedSmallRectTextureRegion
     +m:canKillEnemies:
     +m:configureSystems:GameSystemProvider
     +m:create:
     +m:createIconActor:float
     +m:getAbilityAliases:
     +m:getAbilityConfigs:GameSystemProvider,Tower
     +m:getAbilityTextures:int
     +m:getBaseTextures:
     +m:getBuildHotKey:
     +m:getBuildPrice:GameSystemProvider
     +m:getColor:
     +m:getDescription:
     +m:getGeneralizedStat:GeneralizedTowerStatType
     +m:getIconDrawable:
     +m:getIconTexture:
     +m:getShadowTextures:
     +m:getStatMoreInfo:TowerStatType,GameValueProvider,Tower
     +m:getTitle:
     +m:getWeaponShadowTexture:
     +m:getWeaponTexture:
     +m:isAvailable:GameValueProvider
     +m:receivesSpaceTileBonus:SpaceTileBonusType
     +m:setup:
     +m:setupAssets:
     +m:shouldDrawAbilityToCache:int
    }
    >c:FindEnemyFilter{
     +m:isValid:Enemy
    }
    +f:ABILITIES_COUNT
    +f:ABILITY_INDEX_POWERFUL
    +f:ABILITY_INDEX_SPECIAL
    +f:ABILITY_INDEX_ULTIMATE
    +f:ABILITY_NAMES
    +f:DPS_STAT_INTERVAL
    +f:DPS_STAT_SLOTS
    +f:LEVEL_EXPERIENCE
    +f:LEVEL_EXPERIENCE_MILESTONES
    +f:MAX_LEVEL
    +f:MAX_UPGRADE_LEVEL
    +f:SHADOW_COLOR
    +f:abilityAvailableParticleEffect
    +f:affectedByLoopAbility
    +f:aimStrategy
    +f:angle
    +f:attackDisabled
    +f:bonusCoinsBrought
    +f:bountyModifiersNearby
    +f:currentLevelExperience
    +f:damageGiven
    +f:dpsDamage
    +f:dpsTime
    +f:enemiesKilled
    +f:experience
    +f:experienceGeneration
    +f:experienceMultiplier
    +f:id
    +f:installedAbilities
    +f:level
    +f:loopAbilityDamageBuffer
    +f:mdps
    +f:minRangeInPixels
    +f:moneySpentOn
    +f:nextLevelExperience
    +f:outOfOrder
    +f:powerBonuses
    +f:rangeInPixels
    +f:shotCount
    +f:type
    +m:getExpLevelStatBonusPercentage:int,TowerType,GameValueProvider
    +m:getLevelExperienceMilestone:int
    +m:getLevelForExperience:float
    +m:getLevelForExperienceFast:float
    +m:getStartingLevel:TowerType,GameValueProvider
    +m:getStartingPwr:TowerType,GameValueProvider
    +m:addExperience:float
    +m:applyDrawInterpolation:float
    +m:attack:int
    +m:calculateXpLevel:boolean
    +m:canAbilityBeInstalled:int
    +m:canAim:
    +m:canAttack:
    +m:canAttackEnemy:Enemy
    +m:canNewAbilityBeInstalled:
    +m:cloneBuilding:
    +m:customButtonAction:int,int
    +m:dispose:
    +m:drawAbilitiesToCache:Batch,float,float,float,float,DrawMode
    +m:drawBase:Batch,float,float,float,float,DrawMode
    +m:drawBatch:Batch,float
    +m:drawBatchAdditive:Batch,float
    +m:drawGlitch:Batch
    +m:drawHoveredRange:Batch,RangeCircle
    +m:drawSelectedRange:Batch,RangeCircle
    +m:drawWeapon:Batch,float,float,float,float
    +m:fillTowerMenu:Group,ObjectMap
    +m:findTarget:
    +m:findTargetFiltered:ObjectFilter
    +m:getAttackDelay:
    +m:getEnemyPriority:Enemy
    +m:getLevel:
    +m:getMaxTowerLevel:
    +m:getMaxUpgradeLevel:
    +m:getMinRange:
    +m:getPowerCombinedMultiplier:
    +m:getRange:
    +m:getSellPrice:
    +m:getStat:TowerStatType
    +m:getTarget:
    +m:getUniqueStatDescription:
    +m:getUpgradeLevel:
    +m:getWalkCost:
    +m:getWeaponTextures:
    +m:hasCustomButton:
    +m:isAbilityInstalled:int
    +m:isCustomButtonNeedMapPoint:
    +m:isOutOfOrder:
    +m:isSellFullRefundStillActive:
    +m:isStatAffectedByPower:TowerStatType
    +m:loadFromJson:JsonValue
    +m:onAbilitySet:int,boolean
    +m:onPreSell:
    +m:placedOnMap:
    -m:read:Kryo,Input
    +m:removedFromMap:
    +m:rotateAtPoint:float,float,float,float
    +m:rotateToAngle:float,float,float
    +m:sameAs:Building
    +m:setAimStrategy:AimStrategy
    +m:setExperience:float
    +m:setLevel:short
    +m:setRegistered:GameSystemProvider
    +m:setTarget:Enemy
    +m:setUnregistered:
    +m:setUpgradeLevel:byte
    +m:shouldSearchForTarget:
    +m:toJson:Json
    +m:update:float
    +m:updateCache:
    +m:updateCustomButton:ComplexButton,boolean
    +m:upgrade:
    +m:upgradeToLevel:byte
    -m:write:Kryo,Output
   }
   >c:Unit{
    >c:Factory{
     >c:BasicAbstractFactory{
      +m:dispose:
      +m:getBreakParticle:
      +m:setup:
      +m:setupAssets:
     }
     +z
     +m:create:
     +m:dispose:
     +m:getBreakParticle:
     +m:getColor:
     +m:getUnitType:
     +m:setup:
    }
    +f:angle
    +f:drawAngle
    +f:drawOverEnemies
    +f:drawPosition
    +f:graphPath
    +f:id
    +f:passedTiles
    +f:position
    +f:sideShiftIndex
    +f:spawned
    +f:speed
    +f:startingTile
    +f:staticPosition
    +f:targetTile
    +f:type
    +m:applyDrawInterpolation:float
    +m:drawBatch:Batch,float
    +m:getPassedTilesDelta:float
    +m:getSize:
    +m:onDespawned:
    +m:onSpawned:
    -m:read:Kryo,Input
    +m:update:float
    -m:write:Kryo,Output
   }
   >c:UserMap{
    +x:String
    +f:creationTimestamp
    +f:id
    +f:map
    +f:name
    +f:submittedOnline
    +m:fromJson:JsonValue
    +m:cpy:
    +m:removeUnexistentTilesFromMap:
    +m:toJson:Json
   }
   >c:Wave{
    +x:int,int,Array
    +f:completed
    +f:difficulty
    +f:enemiesCanBeSplitBetweenSpawns
    +f:enemiesCanHaveRandomSideShifts
    +f:enemiesSumBounty
    +f:enemiesSumHealth
    +f:enemiesTookDamage
    +f:enemyGroups
    +f:killedEnemiesBountySum
    +f:killedEnemiesCount
    +f:passedEnemiesCount
    +f:started
    +f:totalEnemiesCount
    +f:waveMessage
    +f:waveNumber
    +f:waveProcessor
    +m:calculateDefaultBossWaveCoinsSum:int
    +m:calculateDefaultBossWaveExpSum:int
    +m:calculateDefaultBossWaveScoreSum:int
    +m:getSpawnedEnemyCount:
    +m:isFullySpawned:
    -m:read:Kryo,Input
    +m:toString:
    -m:write:Kryo,Output
   }
   >c:WaveTemplates{
    >c:EnemyGroupConfig{
     +z
     +m:getBounty:int,float,float
     +m:getCount:int,float,float
     +m:getDelay:int,float,float
     +m:getEnemyType:
     +m:getHealth:int,float,float
     +m:getInterval:int,float,float
     +m:getKillExp:int,float,float
     +m:getKillScore:int,float,float
     +m:getSpeed:int,float,float
    }
    >c:PredefinedWaveTemplate{
     +x:
     +x:EnemyGroup
     +x:EnemyGroup,EnemyGroup
     +x:EnemyGroup,EnemyGroup,EnemyGroup
     +f:enemyGroups
     +f:waveMessage
     +m:fromJson:JsonValue
     -m:read:Kryo,Input
     +m:toJson:Json
     -m:write:Kryo,Output
    }
    >c:WaveTemplate{
     +m:getEnemyGroupConfigs:
     +m:getProbability:int,float,float
     +m:getWaveMessage:
     +m:getWaveName:
    }
    +x:
    +f:ARMORED_LOW
    +f:ARMORED_REGULAR
    +f:ARMORED_STRONG
    +f:FAST_HIGH
    +f:FAST_LOW
    +f:FAST_MEDIUM
    +f:FIGHTER_ARMORED
    +f:FIGHTER_LOW
    +f:FIGHTER_MEDIUM
    +f:HEALER_ARMORED
    +f:HEALER_ICY
    +f:HEALER_JET
    +f:HEALER_REGULAR
    +f:HEALER_SLOW
    +f:HEALER_STRONG
    +f:HELI_MEDIUM
    +f:ICY_HIGH
    +f:ICY_TOXIC
    +f:JET_MEDIUM
    +f:LIGHT_FAST
    +f:LIGHT_HIGH
    +f:LIGHT_MEDIUM
    +f:REGULAR_HIGH
    +f:REGULAR_LOW
    +f:REGULAR_MEDIUM
    +f:STRONG_LOW
    +f:STRONG_MEDIUM
    +f:TOXIC_ARMORED
    +f:TOXIC_HIGH
    +f:TOXIC_MEDIUM
    +f:WAVE_TEMPLATES
    +m:calculateProbability:int,float,int,float,float,float,float,float,float,int
    +m:getByName:String
   }
  }
 }
}
>p:net{
 -p:bytebuddy
}
>p:org{
 -p:objenesis
}
