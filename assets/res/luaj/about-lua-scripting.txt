This file explains some aspects of Lua scripting in Infinitode 2.
Please note that such files are scattered everywhere and they may be outdated - I don't have much
time to gather all of them in a single place and maintain it, but will do that as soon as scripting /
modding / custom maps get official.

== Directory structure
=== This directory
- res/luaj/class-list.txt is used by the game to build a class tree (those global tables like "com", "net"
  etc)
- res/luaj/javadoc-sources.txt is used by "generate-lua-defs" tool - parameter names and the actual
  documentation comes from the Javadoc websites. Links can be changed, for example to a different
  version of LibGDX or Java
- res/luaj/packages-to-scan.txt defines a list of packages that will be scanned by the Lua whitelist editor
  and the "generate-lua-defs" tool
- res/luaj/whitelist.txt contains a tree of packages, classes, fields, methods, constructors... of anything
  you can use in Java and what can be exposed to Lua. It is generated by the in-game editor.

=== Scripts directory
- scripts/.definitions contains definitions for Java's structures that you can use in your Lua scripts.
  Run `./infinitode-2.exe generate-lua-defs` for it to generate everything in
  scripts/.definitions/classes, in case you've changed something in the whitelist / using different
  version of Java and want to experiment with it / want to use some different Javadoc source.
- scripts/game contains scripts that will run at the start of any level, just like if they exist as
  a script tiles on the map
- scripts/global run once at the launch of the game, as soon as scriptManager is ready to run scripts
- scripts/levels contains scripts for an individual maps - those maps simply run dofile() and load
  their script from this directory. Feel free to examine those scripts, they act as examples and you
  can edit them too
- scripts/map-editor scripts run each time map editor is launched. These scripts can be used to add
  new tools to the map editor
- scripts/misc contains scripts that are used as a libraries in some of the existing scripts. Some
  of them are not used, some of them should be called manually - treat this directory as a shared
  storage for random scripts
- scripts/tests (if exists) contains Lua 5.2 test scripts. Most of them fail, so just ignore this folder
- scripts/utils is like scripts/misc but scripts here are guaranteed to be used as a utility libraries
- scripts/ (.lua files in the root of that dir) run always before game/, global/ and map-editor/.
  They contain some shared code needed by all scripts.

Note: .lua files whose name starts with "_" are ignored and won't be run.

== Whitelist
This thing is used to restrict Lua code. The game comes with a default whitelist, which allows Lua
scripts to do many things but also tries to put some constraints on it so it is less likely for a
harmful script to do damage to the player or his device.

Don't try to edit whitelist.txt manually - it is hard and will result in many errors. In-game
editor is a way to go.

Whitelist editor can be launched with `cmd.lua_whitelist_editor()`
or `com.prineside.tdi2.ui.shared.LuajavaWhitelistEditor.class:i():show()`

There are different things in the whitelist from which the whole tree is built, each thing
corresponds to a similar Java structure of the class tree - packages organize classes, classes may
contain fields / methods / constructors or inner classes.

whitelist.txt is called a whitelist and not a blacklist, because it basically only allows to access
things that are whitelisted. It does not care about the manually blacklisted stuff - everything
that's not whitelisted is blacklisted. Blacklisting (red stuff in the editor) allows you to mark the
class tree so you know which classes or packages were reviewed and skipped by you. Blacklisted items
also act as a hint for the "generate-lua-defs" tool, which will show an error if something in a
blacklisted package / class ends up in the whitelist.

This whitelist does not prevent Lua from "holding" objects in its variables, meaning the script can
pass an object it can't do anything with, but only to the methods or fields it has access to.

- Black / not colored items - not marked and not added to the whitelist.txt
- Bright green - item is whitelisted. Only applied to fields, methods, constructors and interface
  instantiators.
  - Class methods can be called by Lua
  - Interface methods allow Lua to call them on any object which implements this interface
  - Class constructors allow to create new objects of that class
  - Interface instantiators (proxying) allows to create "proxy" objects which implement that
    interface. These objects act just like a regular Java object and you can pass them anywhere Java
    expects the interface
  - Fields can be read / written to
- Dark green - all of the item's children are whitelisted. Applies to classes and packages, because
  they can not be whitelisted by themselves (in case a new field or method gets added in the future
  update or if running on a different Java VM, it won't get automatically whitelisted)
- Red means the item or all its children are blacklisted

Some classes and packages are not whitelisted by default due to one or many of these reasons:
- They may be harmful
- They do not work or are simply absent from some platforms (usually iOS)
- They serve no purpose for Lua scripting (for example, Kryo serialization classes)
- There's an alternative somewhere in the game's code, which is easier to use and is guaranteed to
  be working on all supported platforms

Important thing to note: whitelist editor expects to be run on Java 8 VM, because the default
whitelist is built for it. It will show a warning if you run it from a different VM but will still
work as usual - you'll just notice new entries in the editor which were introduced by that newer VM.
Infinitode uses Java 8 as a base, because that's what (somewhat) supported by Android and iOS. It
runs Java 16+ on Steam, which has new cool features, but scripts are limited to Java 8 to guarantee
cross-platform support.

You can edit the whitelist in any way you like and experiment with a new classes and methods that
are not available by default - it may be unsafe though, but you know whom to blame.
If you find something in this game's code that is not whitelisted but is very crucial for your
script, you can whitelist it so your scripts can use it. If it proves to be useful and you believe
the game would be better if this thing gets whitelisted, write about it on the issue tracker or
on Discord and I may whitelist it by default (if that's not something dangerous).

TODO format stuff below - copied from some other file

== Few notes on Lua <=> Java compatibility:
-   Lua has no such thing as an 'interface', this can be problematic (for IDE suggestions and error
    checking) when you try to use some object by its interface you know it has but Lua does not know about.
    You can manually cast a variable to the type you know it has: simply add --[[@as classType]] after its name.
    List of interfaces implemented by a class can be found in its documentation.
        Example:
        local mod = com.prineside.tdi2.gameplayMods.mods.BaseExplodesOnEnemyPass.class.new()
        SP.gameplayMod:activateMod(mod --[[@as com.prineside.tdi2.gameplayMods.GameplayMod]], "My fancy script")

-   Lua has no such thing as a 'method overload', but Java has. Some Java classes can have multiple methods
    with the same name and different parameters - your IDE may fail to detect the exact method called,
    which may result in multiple types returned by the method.
        Example:
        scene2d.ui.Table:add() methods may return (Cell|Table) - you can specify the exact type of the returned value like this:
        local cell = table:add(someLabel) --[[@as com.badlogic.gdx.scenes.scene2d.ui.Cell]]

-   Some of the Lua reserved keywords are perfectly valid Java field/method names (for example, 'end()') and it will
    not allow to call those methods by their real name. Also, Java class can have methods and fields with the same name.
    To overcome this, add _F_ or _M_ prefixes to those methods or fields.
        Example:
        If you want to call Batch:end(), use Batch:_M_end()
        If you want to access EnemyType.values field (but EnemyType also extends Enum and has values() method), use EnemyType._F_values

-   These class definitions were generated to be used in VSCode and they require this popular extension:
    https://marketplace.visualstudio.com/items?itemName=sumneko.lua
    This extension is great but it has some issues, so you will need to write some @cast and other stuff to keep your editor happy.
        - It does not support interfaces, and I doubt anything does
        - @generic is still in development and has issues so I did not use it (use @cast / @as where needed)

-   large Lua numbers turn into 'double', in case you run into problems where some number does not want to be passed to Java
